# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2021-05-28 16:17-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es_LA\n"
"X-Generator: Poedit 2.4.3\n"

#: ../../patterns/appdispatch.rst:2
msgid "Application Dispatching"
msgstr "Despacho de aplicaciones"

#: ../../patterns/appdispatch.rst:4
msgid ""
"Application dispatching is the process of combining multiple Flask applications "
"on the WSGI level.  You can combine not only Flask applications but any WSGI "
"application.  This would allow you to run a Django and a Flask application in "
"the same interpreter side by side if you want.  The usefulness of this depends "
"on how the applications work internally."
msgstr ""
"El despacho de aplicaciones es el proceso de combinar múltiples aplicaciones "
"Flask en el nivel WSGI. Puedes combinar no sólo aplicaciones Flask sino "
"cualquier aplicación WSGI. Esto te permitiría ejecutar una aplicación Django y "
"una aplicación Flask en el mismo intérprete una al lado de la otra si lo "
"deseas. La utilidad de esto depende de cómo funcionen las aplicaciones "
"internamente."

#: ../../patterns/appdispatch.rst:11
msgid ""
"The fundamental difference from :doc:`packages` is that in this case you are "
"running the same or different Flask applications that are entirely isolated "
"from each other. They run different configurations and are dispatched on the "
"WSGI level."
msgstr ""
"La diferencia fundamental con :doc:`packages` es que en este caso estás "
"ejecutando la misma o diferentes aplicaciones Flask que están completamente "
"aisladas entre sí. Ejecutan configuraciones diferentes y se despachan en el "
"nivel WSGI."

#: ../../patterns/appdispatch.rst:18
msgid "Working with this Document"
msgstr "Trabajar con este documento"

#: ../../patterns/appdispatch.rst:20
msgid ""
"Each of the techniques and examples below results in an ``application`` object "
"that can be run with any WSGI server. For production, see :doc:`/deploying/"
"index`. For development, Werkzeug provides a server through :func:`werkzeug."
"serving.run_simple`::"
msgstr ""
"Cada una de las técnicas y ejemplos que aparecen a continuación dan como "
"resultado un objeto ``aplicación`` que puede ejecutarse con cualquier servidor "
"WSGI. Para producción, vea :doc:`/deploying/index`. Para desarrollo, Werkzeug "
"proporciona un servidor a través de :func:`werkzeug.serving.run_simple`::"

#: ../../patterns/appdispatch.rst:28
msgid ""
"Note that :func:`run_simple <werkzeug.serving.run_simple>` is not intended for "
"use in production.  Use a production WSGI server. See :doc:`/deploying/index`."
msgstr ""
"Tenga en cuenta que :func:`run_simple <werkzeug.serving.run_simple>` no está "
"pensado para su uso en producción.  Utilice un servidor WSGI de producción. "
"Consulte :doc:`/deploying/index`."

#: ../../patterns/appdispatch.rst:31
msgid ""
"In order to use the interactive debugger, debugging must be enabled both on the "
"application and the simple server. Here is the \"hello world\" example with "
"debugging and :func:`run_simple <werkzeug.serving.run_simple>`::"
msgstr ""
"Para poder utilizar el depurador interactivo, la depuración debe estar "
"habilitada tanto en la aplicación como en el servidor simple. Aquí está el "
"ejemplo de \"hola mundo\" con depuración y :func:`run_simple <werkzeug.serving."
"run_simple>`::"

#: ../../patterns/appdispatch.rst:51
msgid "Combining Applications"
msgstr "Combinación de aplicaciones"

#: ../../patterns/appdispatch.rst:53
msgid ""
"If you have entirely separated applications and you want them to work next to "
"each other in the same Python interpreter process you can take advantage of "
"the :class:`werkzeug.wsgi.DispatcherMiddleware`.  The idea here is that each "
"Flask application is a valid WSGI application and they are combined by the "
"dispatcher middleware into a larger one that is dispatched based on prefix."
msgstr ""
"Si tienes aplicaciones completamente separadas y quieres que funcionen una al "
"lado de la otra en el mismo proceso de interpretación de Python puedes "
"aprovechar la :class:`werkzeug.wsgi.DispatcherMiddleware`. La idea aquí es que "
"cada aplicación Flask es una aplicación WSGI válida y son combinadas por el "
"middleware despachador en una más grande que es despachada basada en el prefijo."

#: ../../patterns/appdispatch.rst:60
msgid ""
"For example you could have your main application run on ``/`` and your backend "
"interface on ``/backend``::"
msgstr ""
"Por ejemplo, podrías tener tu aplicación principal ejecutada en ``/`` y tu "
"interfaz backend en ``/backend``::"

#: ../../patterns/appdispatch.rst:73
msgid "Dispatch by Subdomain"
msgstr "Despacho por subdominio"

#: ../../patterns/appdispatch.rst:75
msgid ""
"Sometimes you might want to use multiple instances of the same application with "
"different configurations.  Assuming the application is created inside a "
"function and you can call that function to instantiate it, that is really easy "
"to implement.  In order to develop your application to support creating new "
"instances in functions have a look at the :doc:`appfactories` pattern."
msgstr ""
"A veces puedes querer usar múltiples instancias de la misma aplicación con "
"diferentes configuraciones. Asumiendo que la aplicación es creada dentro de una "
"función y que puedes llamar a esa función para instanciarla, eso es realmente "
"fácil de implementar. Para desarrollar tu aplicación de forma que soporte la "
"creación de nuevas instancias en funciones echa un vistazo al patrón :doc:"
"`appfactories`."

#: ../../patterns/appdispatch.rst:82
msgid ""
"A very common example would be creating applications per subdomain.  For "
"instance you configure your webserver to dispatch all requests for all "
"subdomains to your application and you then use the subdomain information to "
"create user-specific instances.  Once you have your server set up to listen on "
"all subdomains you can use a very simple WSGI application to do the dynamic "
"application creation."
msgstr ""
"Un ejemplo muy común sería crear aplicaciones por subdominio. Por ejemplo, "
"configuras tu servidor web para que envíe todas las peticiones de todos los "
"subdominios a tu aplicación y luego utilizas la información del subdominio para "
"crear instancias específicas para cada usuario. Una vez que tengas tu servidor "
"configurado para escuchar en todos los subdominios puedes usar una aplicación "
"WSGI muy simple para hacer la creación de aplicaciones dinámicas."

#: ../../patterns/appdispatch.rst:89
msgid ""
"The perfect level for abstraction in that regard is the WSGI layer.  You write "
"your own WSGI application that looks at the request that comes and delegates it "
"to your Flask application.  If that application does not exist yet, it is "
"dynamically created and remembered::"
msgstr ""
"El nivel perfecto de abstracción en ese sentido es la capa WSGI. Escribes tu "
"propia aplicación WSGI que mira la petición que llega y la delega a tu "
"aplicación Flask. Si esa aplicación no existe todavía, se crea dinámicamente y "
"se recuerda::"

#: ../../patterns/appdispatch.rst:120
msgid "This dispatcher can then be used like this::"
msgstr "Este despachador puede usarse así::"

#: ../../patterns/appdispatch.rst:142
msgid "Dispatch by Path"
msgstr "Despacho por Ruta"

#: ../../patterns/appdispatch.rst:144
msgid ""
"Dispatching by a path on the URL is very similar.  Instead of looking at the "
"``Host`` header to figure out the subdomain one simply looks at the request "
"path up to the first slash::"
msgstr ""
"La distribución por una ruta en la URL es muy similar. En lugar de mirar la "
"cabecera ``Host`` para averiguar el subdominio simplemente se mira la ruta de "
"la petición hasta la primera barra::"

#: ../../patterns/appdispatch.rst:176
msgid ""
"The big difference between this and the subdomain one is that this one falls "
"back to another application if the creator function returns ``None``::"
msgstr ""
"La gran diferencia entre ésta y la del subdominio es que ésta retrocede a otra "
"aplicación si la función del creador devuelve ``None``::"

#: ../../patterns/appfactories.rst:2
msgid "Application Factories"
msgstr "Fábricas de aplicaciones"

#: ../../patterns/appfactories.rst:4
msgid ""
"If you are already using packages and blueprints for your application (:doc:`/"
"blueprints`) there are a couple of really nice ways to further improve the "
"experience.  A common pattern is creating the application object when the "
"blueprint is imported.  But if you move the creation of this object into a "
"function, you can then create multiple instances of this app later."
msgstr ""
"Si ya estás usando paquetes y blueprints para tu aplicación (:doc:`/"
"blueprints`) hay un par de formas muy buenas de mejorar la experiencia.  Un "
"patrón común es crear el objeto de la aplicación cuando se importa el "
"blueprint.  Pero si mueves la creación de este objeto a una función, puedes "
"crear múltiples instancias de esta aplicación más tarde."

#: ../../patterns/appfactories.rst:10
msgid "So why would you want to do this?"
msgstr "Entonces, ¿por qué querrías hacer esto?"

#: ../../patterns/appfactories.rst:12
msgid ""
"Testing.  You can have instances of the application with different settings to "
"test every case."
msgstr ""
"Pruebas. Puedes tener instancias de la aplicación con diferentes "
"configuraciones para probar cada caso."

#: ../../patterns/appfactories.rst:14
msgid ""
"Multiple instances.  Imagine you want to run different versions of the same "
"application.  Of course you could have multiple instances with different "
"configs set up in your webserver, but if you use factories, you can have "
"multiple instances of the same application running in the same application "
"process which can be handy."
msgstr ""
"Múltiples instancias. Imagina que quieres ejecutar diferentes versiones de la "
"misma aplicación. Por supuesto, usted podría tener múltiples instancias con "
"diferentes configuraciones establecidas en su servidor web, pero si usted "
"utiliza las fábricas, puede tener múltiples instancias de la misma aplicación "
"que se ejecuta en el mismo proceso de aplicación que puede ser útil."

#: ../../patterns/appfactories.rst:20
msgid "So how would you then actually implement that?"
msgstr "Entonces, ¿cómo se implementa esto?"

#: ../../patterns/appfactories.rst:23
msgid "Basic Factories"
msgstr "Fábricas básicas"

#: ../../patterns/appfactories.rst:25
msgid "The idea is to set up the application in a function.  Like this::"
msgstr "La idea es configurar la aplicación en una función.  Así::"

#: ../../patterns/appfactories.rst:41
msgid ""
"The downside is that you cannot use the application object in the blueprints at "
"import time.  You can however use it from within a request.  How do you get "
"access to the application with the config?  Use :data:`~flask.current_app`::"
msgstr ""
"El inconveniente es que no se puede utilizar el objeto de aplicación en los "
"blueprints en el momento de la importación. Sin embargo, puede utilizarlo desde "
"una solicitud. ¿Cómo se accede a la aplicación con la configuración? Utiliza :"
"data:`~flask.current_app`::"

#: ../../patterns/appfactories.rst:53
msgid "Here we look up the name of a template in the config."
msgstr "Aquí buscamos el nombre de una plantilla en la configuración."

#: ../../patterns/appfactories.rst:56
msgid "Factories & Extensions"
msgstr "Fábricas y extensiones"

#: ../../patterns/appfactories.rst:58
msgid ""
"It's preferable to create your extensions and app factories so that the "
"extension object does not initially get bound to the application."
msgstr ""
"Es preferible crear tus extensiones y fábricas de aplicaciones de manera que el "
"objeto de la extensión no se vincule inicialmente a la aplicación."

#: ../../patterns/appfactories.rst:61
msgid ""
"Using `Flask-SQLAlchemy <https://flask-sqlalchemy.palletsprojects.com/>`_, as "
"an example, you should not do something along those lines::"
msgstr ""
"Usando `Flask-SQLAlchemy <https://flask-sqlalchemy.palletsprojects.com/>`_, "
"como ejemplo, no deberías hacer algo parecido a esto::"

#: ../../patterns/appfactories.rst:70
msgid "But, rather, in model.py (or equivalent)::"
msgstr "Pero, más bien, en model.py (o equivalente)::"

#: ../../patterns/appfactories.rst:74
msgid "and in your application.py (or equivalent)::"
msgstr "y en su aplicacion.py (o equivalente)::"

#: ../../patterns/appfactories.rst:83
msgid ""
"Using this design pattern, no application-specific state is stored on the "
"extension object, so one extension object can be used for multiple apps. For "
"more information about the design of extensions refer to :doc:`/extensiondev`."
msgstr ""
"Utilizando este patrón de diseño, no se almacena ningún estado específico de la "
"aplicación en el objeto de extensión, por lo que un objeto de extensión puede "
"ser utilizado para múltiples aplicaciones. Para más información sobre el diseño "
"de las extensiones, consulte :doc:`/extensiondev`."

#: ../../patterns/appfactories.rst:88
msgid "Using Applications"
msgstr "Uso de aplicaciones"

#: ../../patterns/appfactories.rst:90
msgid "To run such an application, you can use the :command:`flask` command:"
msgstr ""
"Para ejecutar una aplicación de este tipo, puede utilizar el comando :command:"
"`flask`:"

#: ../../patterns/appfactories.rst:94 ../../patterns/appfactories.rst:120
#: ../../patterns/packages.rst:64 ../../patterns/packages.rst:88
msgid "Bash"
msgstr ""

#: ../../patterns/appfactories.rst:101 ../../patterns/appfactories.rst:127
#: ../../patterns/packages.rst:70 ../../patterns/packages.rst:94
msgid "CMD"
msgstr ""

#: ../../patterns/appfactories.rst:108 ../../patterns/appfactories.rst:134
#: ../../patterns/packages.rst:76 ../../patterns/packages.rst:100
msgid "Powershell"
msgstr ""

#: ../../patterns/appfactories.rst:115
msgid ""
"Flask will automatically detect the factory (``create_app`` or ``make_app``) in "
"``myapp``. You can also pass arguments to the factory like this:"
msgstr ""
"Flask detectará automáticamente la fábrica (``create_app`` o ``make_app``) en "
"``miapp``. También puedes pasar argumentos a la fábrica así:"

#: ../../patterns/appfactories.rst:141
msgid ""
"Then the ``create_app`` factory in ``myapp`` is called with the string "
"``'dev'`` as the argument. See :doc:`/cli` for more detail."
msgstr ""
"Entonces se llama a la fábrica ``create_app`` en ``miapp`` con la cadena "
"``'dev'`` como argumento. Ver :doc:`/cli` para más detalles."

#: ../../patterns/appfactories.rst:145
msgid "Factory Improvements"
msgstr "Mejoras en la fábrica"

#: ../../patterns/appfactories.rst:147
msgid ""
"The factory function above is not very clever, but you can improve it. The "
"following changes are straightforward to implement:"
msgstr ""
"La función de fábrica anterior no es muy inteligente, pero se puede mejorar. "
"Los siguientes cambios son sencillos de implementar:"

#: ../../patterns/appfactories.rst:150
msgid ""
"Make it possible to pass in configuration values for unit tests so that you "
"don't have to create config files on the filesystem."
msgstr ""
"Hacer posible pasar valores de configuración para las pruebas unitarias para no "
"tener que crear archivos de configuración en el sistema de archivos."

#: ../../patterns/appfactories.rst:152
msgid ""
"Call a function from a blueprint when the application is setting up so that you "
"have a place to modify attributes of the application (like hooking in before/"
"after request handlers etc.)"
msgstr ""
"Llamar a una función desde un blueprint cuando la aplicación se está "
"configurando para tener un lugar donde modificar los atributos de la aplicación "
"(como enganchar los manejadores de peticiones antes/después, etc.)"

#: ../../patterns/appfactories.rst:155
msgid ""
"Add in WSGI middlewares when the application is being created if necessary."
msgstr ""
"Añadir middlewares WSGI cuando la aplicación se está creando si es necesario."

#: ../../patterns/caching.rst:2
msgid "Caching"
msgstr "Caché"

#: ../../patterns/caching.rst:4
msgid ""
"When your application runs slow, throw some caches in.  Well, at least it's the "
"easiest way to speed up things.  What does a cache do?  Say you have a function "
"that takes some time to complete but the results would still be good enough if "
"they were 5 minutes old.  So then the idea is that you actually put the result "
"of that calculation into a cache for some time."
msgstr ""
"Cuando tu aplicación se ejecuta lentamente, pon algo de caché. Al menos es la "
"forma más fácil de acelerar las cosas. ¿Qué hace una caché? Digamos que tienes "
"una función que tarda algo de tiempo en completarse pero los resultados "
"seguirían siendo lo suficientemente buenos si tuvieran 5 minutos de antigüedad. "
"Entonces la idea es que pongas el resultado de ese cálculo en una caché durante "
"algún tiempo."

#: ../../patterns/caching.rst:11
msgid ""
"Flask itself does not provide caching for you, but `Flask-Caching`_, an "
"extension for Flask does. Flask-Caching supports various backends, and it is "
"even possible to develop your own caching backend."
msgstr ""
"Flask por sí mismo no proporciona caché para usted, pero `Flask-Caching`_, una "
"extensión para Flask lo hace. Flask-Caching soporta varios backends, e incluso "
"es posible desarrollar tu propio backend de caché."

#: ../../patterns/celery.rst:2
msgid "Celery Background Tasks"
msgstr "Tareas de fondo de Celery"

#: ../../patterns/celery.rst:4
msgid ""
"If your application has a long running task, such as processing some uploaded "
"data or sending email, you don't want to wait for it to finish during a "
"request. Instead, use a task queue to send the necessary data to another "
"process that will run the task in the background while the request returns "
"immediately."
msgstr ""
"Si su aplicación tiene una tarea de larga duración, como el procesamiento de "
"algunos datos cargados o el envío de correo electrónico, no querrá esperar a "
"que termine durante una solicitud. En su lugar, utilice una cola de tareas para "
"enviar los datos necesarios a otro proceso que ejecutará la tarea en segundo "
"plano mientras la solicitud vuelve inmediatamente."

#: ../../patterns/celery.rst:10
msgid ""
"Celery is a powerful task queue that can be used for simple background tasks as "
"well as complex multi-stage programs and schedules. This guide will show you "
"how to configure Celery using Flask, but assumes you've already read the `First "
"Steps with Celery <https://celery.readthedocs.io/en/latest/getting-started/"
"first-steps-with-celery.html>`_ guide in the Celery documentation."
msgstr ""
"Celery es una poderosa cola de tareas que puede ser utilizada para tareas "
"simples en segundo plano, así como para programas complejos de varias etapas y "
"programaciones. Esta guía le mostrará cómo configurar Celery usando Flask, pero "
"asume que ya ha leído la guía `Primeros pasos con Celery <https://celery."
"readthedocs.io/en/latest/getting-started/first-steps-with-celery.html>`_ en la "
"documentación de Celery."

#: ../../patterns/celery.rst:17
msgid "Install"
msgstr "Instalar"

#: ../../patterns/celery.rst:19
msgid "Celery is a separate Python package. Install it from PyPI using pip::"
msgstr ""
"Celery es un paquete independiente de Python. Instálalo desde PyPI usando pip::"

#: ../../patterns/celery.rst:24
msgid "Configure"
msgstr "Configurar"

#: ../../patterns/celery.rst:26
msgid ""
"The first thing you need is a Celery instance, this is called the celery "
"application.  It serves the same purpose as the :class:`~flask.Flask` object in "
"Flask, just for Celery.  Since this instance is used as the entry-point for "
"everything you want to do in Celery, like creating tasks and managing workers, "
"it must be possible for other modules to import it."
msgstr ""
"Lo primero que necesitas es una instancia de Celery, esto se llama la "
"aplicación Celery. Sirve el mismo propósito que el objeto :class:`~flask.Flask` "
"en Flask, sólo que para Celery. Dado que esta instancia se utiliza como punto "
"de entrada para todo lo que quieres hacer en Celery, como la creación de tareas "
"y la gestión de los trabajadores, debe ser posible que otros módulos lo "
"importen."

#: ../../patterns/celery.rst:32
msgid ""
"For instance you can place this in a ``tasks`` module.  While you can use "
"Celery without any reconfiguration with Flask, it becomes a bit nicer by "
"subclassing tasks and adding support for Flask's application contexts and "
"hooking it up with the Flask configuration."
msgstr ""
"Por ejemplo, puedes colocar esto en un módulo ``tasks``. Aunque puedes usar "
"Celery sin ninguna reconfiguración con Flask, se vuelve un poco más agradable "
"subclasificando tasks y añadiendo soporte para los contextos de aplicación de "
"Flask y enganchándolo con la configuración de Flask."

#: ../../patterns/celery.rst:37
msgid "This is all that is necessary to properly integrate Celery with Flask::"
msgstr ""
"Esto es todo lo que se necesita para integrar adecuadamente Celery con Flask::"

#: ../../patterns/celery.rst:57
msgid ""
"The function creates a new Celery object, configures it with the broker from "
"the application config, updates the rest of the Celery config from the Flask "
"config and then creates a subclass of the task that wraps the task execution in "
"an application context."
msgstr ""
"La función crea un nuevo objeto Celery, lo configura con el broker desde la "
"configuración de la aplicación, actualiza el resto de la configuración de "
"Celery desde la configuración de Flask y luego crea una subclase de la tarea "
"que envuelve la ejecución de la tarea en un contexto de aplicación."

#: ../../patterns/celery.rst:63
msgid "An example task"
msgstr "Una tarea de ejemplo"

#: ../../patterns/celery.rst:65
msgid ""
"Let's write a task that adds two numbers together and returns the result. We "
"configure Celery's broker and backend to use Redis, create a ``celery`` "
"application using the factor from above, and then use it to define the task. ::"
msgstr ""
"Vamos a escribir una tarea que sume dos números y devuelva el resultado. "
"Configuramos el broker y el backend de Celery para usar Redis, creamos una "
"aplicación ``celery`` usando el factor de arriba, y luego lo usamos para "
"definir la tarea. ::"

#: ../../patterns/celery.rst:82
msgid "This task can now be called in the background::"
msgstr "Esta tarea puede llamarse ahora en segundo plano::"

#: ../../patterns/celery.rst:88
msgid "Run a worker"
msgstr "Ejecutar un trabajador"

#: ../../patterns/celery.rst:90
msgid ""
"If you jumped in and already executed the above code you will be disappointed "
"to learn that ``.wait()`` will never actually return. That's because you also "
"need to run a Celery worker to receive and execute the task. ::"
msgstr ""
"Si te has lanzado y ya has ejecutado el código anterior, te decepcionará saber "
"que ``.wait()`` nunca devolverá realmente. Esto se debe a que también es "
"necesario ejecutar un trabajador Celery para recibir y ejecutar la tarea ::"

#: ../../patterns/celery.rst:97
msgid ""
"The ``your_application`` string has to point to your application's package or "
"module that creates the ``celery`` object."
msgstr ""
"La cadena ``tu_aplicación`` tiene que apuntar al paquete o módulo de tu "
"aplicación que crea el objeto ``celery``."

#: ../../patterns/celery.rst:100
msgid ""
"Now that the worker is running, ``wait`` will return the result once the task "
"is finished."
msgstr ""
"Ahora que el trabajador se está ejecutando, ``wait`` devolverá el resultado una "
"vez que la tarea haya terminado."

#: ../../patterns/deferredcallbacks.rst:2
msgid "Deferred Request Callbacks"
msgstr "Callbacks en diferido"

#: ../../patterns/deferredcallbacks.rst:4
msgid ""
"One of the design principles of Flask is that response objects are created and "
"passed down a chain of potential callbacks that can modify them or replace "
"them. When the request handling starts, there is no response object yet. It is "
"created as necessary either by a view function or by some other component in "
"the system."
msgstr ""
"Uno de los principios de diseño de Flask es que los objetos de respuesta son "
"creados y pasados por una cadena de potenciales callbacks que pueden "
"modificarlos o reemplazarlos. Cuando se inicia la gestión de la solicitud, "
"todavía no hay un objeto de respuesta. Se crea según sea necesario por una "
"función de la vista o por algún otro componente del sistema."

#: ../../patterns/deferredcallbacks.rst:10
msgid ""
"What happens if you want to modify the response at a point where the response "
"does not exist yet?  A common example for that would be a :meth:`~flask.Flask."
"before_request` callback that wants to set a cookie on the response object."
msgstr ""
"¿Qué ocurre si se quiere modificar la respuesta en un punto en el que ésta aún "
"no existe?  Un ejemplo común para esto sería un callback :meth:`~flask.Flask."
"before_request` que quiere establecer una cookie en el objeto de respuesta."

#: ../../patterns/deferredcallbacks.rst:15
msgid ""
"One way is to avoid the situation. Very often that is possible. For instance "
"you can try to move that logic into a :meth:`~flask.Flask.after_request` "
"callback instead. However, sometimes moving code there makes it more "
"complicated or awkward to reason about."
msgstr ""
"Una forma es evitar la situación. Muy a menudo eso es posible. Por ejemplo, "
"puedes intentar mover esa lógica a un callback :meth:`~flask.Flask."
"after_request` en su lugar. Sin embargo, a veces mover el código allí lo hace "
"más complicado o incómodo de razonar."

#: ../../patterns/deferredcallbacks.rst:20
msgid ""
"As an alternative, you can use :func:`~flask.after_this_request` to register "
"callbacks that will execute after only the current request. This way you can "
"defer code execution from anywhere in the application, based on the current "
"request."
msgstr ""
"Como alternativa, puedes usar :func:`~flask.after_this_request` para registrar "
"callbacks que se ejecutarán sólo después de la petición actual. De esta manera "
"puedes diferir la ejecución de código desde cualquier parte de la aplicación, "
"basándote en la petición actual."

#: ../../patterns/deferredcallbacks.rst:25
msgid ""
"At any time during a request, we can register a function to be called at the "
"end of the request. For example you can remember the current language of the "
"user in a cookie in a :meth:`~flask.Flask.before_request` callback::"
msgstr ""
"En cualquier momento durante una petición, podemos registrar una función para "
"ser llamada al final de la petición. Por ejemplo puedes recordar el idioma "
"actual del usuario en una cookie en un callback :meth:`~flask.Flask."
"before_request`::"

#: ../../patterns/distribute.rst:2
msgid "Deploying with Setuptools"
msgstr "Despliegue con Setuptools"

#: ../../patterns/distribute.rst:4
msgid ""
"`Setuptools`_, is an extension library that is commonly used to distribute "
"Python libraries and extensions. It extends distutils, a basic module "
"installation system shipped with Python to also support various more complex "
"constructs that make larger applications easier to distribute:"
msgstr ""
"`Setuptools`_, es una biblioteca de extensión que se utiliza comúnmente para "
"distribuir bibliotecas y extensiones de Python. Extiende distutils, un sistema "
"básico de instalación de módulos incluido en Python, para soportar también "
"varias construcciones más complejas que hacen que las aplicaciones más grandes "
"sean más fáciles de distribuir:"

#: ../../patterns/distribute.rst:9
msgid ""
"**support for dependencies**: a library or application can declare a list of "
"other libraries it depends on which will be installed automatically for you."
msgstr ""
"**Soporte para dependencias**: Una librería o aplicación puede declarar una "
"lista de otras librerías de las que depende, que se instalarán automáticamente "
"por ti."

#: ../../patterns/distribute.rst:12
msgid ""
"**package registry**: setuptools registers your package with your Python "
"installation.  This makes it possible to query information provided by one "
"package from another package.  The best known feature of this system is the "
"entry point support which allows one package to declare an \"entry point\" that "
"another package can hook into to extend the other package."
msgstr ""
"**Registro de paquetes**: setuptools registra su paquete con su instalación de "
"Python. Esto permite consultar la información proporcionada por un paquete "
"desde otro paquete. La característica más conocida de este sistema es el "
"soporte de punto de entrada que permite a un paquete declarar un \"punto de "
"entrada\" al que otro paquete puede engancharse para extender el otro paquete."

#: ../../patterns/distribute.rst:18
msgid ""
"**installation manager**: :command:`pip` can install other libraries for you."
msgstr ""
"**Gestor de instalación**: :command:`pip` puede instalar otras bibliotecas por "
"ti."

#: ../../patterns/distribute.rst:20
msgid ""
"Flask itself, and all the libraries you can find on PyPI are distributed with "
"either setuptools or distutils."
msgstr ""
"El propio Flask y todas las bibliotecas que puedes encontrar en PyPI se "
"distribuyen con setuptools o distutils."

#: ../../patterns/distribute.rst:23
msgid ""
"In this case we assume your application is called :file:`yourapplication.py` "
"and you are not using a module, but a package. If you have not yet converted "
"your application into a package, head over to :doc:`packages` to see how this "
"can be done."
msgstr ""
"En este caso asumimos que tu aplicación se llama :file:`tuaplicacion.py` y que "
"no estás usando un módulo, sino un paquete. Si aún no has convertido tu "
"aplicación en un paquete, dirígete a :doc:`packages` para ver cómo hacerlo."

#: ../../patterns/distribute.rst:28
msgid ""
"A working deployment with setuptools is the first step into more complex and "
"more automated deployment scenarios.  If you want to fully automate the "
"process, also read the :doc:`fabric` chapter."
msgstr ""
"Un despliegue de trabajo con setuptools es el primer paso hacia escenarios de "
"despliegue más complejos y automatizados.  Si quieres automatizar completamente "
"el proceso, lee también el capítulo :doc:`fabric`."

#: ../../patterns/distribute.rst:33
msgid "Basic Setup Script"
msgstr "Script de configuración básica"

#: ../../patterns/distribute.rst:35
msgid ""
"Because you have Flask installed, you have setuptools available on your system. "
"Flask already depends upon setuptools."
msgstr ""
"Como tienes Flask instalado, tienes setuptools disponible en tu sistema. Flask "
"ya depende de setuptools."

#: ../../patterns/distribute.rst:38
msgid "Standard disclaimer applies: :ref:`use a virtualenv <install-create-env>`."
msgstr ""
"Se aplica la exención de responsabilidad estándar: :ref:`use a virtualenv "
"<install-create-env>`."

#: ../../patterns/distribute.rst:41
msgid ""
"Your setup code always goes into a file named :file:`setup.py` next to your "
"application.  The name of the file is only convention, but because everybody "
"will look for a file with that name, you better not change it."
msgstr ""
"Su código de instalación siempre va en un archivo llamado :file:`setup.py` "
"junto a su aplicación.  El nombre del archivo es sólo una convención, pero como "
"todo el mundo buscará un archivo con ese nombre, es mejor que no lo cambies."

#: ../../patterns/distribute.rst:45
msgid "A basic :file:`setup.py` file for a Flask application looks like this::"
msgstr ""
"Un archivo básico :file:`setup.py` para una aplicación Flask tiene el siguiente "
"aspecto::"

#: ../../patterns/distribute.rst:59
msgid ""
"Please keep in mind that you have to list subpackages explicitly.  If you want "
"setuptools to lookup the packages for you automatically, you can use the "
"``find_packages`` function::"
msgstr ""
"Tenga en cuenta que tiene que listar los subpaquetes explícitamente.  Si quiere "
"que setuptools busque los paquetes automáticamente, puede utilizar la función "
"``find_packages``::"

#: ../../patterns/distribute.rst:70
msgid ""
"Most parameters to the ``setup`` function should be self explanatory, "
"``include_package_data`` and ``zip_safe`` might not be. "
"``include_package_data`` tells setuptools to look for a :file:`MANIFEST.in` "
"file and install all the entries that match as package data.  We will use this "
"to distribute the static files and templates along with the Python module (see :"
"ref:`distributing-resources`).  The ``zip_safe`` flag can be used to force or "
"prevent zip Archive creation.  In general you probably don't want your packages "
"to be installed as zip files because some tools do not support them and they "
"make debugging a lot harder."
msgstr ""
"La mayoría de los parámetros de la función ``setup`` deberían ser "
"autoexplicativos, ``include_package_data`` y ``zip_safe`` podrían no serlo. "
"``include_package_data`` le dice a setuptools que busque un archivo :file:"
"`MANIFEST.in` e instale todas las entradas que coincidan como datos del "
"paquete.  Usaremos esto para distribuir los archivos estáticos y las plantillas "
"junto con el módulo de Python (ver :ref:`distribuyendo-recursos`).  La bandera "
"``zip_safe`` puede utilizarse para forzar o evitar la creación de archivos "
"zip.  En general, probablemente no quieras que tus paquetes se instalen como "
"archivos zip porque algunas herramientas no los soportan y dificultan mucho la "
"depuración."

#: ../../patterns/distribute.rst:82
msgid "Tagging Builds"
msgstr "Etiquetado de Builds"

#: ../../patterns/distribute.rst:84
msgid ""
"It is useful to distinguish between release and development builds. Add a :file:"
"`setup.cfg` file to configure these options. ::"
msgstr ""
"Es útil para distinguir entre las compilaciones de lanzamiento y las de "
"desarrollo. Añade un archivo :file:`setup.cfg` para configurar estas "
"opciones. ::"

#: ../../patterns/distribute.rst:94
msgid ""
"Running ``python setup.py sdist`` will create a development package with \".dev"
"\" and the current date appended: ``flaskr-1.0.dev20160314.tar.gz``. Running "
"``python setup.py release sdist`` will create a release package with only the "
"version: ``flaskr-1.0.tar.gz``."
msgstr ""
"Al ejecutar ``python setup.py sdist`` se creará un paquete de desarrollo con \"."
"dev\" y la fecha actual añadida: ``flaskr-1.0.dev20160314.tar.gz``. Ejecutando "
"``python setup.py release sdist`` se creará un paquete de lanzamiento con sólo "
"la versión: ``flaskr-1.0.tar.gz``."

#: ../../patterns/distribute.rst:103
msgid "Distributing Resources"
msgstr "Distribución de recursos"

#: ../../patterns/distribute.rst:105
msgid ""
"If you try to install the package you just created, you will notice that "
"folders like :file:`static` or :file:`templates` are not installed for you.  "
"The reason for this is that setuptools does not know which files to add for "
"you.  What you should do, is to create a :file:`MANIFEST.in` file next to your :"
"file:`setup.py` file.  This file lists all the files that should be added to "
"your tarball::"
msgstr ""
"Si intenta instalar el paquete que acaba de crear, se dará cuenta de que "
"carpetas como :file:`static` o :file:`templates` no se instalan por usted. La "
"razón de esto es que setuptools no sabe qué archivos añadir por usted. Lo que "
"debe hacer, es crear un archivo :file:`MANIFEST.in` junto a su archivo :file:"
"`setup.py`. Este archivo lista todos los archivos que deben ser añadidos a su "
"tarball::"

#: ../../patterns/distribute.rst:115
msgid ""
"Don't forget that even if you enlist them in your :file:`MANIFEST.in` file, "
"they won't be installed for you unless you set the `include_package_data` "
"parameter of the ``setup`` function to ``True``!"
msgstr ""
"¡No olvide que, aunque los incluya en su archivo :file:`MANIFEST.in`, no se "
"instalarán si no establece el parámetro `include_package_data` de la función "
"``setup`` a ``True``!"

#: ../../patterns/distribute.rst:121
msgid "Declaring Dependencies"
msgstr "Declarar las dependencias"

#: ../../patterns/distribute.rst:123
msgid ""
"Dependencies are declared in the ``install_requires`` parameter as a list. Each "
"item in that list is the name of a package that should be pulled from PyPI on "
"installation.  By default it will always use the most recent version, but you "
"can also provide minimum and maximum version requirements.  Here some examples::"
msgstr ""
"Las dependencias se declaran en el parámetro ``install_requires`` como una "
"lista. Cada elemento de esa lista es el nombre de un paquete que debe ser "
"extraído de PyPI en la instalación. Por defecto, siempre se utilizará la "
"versión más reciente, pero también se pueden proporcionar requisitos de versión "
"mínimos y máximos. Aquí algunos ejemplos::"

#: ../../patterns/distribute.rst:135
msgid ""
"As mentioned earlier, dependencies are pulled from PyPI.  What if you want to "
"depend on a package that cannot be found on PyPI and won't be because it is an "
"internal package you don't want to share with anyone? Just do it as if there "
"was a PyPI entry and provide a list of alternative locations where setuptools "
"should look for tarballs::"
msgstr ""
"Como se mencionó anteriormente, las dependencias se extraen de PyPI. ¿Qué pasa "
"si quieres depender de un paquete que no se puede encontrar en PyPI y no se "
"encontrará porque es un paquete interno que no quieres compartir con nadie? "
"Simplemente hazlo como si hubiera una entrada en PyPI y proporciona una lista "
"de ubicaciones alternativas donde setuptools debería buscar los tarballs::"

#: ../../patterns/distribute.rst:143
msgid ""
"Make sure that page has a directory listing and the links on the page are "
"pointing to the actual tarballs with their correct filenames as this is how "
"setuptools will find the files.  If you have an internal company server that "
"contains the packages, provide the URL to that server."
msgstr ""
"Asegúrese de que esa página tiene un listado de directorios y que los enlaces "
"de la página apuntan a los verdaderos tarballs con sus nombres de archivo "
"correctos, ya que así es como setuptools encontrará los archivos. Si tiene un "
"servidor interno de la empresa que contiene los paquetes, proporcione la URL de "
"ese servidor."

#: ../../patterns/distribute.rst:150
msgid "Installing / Developing"
msgstr "Instalación / Desarrollo"

#: ../../patterns/distribute.rst:152
msgid ""
"To install your application (ideally into a virtualenv) just run the :file:"
"`setup.py` script with the ``install`` parameter.  It will install your "
"application into the virtualenv's site-packages folder and also download and "
"install all dependencies::"
msgstr ""
"Para instalar tu aplicación (idealmente en un virtualenv) simplemente ejecuta "
"el script :file:`setup.py` con el parámetro ``install``.  Instalará tu "
"aplicación en la carpeta site-packages del virtualenv y también descargará e "
"instalará todas las dependencias::"

#: ../../patterns/distribute.rst:159
msgid ""
"If you are developing on the package and also want the requirements to be "
"installed, you can use the ``develop`` command instead::"
msgstr ""
"Si está desarrollando en el paquete y también quiere que se instalen los "
"requisitos, puede utilizar el comando ``develop`` en su lugar::"

#: ../../patterns/distribute.rst:164
msgid ""
"This has the advantage of just installing a link to the site-packages folder "
"instead of copying the data over.  You can then continue to work on the code "
"without having to run ``install`` again after each change."
msgstr ""
"Esto tiene la ventaja de que sólo se instala un enlace a la carpeta de paquetes "
"del sitio en lugar de copiar los datos.  De este modo, puede continuar "
"trabajando en el código sin tener que ejecutar ``install`` de nuevo después de "
"cada cambio."

#: ../../patterns/fabric.rst:2
msgid "Deploying with Fabric"
msgstr "Despliegue con Fabric"

#: ../../patterns/fabric.rst:4
msgid ""
"`Fabric`_ is a tool for Python similar to Makefiles but with the ability to "
"execute commands on a remote server.  In combination with a properly set up "
"Python package (:doc:`packages`) and a good concept for configurations (:doc:`/"
"config`) it is very easy to deploy Flask applications to external servers."
msgstr ""
"`Fabric`_ es una herramienta para Python similar a Makefiles pero con la "
"capacidad de ejecutar comandos en un servidor remoto.  En combinación con un "
"paquete Python correctamente configurado (:doc:`packages`) y un buen concepto "
"de configuraciones (:doc:`/config`) es muy fácil desplegar aplicaciones Flask "
"en servidores externos."

#: ../../patterns/fabric.rst:10
msgid ""
"Before we get started, here a quick checklist of things we have to ensure "
"upfront:"
msgstr ""
"Antes de empezar, aquí una lista rápida de cosas que tenemos que asegurar por "
"adelantado:"

#: ../../patterns/fabric.rst:13
msgid ""
"Fabric 1.0 has to be installed locally.  This tutorial assumes the latest "
"version of Fabric."
msgstr ""
"Fabric 1.0 tiene que ser instalado localmente. Este tutorial asume la última "
"versión de Fabric."

#: ../../patterns/fabric.rst:15
msgid ""
"The application already has to be a package and requires a working :file:`setup."
"py` file (:doc:`distribute`)."
msgstr ""
"La aplicación ya tiene que ser un paquete y requiere un archivo :file:`setup."
"py` que funcione (:doc:`distribute`)."

#: ../../patterns/fabric.rst:17
msgid ""
"In the following example we are using `mod_wsgi` for the remote servers.  You "
"can of course use your own favourite server there, but for this example we "
"chose Apache + `mod_wsgi` because it's very easy to setup and has a simple way "
"to reload applications without root access."
msgstr ""
"En el siguiente ejemplo estamos usando `mod_wsgi` para los servidores remotos. "
"Por supuesto, puedes usar tu propio servidor favorito, pero para este ejemplo "
"elegimos Apache + `mod_wsgi` porque es muy fácil de configurar y tiene una "
"forma sencilla de recargar las aplicaciones sin acceso de root."

#: ../../patterns/fabric.rst:24
msgid "Creating the first Fabfile"
msgstr "Creación del primer Fabfile"

#: ../../patterns/fabric.rst:26
msgid ""
"A fabfile is what controls what Fabric executes.  It is named :file:`fabfile."
"py` and executed by the `fab` command.  All the functions defined in that file "
"will show up as `fab` subcommands.  They are executed on one or more hosts.  "
"These hosts can be defined either in the fabfile or on the command line.  In "
"this case we will add them to the fabfile."
msgstr ""
"Un fabfile es lo que controla lo que ejecuta Fabric. Se llama :file:`fabfile."
"py` y es ejecutado por el comando `fab`. Todas las funciones definidas en ese "
"fichero aparecerán como subcomandos `fab`. Se ejecutan en uno o más hosts. "
"Estos hosts pueden ser definidos tanto en el fabfile como en la línea de "
"comandos. En este caso los añadiremos al fabfile."

#: ../../patterns/fabric.rst:32
msgid ""
"This is a basic first example that has the ability to upload the current source "
"code to the server and install it into a pre-existing virtual environment::"
msgstr ""
"Este es un primer ejemplo básico que tiene la capacidad de subir el código "
"fuente actual al servidor e instalarlo en un entorno virtual preexistente::"

#: ../../patterns/fabric.rst:65
msgid "Running Fabfiles"
msgstr "Ejecución de Fabfiles"

#: ../../patterns/fabric.rst:67
msgid ""
"Now how do you execute that fabfile?  You use the `fab` command.  To deploy the "
"current version of the code on the remote server you would use this command::"
msgstr ""
"Ahora, ¿cómo se ejecuta ese fabfile?  Utiliza el comando `fab`.  Para desplegar "
"la versión actual del código en el servidor remoto usarías este comando::"

#: ../../patterns/fabric.rst:73
msgid ""
"However this requires that our server already has the :file:`/var/www/"
"yourapplication` folder created and :file:`/var/www/yourapplication/env` to be "
"a virtual environment.  Furthermore are we not creating the configuration or ``."
"wsgi`` file on the server.  So how do we bootstrap a new server into our "
"infrastructure?"
msgstr ""
"Sin embargo esto requiere que nuestro servidor ya tenga la carpeta :file:`/var/"
"www/tuaplicacion` creada y :file:`/var/www/tuaplicacion/env` para ser un "
"entorno virtual.  Además no estamos creando el archivo de configuración o ``."
"wsgi`` en el servidor.  Entonces, ¿como arrancamos un nuevo servidor en nuestra "
"infraestructura?"

#: ../../patterns/fabric.rst:79
msgid ""
"This now depends on the number of servers we want to set up.  If we just have "
"one application server (which the majority of applications will have), creating "
"a command in the fabfile for this is overkill.  But obviously you can do that.  "
"In that case you would probably call it `setup` or `bootstrap` and then pass "
"the servername explicitly on the command line::"
msgstr ""
"Esto depende ahora del número de servidores que queramos configurar. Si sólo "
"tenemos un servidor de aplicaciones (que es lo que tendrán la mayoría de las "
"aplicaciones), crear un comando en el fabfile para esto es excesivo. Pero "
"obviamente se puede hacer. En ese caso probablemente lo llamarías `setup` o "
"`bootstrap` y luego pasarías el nombre del servidor explícitamente en la línea "
"de comandos::"

#: ../../patterns/fabric.rst:88
msgid "To setup a new server you would roughly do these steps:"
msgstr "Para configurar un nuevo servidor, se deben seguir los siguientes pasos:"

#: ../../patterns/fabric.rst:90
msgid "Create the directory structure in :file:`/var/www`::"
msgstr "Cree la estructura de directorios en :file:`/var/www`::"

#: ../../patterns/fabric.rst:96
msgid ""
"Upload a new :file:`application.wsgi` file to the server and the configuration "
"file for the application (eg: :file:`application.cfg`)"
msgstr ""
"Suba un nuevo archivo :file:`aplicacion.wsgi` al servidor y el archivo de "
"configuración de la aplicación (por ejemplo: :file:`aplicacion.cfg`)"

#: ../../patterns/fabric.rst:99
msgid ""
"Create a new Apache config for ``yourapplication`` and activate it. Make sure "
"to activate watching for changes of the ``.wsgi`` file so that we can "
"automatically reload the application by touching it. See :doc:`/deploying/"
"mod_wsgi`."
msgstr ""
"Crea una nueva configuración de Apache para ``tuaplicacion`` y actívala. "
"Asegúrate de activar la vigilancia de los cambios del archivo ``.wsgi`` para "
"que podamos recargar automáticamente la aplicación al tocarlo. Ver :doc:`/"
"deploying/mod_wsgi`."

#: ../../patterns/fabric.rst:104
msgid ""
"So now the question is, where do the :file:`application.wsgi` and :file:"
"`application.cfg` files come from?"
msgstr ""
"Así que ahora la pregunta es, ¿de dónde vienen los archivos :file:`aplicacion."
"wsgi` y :file:`aplicacion.cfg`?"

#: ../../patterns/fabric.rst:108
msgid "The WSGI File"
msgstr "El archivo WSGI"

#: ../../patterns/fabric.rst:110
msgid ""
"The WSGI file has to import the application and also to set an environment "
"variable so that the application knows where to look for the config.  This is a "
"short example that does exactly that::"
msgstr ""
"El archivo WSGI tiene que importar la aplicación y también establecer una "
"variable de entorno para que la aplicación sepa dónde buscar la configuración.  "
"Este es un breve ejemplo que hace exactamente eso::"

#: ../../patterns/fabric.rst:118
msgid ""
"The application itself then has to initialize itself like this to look for the "
"config at that environment variable::"
msgstr ""
"La propia aplicación tiene que inicializarse así para buscar la configuración "
"en esa variable de entorno::"

#: ../../patterns/fabric.rst:125
msgid ""
"This approach is explained in detail in the :doc:`/config` section of the "
"documentation."
msgstr ""
"Este enfoque se explica en detalle en la sección :doc:`/config` de la "
"documentación."

#: ../../patterns/fabric.rst:129
msgid "The Configuration File"
msgstr "El archivo de configuración"

#: ../../patterns/fabric.rst:131
msgid ""
"Now as mentioned above, the application will find the correct configuration "
"file by looking up the ``YOURAPPLICATION_CONFIG`` environment variable.  So we "
"have to put the configuration in a place where the application will able to "
"find it.  Configuration files have the unfriendly quality of being different on "
"all computers, so you do not version them usually."
msgstr ""
"Ahora, como se mencionó anteriormente, la aplicación encontrará el archivo de "
"configuración correcto buscando la variable de entorno "
"``tuaplicacion_CONFIG``.  Así que tenemos que poner la configuración en un "
"lugar donde la aplicación sea capaz de encontrarla.  Los ficheros de "
"configuración tienen la antipática cualidad de ser diferentes en todos los "
"ordenadores, por lo que no se suelen versionar."

#: ../../patterns/fabric.rst:138
msgid ""
"A popular approach is to store configuration files for different servers in a "
"separate version control repository and check them out on all servers.  Then "
"symlink the file that is active for the server into the location where it's "
"expected (eg: :file:`/var/www/yourapplication`)."
msgstr ""
"Un enfoque popular es almacenar los archivos de configuración para diferentes "
"servidores en un repositorio de control de versiones separado y comprobarlos en "
"todos los servidores.  Entonces se hace un enlace simbólico al archivo que está "
"activo para el servidor en la ubicación donde se espera (por ejemplo: :file:`/"
"var/www/tuaplicacion`)."

#: ../../patterns/fabric.rst:143
msgid ""
"Either way, in our case here we only expect one or two servers and we can "
"upload them ahead of time by hand."
msgstr ""
"De cualquier forma, en nuestro caso sólo esperamos uno o dos servidores y "
"podemos subirlos antes a mano."

#: ../../patterns/fabric.rst:148
msgid "First Deployment"
msgstr "Primer despliegue"

#: ../../patterns/fabric.rst:150
msgid ""
"Now we can do our first deployment.  We have set up the servers so that they "
"have their virtual environments and activated apache configs.  Now we can pack "
"up the application and deploy it::"
msgstr ""
"Ahora podemos hacer nuestro primer despliegue.  Hemos configurado los "
"servidores para que tengan sus entornos virtuales y activado las "
"configuraciones de apache.  Ahora podemos empaquetar la aplicación y "
"desplegarla::"

#: ../../patterns/fabric.rst:156
msgid ""
"Fabric will now connect to all servers and run the commands as written down in "
"the fabfile.  First it will execute pack so that we have our tarball ready and "
"then it will execute deploy and upload the source code to all servers and "
"install it there.  Thanks to the :file:`setup.py` file we will automatically "
"pull in the required libraries into our virtual environment."
msgstr ""
"Fabric se conectará ahora a todos los servidores y ejecutará los comandos tal y "
"como están escritos en el fabfile. Primero ejecutará pack para que tengamos "
"nuestro tarball listo y luego ejecutará deploy y subirá el código fuente a "
"todos los servidores y lo instalará allí. Gracias al archivo :file:`setup.py` "
"automáticamente se incorporarán las librerías necesarias a nuestro entorno "
"virtual."

#: ../../patterns/fabric.rst:164
msgid "Next Steps"
msgstr "Próximos pasos"

#: ../../patterns/fabric.rst:166
msgid ""
"From that point onwards there is so much that can be done to make deployment "
"actually fun:"
msgstr ""
"A partir de ahí, hay muchas cosas que se pueden hacer para que la implantación "
"sea realmente divertida:"

#: ../../patterns/fabric.rst:169
msgid ""
"Create a `bootstrap` command that initializes new servers.  It could initialize "
"a new virtual environment, setup apache appropriately etc."
msgstr ""
"Crear un comando `bootstrap` que inicialice los nuevos servidores.  Podría "
"inicializar un nuevo entorno virtual, configurar apache adecuadamente, etc."

#: ../../patterns/fabric.rst:171
msgid ""
"Put configuration files into a separate version control repository and symlink "
"the active configs into place."
msgstr ""
"Poner los archivos de configuración en un repositorio de control de versiones "
"separado y hacer un enlace simbólico a las configuraciones activas en su lugar."

#: ../../patterns/fabric.rst:173
msgid ""
"You could also put your application code into a repository and check out the "
"latest version on the server and then install.  That way you can also easily go "
"back to older versions."
msgstr ""
"También podría poner el código de su aplicación en un repositorio y comprobar "
"la última versión en el servidor y luego instalar. De esta manera también "
"puedes volver fácilmente a versiones anteriores."

#: ../../patterns/fabric.rst:176
msgid ""
"hook in testing functionality so that you can deploy to an external server and "
"run the test suite."
msgstr ""
"enganche en la funcionalidad de pruebas para que pueda desplegar a un servidor "
"externo y ejecutar el conjunto de pruebas."

#: ../../patterns/fabric.rst:179
msgid ""
"Working with Fabric is fun and you will notice that it's quite magical to type "
"``fab deploy`` and see your application being deployed automatically to one or "
"more remote servers."
msgstr ""
"Trabajar con Fabric es divertido y te darás cuenta de que es bastante mágico "
"escribir ``fab deploy`` y ver que tu aplicación se despliega automáticamente en "
"uno o más servidores remotos."

#: ../../patterns/favicon.rst:2
msgid "Adding a favicon"
msgstr "Añadir un favicon"

#: ../../patterns/favicon.rst:4
msgid ""
"A \"favicon\" is an icon used by browsers for tabs and bookmarks. This helps to "
"distinguish your website and to give it a unique brand."
msgstr ""
"Un \"favicon\" es un icono utilizado por los navegadores para las pestañas y "
"los marcadores. Esto ayuda a distinguir su sitio web y a darle una marca única."

#: ../../patterns/favicon.rst:7
msgid ""
"A common question is how to add a favicon to a Flask application. First, of "
"course, you need an icon. It should be 16 × 16 pixels and in the ICO file "
"format. This is not a requirement but a de-facto standard supported by all "
"relevant browsers. Put the icon in your static directory as :file:`favicon.ico`."
msgstr ""
"Una pregunta común es cómo añadir un favicon a una aplicación Flask. Primero, "
"por supuesto, necesitas un icono. Debe tener 16 × 16 píxeles y estar en el "
"formato de archivo ICO. Esto no es un requisito, sino un estándar de facto "
"soportado por todos los navegadores relevantes. Pon el icono en tu directorio "
"estático como :file:`favicon.ico`."

#: ../../patterns/favicon.rst:13
msgid ""
"Now, to get browsers to find your icon, the correct way is to add a link tag in "
"your HTML. So, for example:"
msgstr ""
"Ahora, para que los navegadores encuentren tu icono, la forma correcta es "
"añadir una etiqueta de enlace en tu HTML. Así, por ejemplo:"

#: ../../patterns/favicon.rst:20
msgid ""
"That's all you need for most browsers, however some really old ones do not "
"support this standard. The old de-facto standard is to serve this file, with "
"this name, at the website root. If your application is not mounted at the root "
"path of the domain you either need to configure the web server to serve the "
"icon at the root or if you can't do that you're out of luck. If however your "
"application is the root you can simply route a redirect::"
msgstr ""
"Eso es todo lo que se necesita para la mayoría de los navegadores, sin embargo "
"algunos muy antiguos no soportan este estándar. El antiguo estándar de facto es "
"servir este archivo, con este nombre, en la raíz del sitio web. Si tu "
"aplicación no está montada en la ruta raíz del dominio tienes que configurar el "
"servidor web para que sirva el icono en la raíz o si no puedes hacerlo no "
"tienes suerte. Sin embargo, si su aplicación es la raíz puede simplemente "
"dirigir una redirección::"

#: ../../patterns/favicon.rst:30
msgid ""
"If you want to save the extra redirect request you can also write a view using :"
"func:`~flask.send_from_directory`::"
msgstr ""
"Si quieres ahorrarte la petición de redirección extra también puedes escribir "
"una vista usando :func:`~flask.send_from_directory`::"

#: ../../patterns/favicon.rst:41
msgid ""
"We can leave out the explicit mimetype and it will be guessed, but we may as "
"well specify it to avoid the extra guessing, as it will always be the same."
msgstr ""
"Podemos omitir el mimetype explícito y se adivinará, pero también podemos "
"especificarlo para evitar la adivinación extra, ya que siempre será el mismo."

#: ../../patterns/favicon.rst:45
msgid ""
"The above will serve the icon via your application and if possible it's better "
"to configure your dedicated web server to serve it; refer to the web server's "
"documentation."
msgstr ""
"Lo anterior servirá el icono a través de su aplicación y si es posible es mejor "
"configurar su servidor web dedicado para servirlo; consulte la documentación "
"del servidor web."

#: ../../patterns/favicon.rst:50
msgid "See also"
msgstr "Véase también"

#: ../../patterns/favicon.rst:52
msgid ""
"The `Favicon <https://en.wikipedia.org/wiki/Favicon>`_ article on Wikipedia"
msgstr ""
"* El articulo de `Favicon <https://en.wikipedia.org/wiki/Favicon>`_ en Wikipedia"

#: ../../patterns/fileuploads.rst:2
msgid "Uploading Files"
msgstr "Carga de archivos"

#: ../../patterns/fileuploads.rst:4
msgid ""
"Ah yes, the good old problem of file uploads.  The basic idea of file uploads "
"is actually quite simple.  It basically works like this:"
msgstr ""
"Ah, sí, el viejo problema de la subida de archivos.  La idea básica de la "
"subida de archivos es en realidad bastante simple.  Básicamente funciona así:"

#: ../../patterns/fileuploads.rst:7
msgid ""
"A ``<form>`` tag is marked with ``enctype=multipart/form-data`` and an ``<input "
"type=file>`` is placed in that form."
msgstr ""
"Una etiqueta ``<form>`` se marca con ``enctype=multipart/form-data`` y se "
"coloca un ``<input type=file>`` en ese formulario."

#: ../../patterns/fileuploads.rst:9
msgid ""
"The application accesses the file from the :attr:`~flask.request.files` "
"dictionary on the request object."
msgstr ""
"La aplicación accede al archivo desde el diccionario :attr:`~flask.request."
"files` del objeto de la petición."

#: ../../patterns/fileuploads.rst:11
msgid ""
"use the :meth:`~werkzeug.datastructures.FileStorage.save` method of the file to "
"save the file permanently somewhere on the filesystem."
msgstr ""
"utiliza el método :meth:`~werkzeug.datastructures.FileStorage.save` del archivo "
"para guardar el archivo de forma permanente en algún lugar del sistema de "
"archivos."

#: ../../patterns/fileuploads.rst:15
msgid "A Gentle Introduction"
msgstr "Una gentil introducción"

#: ../../patterns/fileuploads.rst:17
msgid ""
"Let's start with a very basic application that uploads a file to a specific "
"upload folder and displays a file to the user.  Let's look at the bootstrapping "
"code for our application::"
msgstr ""
"Comencemos con una aplicación muy básica que sube un archivo a una carpeta de "
"subida específica y muestra un archivo al usuario.  Veamos el código de "
"arranque de nuestra aplicación::"

#: ../../patterns/fileuploads.rst:31
msgid ""
"So first we need a couple of imports.  Most should be straightforward, the :"
"func:`werkzeug.secure_filename` is explained a little bit later.  The "
"``UPLOAD_FOLDER`` is where we will store the uploaded files and the "
"``ALLOWED_EXTENSIONS`` is the set of allowed file extensions."
msgstr ""
"Así que primero necesitamos un par de importaciones.  La mayoría deberían ser "
"sencillas, la :func:`werkzeug.secure_filename` se explica un poco más tarde.  "
"El ``UPLOAD_FOLDER`` es donde almacenaremos los archivos subidos y el "
"``ALLOWED_EXTENSIONS`` es el conjunto de extensiones de archivo permitidas."

#: ../../patterns/fileuploads.rst:36
msgid ""
"Why do we limit the extensions that are allowed?  You probably don't want your "
"users to be able to upload everything there if the server is directly sending "
"out the data to the client.  That way you can make sure that users are not able "
"to upload HTML files that would cause XSS problems (see :ref:`security-xss`).  "
"Also make sure to disallow ``.php`` files if the server executes them, but who "
"has PHP installed on their server, right?  :)"
msgstr ""
"¿Por qué limitamos las extensiones permitidas? Probablemente no quiera que sus "
"usuarios puedan subir todo allí si el servidor está enviando directamente los "
"datos al cliente. De este modo, puede asegurarse de que los usuarios no puedan "
"subir archivos HTML que puedan causar problemas de XSS (véase :ref:`security-"
"xss`). También asegúrese de no permitir archivos ``.php`` si el servidor los "
"ejecuta, pero ¿quién tiene PHP instalado en su servidor, verdad? :)"

#: ../../patterns/fileuploads.rst:43
msgid ""
"Next the functions that check if an extension is valid and that uploads the "
"file and redirects the user to the URL for the uploaded file::"
msgstr ""
"A continuación las funciones que comprueban si una extensión es válida y que "
"suben el archivo y redirigen al usuario a la URL del archivo subido::"

#: ../../patterns/fileuploads.rst:77
msgid ""
"So what does that :func:`~werkzeug.utils.secure_filename` function actually do? "
"Now the problem is that there is that principle called \"never trust user input"
"\".  This is also true for the filename of an uploaded file.  All submitted "
"form data can be forged, and filenames can be dangerous.  For the moment just "
"remember: always use that function to secure a filename before storing it "
"directly on the filesystem."
msgstr ""
"Entonces, ¿qué hace realmente esa función :func:`~werkzeug.utils."
"secure_filename`? Ahora el problema es que existe ese principio llamado \"nunca "
"confíes en la entrada del usuario\". Esto también es cierto para el nombre de "
"un archivo subido. Todos los datos de los formularios enviados pueden ser "
"falsificados, y los nombres de los archivos pueden ser peligrosos. Por el "
"momento sólo recuerda: utiliza siempre esa función para asegurar un nombre de "
"archivo antes de almacenarlo directamente en el sistema de archivos."

#: ../../patterns/fileuploads.rst:84
msgid "Information for the Pros"
msgstr "Información para los profesionales"

#: ../../patterns/fileuploads.rst:86
msgid ""
"So you're interested in what that :func:`~werkzeug.utils.secure_filename` "
"function does and what the problem is if you're not using it?  So just imagine "
"someone would send the following information as `filename` to your application::"
msgstr ""
"¿Así que te interesa saber qué hace esa función :func:`~werkzeug.utils."
"secure_filename` y cuál es el problema si no la usas?  Pues imagina que alguien "
"envía la siguiente información como `filename` a tu aplicación::"

#: ../../patterns/fileuploads.rst:93
msgid ""
"Assuming the number of ``../`` is correct and you would join this with the "
"``UPLOAD_FOLDER`` the user might have the ability to modify a file on the "
"server's filesystem he or she should not modify.  This does require some "
"knowledge about how the application looks like, but trust me, hackers are "
"patient :)"
msgstr ""
"Asumiendo que el número de ``../`` es correcto y que unirías esto con el "
"``UPLOAD_FOLDER`` el usuario podría tener la capacidad de modificar un archivo "
"en el sistema de archivos del servidor que no debería modificar.  Esto requiere "
"un poco de conocimiento sobre el aspecto de la aplicación, pero créeme, los "
"hackers son pacientes :)"

#: ../../patterns/fileuploads.rst:99
msgid "Now let's look how that function works:"
msgstr "Ahora veamos cómo funciona esa función:"

#: ../../patterns/fileuploads.rst:104
msgid ""
"We want to be able to serve the uploaded files so they can be downloaded by "
"users. We'll define a ``download_file`` view to serve files in the upload "
"folder by name. ``url_for(\"download_file\", name=name)`` generates download "
"URLs."
msgstr ""
"Queremos ser capaces de servir los archivos subidos para que puedan ser "
"descargados por los usuarios. Definiremos una vista ``download_file`` para "
"servir los archivos de la carpeta de subida por su nombre. "
"``url_for(\"download_file\", name=name)`` genera URLs de descarga."

#: ../../patterns/fileuploads.rst:117
msgid ""
"If you're using middleware or the HTTP server to serve files, you can register "
"the ``download_file`` endpoint as ``build_only`` so ``url_for`` will work "
"without a view function."
msgstr ""
"Si estás utilizando middleware o el servidor HTTP para servir archivos, puedes "
"registrar el endpoint ``download_file`` como ``build_only`` para que "
"``url_for`` funcione sin una función de vista."

#: ../../patterns/fileuploads.rst:129
msgid "Improving Uploads"
msgstr "Mejora de las cargas"

#: ../../patterns/fileuploads.rst:133
msgid ""
"So how exactly does Flask handle uploads?  Well it will store them in the "
"webserver's memory if the files are reasonably small, otherwise in a temporary "
"location (as returned by :func:`tempfile.gettempdir`).  But how do you specify "
"the maximum file size after which an upload is aborted?  By default Flask will "
"happily accept file uploads with an unlimited amount of memory, but you can "
"limit that by setting the ``MAX_CONTENT_LENGTH`` config key::"
msgstr ""
"¿Cómo gestiona Flask las subidas de archivos? Bueno, los almacenará en la "
"memoria del servidor web si los archivos son razonablemente pequeños, de lo "
"contrario en una ubicación temporal (como se devuelve con :func:`tempfile."
"gettempdir`). ¿Pero cómo se especifica el tamaño máximo de los archivos después "
"del cual se aborta la carga? Por defecto, Flask aceptará sin problemas subidas "
"de archivos con una cantidad ilimitada de memoria, pero se puede limitar "
"estableciendo la clave de configuración ``MAX_CONTENT_LENGTH``:"

#: ../../patterns/fileuploads.rst:146
msgid ""
"The code above will limit the maximum allowed payload to 16 megabytes. If a "
"larger file is transmitted, Flask will raise a :exc:`~werkzeug.exceptions."
"RequestEntityTooLarge` exception."
msgstr ""
"El código anterior limitará la carga útil máxima permitida a 16 megabytes. Si "
"se transmite un archivo mayor, Flask lanzará una excepción :exc:`~werkzeug."
"exceptions.RequestEntityTooLarge`."

#: ../../patterns/fileuploads.rst:150
msgid "Connection Reset Issue"
msgstr "Problema de reinicio de la conexión"

#: ../../patterns/fileuploads.rst:152
msgid ""
"When using the local development server, you may get a connection reset error "
"instead of a 413 response. You will get the correct status response when "
"running the app with a production WSGI server."
msgstr ""
"Cuando se utiliza el servidor de desarrollo local, es posible que obtenga un "
"error de restablecimiento de la conexión en lugar de una respuesta 413. "
"Obtendrá la respuesta de estado correcta cuando ejecute la aplicación con un "
"servidor WSGI de producción."

#: ../../patterns/fileuploads.rst:156
msgid ""
"This feature was added in Flask 0.6 but can be achieved in older versions as "
"well by subclassing the request object.  For more information on that consult "
"the Werkzeug documentation on file handling."
msgstr ""
"Esta característica fue añadida en Flask 0.6, pero también se puede conseguir "
"en versiones anteriores subclasificando el objeto request. Para más información "
"al respecto consulte la documentación de Werkzeug sobre el manejo de archivos."

#: ../../patterns/fileuploads.rst:162
msgid "Upload Progress Bars"
msgstr "Cargar barras de progreso"

#: ../../patterns/fileuploads.rst:164
msgid ""
"A while ago many developers had the idea to read the incoming file in small "
"chunks and store the upload progress in the database to be able to poll the "
"progress with JavaScript from the client. The client asks the server every 5 "
"seconds how much it has transmitted, but this is something it should already "
"know."
msgstr ""
"Hace un tiempo muchos desarrolladores tuvieron la idea de leer el archivo "
"entrante en pequeños trozos y almacenar el progreso de subida en la base de "
"datos para poder sondear el progreso con JavaScript desde el cliente. El "
"cliente pregunta al servidor cada 5 segundos cuánto ha transmitido, pero esto "
"es algo que ya debería saber."

#: ../../patterns/fileuploads.rst:171
msgid "An Easier Solution"
msgstr "Una solución más fácil"

#: ../../patterns/fileuploads.rst:173
msgid ""
"Now there are better solutions that work faster and are more reliable. There "
"are JavaScript libraries like jQuery_ that have form plugins to ease the "
"construction of progress bar."
msgstr ""
"Ahora hay mejores soluciones que funcionan más rápido y son más fiables. Hay "
"bibliotecas de JavaScript como jQuery_ que tienen plugins de formulario para "
"facilitar la construcción de la barra de progreso."

#: ../../patterns/fileuploads.rst:177
msgid ""
"Because the common pattern for file uploads exists almost unchanged in all "
"applications dealing with uploads, there is also a Flask extension called "
"`Flask-Uploads`_ that implements a full fledged upload mechanism that allows "
"controlling which file extensions are allowed to be uploaded."
msgstr ""
"Debido a que el patrón común para la subida de archivos existe casi sin cambios "
"en todas las aplicaciones que se ocupan de las subidas, también hay una "
"extensión de Flask llamada `Flask-Uploads`_ que implementa un mecanismo de "
"subida completo que permite controlar qué extensiones de archivo se pueden "
"subir."

#: ../../patterns/flashing.rst:2
msgid "Message Flashing"
msgstr "Mensaje Flash"

#: ../../patterns/flashing.rst:4
msgid ""
"Good applications and user interfaces are all about feedback.  If the user does "
"not get enough feedback they will probably end up hating the application.  "
"Flask provides a really simple way to give feedback to a user with the flashing "
"system.  The flashing system basically makes it possible to record a message at "
"the end of a request and access it next request and only next request.  This is "
"usually combined with a layout template that does this. Note that browsers and "
"sometimes web servers enforce a limit on cookie sizes. This means that flashing "
"messages that are too large for session cookies causes message flashing to fail "
"silently."
msgstr ""
"Las buenas aplicaciones e interfaces de usuario se basan en la "
"retroalimentación. Si el usuario no recibe suficiente retroalimentación, "
"probablemente terminará odiando la aplicación. Flask proporciona una forma muy "
"sencilla de dar retroalimentación a un usuario con el sistema de parpadeo. El "
"sistema de parpadeo básicamente hace posible grabar un mensaje al final de una "
"solicitud y acceder a él la próxima solicitud y sólo la próxima solicitud. Esto "
"se suele combinar con una plantilla de diseño que hace esto. Tenga en cuenta "
"que los navegadores y a veces los servidores web imponen un límite en el tamaño "
"de las cookies. Esto significa que si los mensajes son demasiado grandes para "
"las cookies de sesión, el parpadeo de los mensajes falla silenciosamente."

#: ../../patterns/flashing.rst:15
msgid "Simple Flashing"
msgstr "Flash simple"

#: ../../patterns/flashing.rst:17
msgid "So here is a full example::"
msgstr "Así que aquí está un ejemplo completo::"

#: ../../patterns/flashing.rst:41
msgid "And here is the :file:`layout.html` template which does the magic:"
msgstr "Y aquí está la plantilla :file:`layout.html` que hace la magia:"

#: ../../patterns/flashing.rst:58
msgid ""
"Here is the :file:`index.html` template which inherits from :file:`layout.html`:"
msgstr ""
"Aquí está la plantilla :file:`index.html` que hereda de :file:`layout.html`:"

#: ../../patterns/flashing.rst:68
msgid ""
"And here is the :file:`login.html` template which also inherits from :file:"
"`layout.html`:"
msgstr ""
"Y aquí está la plantilla :file:`login.html` que también hereda de :file:`layout."
"html`:"

#: ../../patterns/flashing.rst:92
msgid "Flashing With Categories"
msgstr "Flashing con categorías"

#: ../../patterns/flashing.rst:96
msgid ""
"It is also possible to provide categories when flashing a message.  The default "
"category if nothing is provided is ``'message'``.  Alternative categories can "
"be used to give the user better feedback.  For example error messages could be "
"displayed with a red background."
msgstr ""
"También es posible proporcionar categorías cuando se parpadea un mensaje.  La "
"categoría por defecto si no se proporciona nada es ``'message'``.  Se pueden "
"utilizar categorías alternativas para dar al usuario una mejor respuesta.  Por "
"ejemplo, los mensajes de error podrían mostrarse con un fondo rojo."

#: ../../patterns/flashing.rst:101
msgid ""
"To flash a message with a different category, just use the second argument to "
"the :func:`~flask.flash` function::"
msgstr ""
"Para emitir un mensaje con una categoría diferente, basta con utilizar el "
"segundo argumento de la función :func:`~flask.flash`::"

#: ../../patterns/flashing.rst:106
msgid ""
"Inside the template you then have to tell the :func:`~flask."
"get_flashed_messages` function to also return the categories.  The loop looks "
"slightly different in that situation then:"
msgstr ""
"Dentro de la plantilla tienes que decirle a la función :func:`~flask."
"get_flashed_messages` que también devuelva las categorías.  El bucle se ve "
"ligeramente diferente en esa situación entonces:"

#: ../../patterns/flashing.rst:122
msgid ""
"This is just one example of how to render these flashed messages.  One might "
"also use the category to add a prefix such as ``<strong>Error:</strong>`` to "
"the message."
msgstr ""
"Este es sólo un ejemplo de cómo representar estos mensajes intermitentes.  "
"También se puede utilizar la categoría para añadir un prefijo como "
"``<strong>Error:</strong>`` al mensaje."

#: ../../patterns/flashing.rst:127
msgid "Filtering Flash Messages"
msgstr "Filtrado de mensajes flash"

#: ../../patterns/flashing.rst:131
msgid ""
"Optionally you can pass a list of categories which filters the results of :func:"
"`~flask.get_flashed_messages`.  This is useful if you wish to render each "
"category in a separate block."
msgstr ""
"Opcionalmente puede pasar una lista de categorías que filtre los resultados de :"
"func:`~flask.get_flashed_messages`.  Esto es útil si desea renderizar cada "
"categoría en un bloque separado."

#: ../../patterns/index.rst:2
msgid "Patterns for Flask"
msgstr "Patrones para Flask"

#: ../../patterns/index.rst:4
msgid ""
"Certain features and interactions are common enough that you will find them in "
"most web applications. For example, many applications use a relational database "
"and user authentication. They will open a database connection at the beginning "
"of the request and get the information for the logged in user. At the end of "
"the request, the database connection is closed."
msgstr ""
"Ciertas características e interacciones son lo suficientemente comunes como "
"para encontrarlas en la mayoría de las aplicaciones web. Por ejemplo, muchas "
"aplicaciones utilizan una base de datos relacional y la autenticación del "
"usuario. Abrirán una conexión a la base de datos al principio de la petición y "
"obtendrán la información del usuario conectado. Al final de la solicitud, la "
"conexión a la base de datos se cierra."

#: ../../patterns/index.rst:11
msgid ""
"These types of patterns may be a bit outside the scope of Flask itself, but "
"Flask makes it easy to implement them. Some common patterns are collected in "
"the following pages."
msgstr ""
"Estos tipos de patrones pueden estar un poco fuera del alcance de Flask en sí, "
"pero Flask facilita su implementación. En las siguientes páginas se recogen "
"algunos patrones comunes."

#: ../../patterns/jquery.rst:2
msgid "AJAX with jQuery"
msgstr "AJAX con jQuery"

#: ../../patterns/jquery.rst:4
msgid ""
"`jQuery`_ is a small JavaScript library commonly used to simplify working with "
"the DOM and JavaScript in general.  It is the perfect tool to make web "
"applications more dynamic by exchanging JSON between server and client."
msgstr ""
"`jQuery`_ es una pequeña librería de JavaScript utilizada habitualmente para "
"simplificar el trabajo con el DOM y con JavaScript en general. Es la "
"herramienta perfecta para hacer más dinámicas las aplicaciones web mediante el "
"intercambio de JSON entre el servidor y el cliente."

#: ../../patterns/jquery.rst:9
msgid ""
"JSON itself is a very lightweight transport format, very similar to how Python "
"primitives (numbers, strings, dicts and lists) look like which is widely "
"supported and very easy to parse.  It became popular a few years ago and "
"quickly replaced XML as transport format in web applications."
msgstr ""
"JSON es un formato de transporte muy ligero, muy similar al aspecto de las "
"primitivas de Python (números, cadenas, dicts y listas) que está ampliamente "
"soportado y es muy fácil de analizar. Se hizo popular hace unos años y "
"rápidamente sustituyó a XML como formato de transporte en las aplicaciones web."

#: ../../patterns/jquery.rst:17
msgid "Loading jQuery"
msgstr "Carga de jQuery"

#: ../../patterns/jquery.rst:19
msgid ""
"In order to use jQuery, you have to download it first and place it in the "
"static folder of your application and then ensure it's loaded.  Ideally you "
"have a layout template that is used for all pages where you just have to add a "
"script statement to the bottom of your ``<body>`` to load jQuery:"
msgstr ""
"Para usar jQuery, primero tienes que descargarlo y colocarlo en la carpeta "
"estática de tu aplicación y luego asegurarte de que se cargue. Lo ideal es que "
"tengas una plantilla de diseño que se utilice para todas las páginas en la que "
"sólo tengas que añadir una declaración de script al final de tu ``<body>`` para "
"cargar jQuery:"

#: ../../patterns/jquery.rst:29
msgid ""
"Another method is using Google's `AJAX Libraries API <https://developers.google."
"com/speed/libraries/>`_ to load jQuery:"
msgstr ""
"Otro método es utilizar la `API de las librerías AJAX <https://developers."
"google.com/speed/libraries/>`_ de Google para cargar jQuery:"

#: ../../patterns/jquery.rst:38
msgid ""
"In this case you have to put jQuery into your static folder as a fallback, but "
"it will first try to load it directly from Google. This has the advantage that "
"your website will probably load faster for users if they went to at least one "
"other website before using the same jQuery version from Google because it will "
"already be in the browser cache."
msgstr ""
"En este caso tienes que poner jQuery en tu carpeta estática como un fallback, "
"pero primero intentará cargarlo directamente desde Google. Esto tiene la "
"ventaja de que su sitio web probablemente se cargará más rápido para los "
"usuarios si fueron a al menos otro sitio web antes de usar la misma versión de "
"jQuery de Google porque ya estará en la caché del navegador."

#: ../../patterns/jquery.rst:45
msgid "Where is My Site?"
msgstr "¿Dónde está mi sitio?"

#: ../../patterns/jquery.rst:47
msgid ""
"Do you know where your application is?  If you are developing the answer is "
"quite simple: it's on localhost port something and directly on the root of that "
"server.  But what if you later decide to move your application to a different "
"location?  For example to ``http://example.com/myapp``?  On the server side "
"this never was a problem because we were using the handy :func:`~flask.url_for` "
"function that could answer that question for us, but if we are using jQuery we "
"should not hardcode the path to the application but make that dynamic, so how "
"can we do that?"
msgstr ""
"¿Sabes dónde está tu aplicación? Si estás desarrollando la respuesta es "
"bastante sencilla: está en el puerto localhost algo y directamente en la raíz "
"de ese servidor.  ¿Pero qué pasa si más tarde decides mover tu aplicación a una "
"ubicación diferente?  ¿Por ejemplo a ``http://example.com/myapp``?  En el lado "
"del servidor esto nunca fue un problema porque estábamos usando la práctica "
"función :func:`~flask.url_for` que podía responder a esa pregunta por nosotros, "
"pero si estamos usando jQuery no debemos hardcodear la ruta a la aplicación "
"sino hacerla dinámica, así que ¿cómo podemos hacer eso?"

#: ../../patterns/jquery.rst:56
msgid ""
"A simple method would be to add a script tag to our page that sets a global "
"variable to the prefix to the root of the application.  Something like this:"
msgstr ""
"Un método sencillo sería añadir una etiqueta de script a nuestra página que "
"establezca una variable global con el prefijo a la raíz de la aplicación. Algo "
"así:"

#: ../../patterns/jquery.rst:68
msgid "JSON View Functions"
msgstr "Funciones de la vista JSON"

#: ../../patterns/jquery.rst:70
msgid ""
"Now let's create a server side function that accepts two URL arguments of "
"numbers which should be added together and then sent back to the application in "
"a JSON object.  This is a really ridiculous example and is something you "
"usually would do on the client side alone, but a simple example that shows how "
"you would use jQuery and Flask nonetheless::"
msgstr ""
"Ahora vamos a crear una función del lado del servidor que acepte dos argumentos "
"URL de números que deben ser sumados y luego enviados de vuelta a la aplicación "
"en un objeto JSON. Este es un ejemplo realmente ridículo y es algo que "
"normalmente se haría en el lado del cliente solo, pero un ejemplo simple que "
"muestra cómo se utilizaría jQuery y Flask sin embargo::"

#: ../../patterns/jquery.rst:89
msgid ""
"As you can see I also added an `index` method here that renders a template.  "
"This template will load jQuery as above and have a little form where we can add "
"two numbers and a link to trigger the function on the server side."
msgstr ""
"Como puedes ver también he añadido un método `index` aquí que renderiza una "
"plantilla. Esta plantilla cargará jQuery como en el caso anterior y tendrá un "
"pequeño formulario donde podemos añadir dos números y un enlace para activar la "
"función en el lado del servidor."

#: ../../patterns/jquery.rst:94
msgid ""
"Note that we are using the :meth:`~werkzeug.datastructures.MultiDict.get` "
"method here which will never fail.  If the key is missing a default value (here "
"``0``) is returned.  Furthermore it can convert values to a specific type (like "
"in our case `int`).  This is especially handy for code that is triggered by a "
"script (APIs, JavaScript etc.) because you don't need special error reporting "
"in that case."
msgstr ""
"Tenga en cuenta que estamos utilizando el método :meth:`~werkzeug."
"datastructures.MultiDict.get` que nunca fallará. Si falta la clave se devuelve "
"un valor por defecto (aquí ``0``). Además puede convertir los valores a un tipo "
"específico (como en nuestro caso `int`). Esto es especialmente útil para el "
"código que se desencadena por un script (APIs, JavaScript, etc.) porque no se "
"necesita un informe de error especial en ese caso."

#: ../../patterns/jquery.rst:102
msgid "The HTML"
msgstr "El HTML"

#: ../../patterns/jquery.rst:104
msgid ""
"Your index.html template either has to extend a :file:`layout.html` template "
"with jQuery loaded and the `$SCRIPT_ROOT` variable set, or do that on the top. "
"Here's the HTML code needed for our little application (:file:`index.html`). "
"Notice that we also drop the script directly into the HTML here.  It is usually "
"a better idea to have that in a separate script file:"
msgstr ""
"Tu plantilla index.html tiene que extender una plantilla :file:`layout.html` "
"con jQuery cargado y la variable `$SCRIPT_ROOT` establecida, o hacerlo en la "
"parte superior. Aquí está el código HTML necesario para nuestra pequeña "
"aplicación (:file:`index.html`). Fíjate en que aquí también soltamos el script "
"directamente en el HTML. Normalmente es mejor tenerlo en un archivo de script "
"separado:"

#: ../../patterns/jquery.rst:131
msgid ""
"I won't go into detail here about how jQuery works, just a very quick "
"explanation of the little bit of code above:"
msgstr ""
"No voy a entrar en detalles aquí sobre cómo funciona jQuery, sólo una "
"explicación muy rápida del pequeño trozo de código anterior:"

#: ../../patterns/jquery.rst:134
msgid ""
"``$(function() { ... })`` specifies code that should run once the browser is "
"done loading the basic parts of the page."
msgstr ""
"``$(function() { ... })`` especifica el código que debe ejecutarse una vez que "
"el navegador haya terminado de cargar las partes básicas de la página."

#: ../../patterns/jquery.rst:136
msgid "``$('selector')`` selects an element and lets you operate on it."
msgstr "``$('selector')`` selecciona un elemento y permite operar sobre él."

#: ../../patterns/jquery.rst:137
msgid ""
"``element.bind('event', func)`` specifies a function that should run when the "
"user clicked on the element.  If that function returns `false`, the default "
"behavior will not kick in (in this case, navigate to the `#` URL)."
msgstr ""
"``element.bind('event', func)`` especifica una función que debe ejecutarse "
"cuando el usuario haga clic en el elemento. Si esa función devuelve `false`, el "
"comportamiento por defecto no se pondrá en marcha (en este caso, navegar a la "
"URL `#`)."

#: ../../patterns/jquery.rst:141
msgid ""
"``$.getJSON(url, data, func)`` sends a ``GET`` request to `url` and will send "
"the contents of the `data` object as query parameters.  Once the data arrived, "
"it will call the given function with the return value as argument.  Note that "
"we can use the `$SCRIPT_ROOT` variable here that we set earlier."
msgstr ""
"``$.getJSON(url, data, func)`` envía una petición ``GET`` a `url` y enviará el "
"contenido del objeto `data` como parámetros de consulta.  Una vez que los datos "
"lleguen, llamará a la función dada con el valor de retorno como argumento. Ten "
"en cuenta que aquí podemos utilizar la variable `$SCRIPT_ROOT` que establecimos "
"anteriormente."

#: ../../patterns/jquery.rst:147
msgid ""
"Check out the :gh:`example source <examples/javascript>` for a full application "
"demonstrating the code on this page, as well as the same thing using "
"``XMLHttpRequest`` and ``fetch``."
msgstr ""
"Echa un vistazo a la fuente de :gh:`ejemplo <examples/javascript>` para una "
"aplicación completa que demuestra el código de esta página, así como lo mismo "
"usando ``XMLHttpRequest`` y ``fetch``."

#: ../../patterns/lazyloading.rst:2
msgid "Lazily Loading Views"
msgstr "Vistas de carga lenta"

#: ../../patterns/lazyloading.rst:4
msgid ""
"Flask is usually used with the decorators.  Decorators are simple and you have "
"the URL right next to the function that is called for that specific URL.  "
"However there is a downside to this approach: it means all your code that uses "
"decorators has to be imported upfront or Flask will never actually find your "
"function."
msgstr ""
"Flask se utiliza generalmente con los decoradores. Los decoradores son simples "
"y tienes la URL justo al lado de la función que se llama para esa URL "
"específica. Sin embargo, hay una desventaja en este enfoque: significa que todo "
"su código que utiliza decoradores tiene que ser importado por adelantado o "
"Flask nunca encontrará su función."

#: ../../patterns/lazyloading.rst:10
msgid ""
"This can be a problem if your application has to import quick.  It might have "
"to do that on systems like Google's App Engine or other systems.  So if you "
"suddenly notice that your application outgrows this approach you can fall back "
"to a centralized URL mapping."
msgstr ""
"Esto puede ser un problema si su aplicación tiene que importar rápidamente. "
"Puede que tenga que hacerlo en sistemas como el App Engine de Google u otros "
"sistemas. Así que si de repente notas que tu aplicación se queda pequeña con "
"este enfoque puedes volver a un mapeo de URLs centralizado."

#: ../../patterns/lazyloading.rst:15
msgid ""
"The system that enables having a central URL map is the :meth:`~flask.Flask."
"add_url_rule` function.  Instead of using decorators, you have a file that sets "
"up the application with all URLs."
msgstr ""
"El sistema que permite tener un mapa de URLs central es la función :meth:"
"`~flask.Flask.add_url_rule`. En lugar de usar decoradores, tienes un archivo "
"que configura la aplicación con todas las URLs."

#: ../../patterns/lazyloading.rst:20
msgid "Converting to Centralized URL Map"
msgstr "Conversión a mapa de URLs centralizado"

#: ../../patterns/lazyloading.rst:22
msgid "Imagine the current application looks somewhat like this::"
msgstr "Imagina que la aplicación actual tiene un aspecto similar al siguiente::"

#: ../../patterns/lazyloading.rst:35
msgid ""
"Then, with the centralized approach you would have one file with the views (:"
"file:`views.py`) but without any decorator::"
msgstr ""
"Entonces, con el enfoque centralizado tendrías un archivo con las vistas (:file:"
"`views.py`) pero sin ningún decorador:: algo así::"

#: ../../patterns/lazyloading.rst:44
msgid ""
"And then a file that sets up an application which maps the functions to URLs::"
msgstr ""
"Y luego un archivo que configura una aplicación que mapea las funciones a URLs::"

#: ../../patterns/lazyloading.rst:54
msgid "Loading Late"
msgstr "Cargando con retraso"

#: ../../patterns/lazyloading.rst:56
msgid ""
"So far we only split up the views and the routing, but the module is still "
"loaded upfront.  The trick is to actually load the view function as needed. "
"This can be accomplished with a helper class that behaves just like a function "
"but internally imports the real function on first use::"
msgstr ""
"Hasta ahora sólo hemos dividido las vistas y el enrutamiento, pero el módulo se "
"sigue cargando por adelantado. El truco está en cargar realmente la función de "
"la vista cuando se necesita. Esto se puede lograr con una clase helper que se "
"comporta como una función pero que importa internamente la función real en el "
"primer uso::"

#: ../../patterns/lazyloading.rst:76
msgid ""
"What's important here is is that `__module__` and `__name__` are properly set.  "
"This is used by Flask internally to figure out how to name the URL rules in "
"case you don't provide a name for the rule yourself."
msgstr ""
"Lo importante aquí es que `__module__` y `__name__` estén correctamente "
"configurados. Esto es utilizado por Flask internamente para averiguar cómo "
"nombrar las reglas URL en caso de que no proporciones un nombre para la regla "
"tú mismo."

#: ../../patterns/lazyloading.rst:80
msgid "Then you can define your central place to combine the views like this::"
msgstr "Entonces puedes definir tu lugar central para combinar las vistas así::"

#: ../../patterns/lazyloading.rst:90
msgid ""
"You can further optimize this in terms of amount of keystrokes needed to write "
"this by having a function that calls into :meth:`~flask.Flask.add_url_rule` by "
"prefixing a string with the project name and a dot, and by wrapping `view_func` "
"in a `LazyView` as needed.  ::"
msgstr ""
"Puedes optimizar aún más esto en términos de cantidad de pulsaciones de teclas "
"necesarias para escribir esto teniendo una función que llame a :meth:`~flask."
"Flask.add_url_rule` prefijando una cadena con el nombre del proyecto y un "
"punto, y envolviendo `view_func` en un `LazyView` según sea necesario. ::"

#: ../../patterns/lazyloading.rst:107
msgid ""
"One thing to keep in mind is that before and after request handlers have to be "
"in a file that is imported upfront to work properly on the first request.  The "
"same goes for any kind of remaining decorator."
msgstr ""
"Una cosa a tener en cuenta es que los manejadores de antes y después de la "
"solicitud tienen que estar en un archivo que se importa por adelantado para que "
"funcione correctamente en la primera solicitud. Lo mismo ocurre con cualquier "
"tipo de decorador restante."

#: ../../patterns/methodoverrides.rst:2
msgid "Adding HTTP Method Overrides"
msgstr "Añadir anulaciones de métodos HTTP"

#: ../../patterns/methodoverrides.rst:4
msgid ""
"Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP methods "
"(such as PATCH). In that case it's possible to \"proxy\" HTTP methods through "
"another HTTP method in total violation of the protocol."
msgstr ""
"Algunos proxies HTTP no soportan métodos HTTP arbitrarios o métodos HTTP más "
"nuevos (como PATCH). En ese caso es posible \"proxiar\" métodos HTTP a través "
"de otro método HTTP en total violación del protocolo."

#: ../../patterns/methodoverrides.rst:8
msgid ""
"The way this works is by letting the client do an HTTP POST request and set the "
"``X-HTTP-Method-Override`` header. Then the method is replaced with the header "
"value before being passed to Flask."
msgstr ""
"La forma en que esto funciona es dejando que el cliente haga una petición HTTP "
"POST y establezca la cabecera ``X-HTTP-Method-Override``. Entonces el método es "
"reemplazado por el valor de la cabecera antes de ser pasado a Flask."

#: ../../patterns/methodoverrides.rst:12
msgid "This can be accomplished with an HTTP middleware::"
msgstr "Esto puede lograrse con un middleware HTTP::"

#: ../../patterns/methodoverrides.rst:37
msgid "To use this with Flask, wrap the app object with the middleware::"
msgstr ""
"Para usar esto con Flask, envuelva el objeto de la aplicación con el "
"middleware::"

#: ../../patterns/mongoengine.rst:2
msgid "MongoDB with MongoEngine"
msgstr "MongoDB con MongoEngine"

#: ../../patterns/mongoengine.rst:4
msgid ""
"Using a document database like MongoDB is a common alternative to relational "
"SQL databases. This pattern shows how to use `MongoEngine`_, a document mapper "
"library, to integrate with MongoDB."
msgstr ""
"El uso de una base de datos de documentos como MongoDB es una alternativa común "
"a las bases de datos relacionales SQL. Este patrón muestra cómo utilizar "
"`MongoEngine`_, una biblioteca de mapeo de documentos, para integrarse con "
"MongoDB."

#: ../../patterns/mongoengine.rst:8
msgid "A running MongoDB server and `Flask-MongoEngine`_ are required. ::"
msgstr ""
"Se requiere un servidor MongoDB en funcionamiento y `Flask-MongoEngine`_. ::"

#: ../../patterns/mongoengine.rst:17
msgid "Configuration"
msgstr "Configuración"

#: ../../patterns/mongoengine.rst:19
msgid ""
"Basic setup can be done by defining ``MONGODB_SETTINGS`` on ``app.config`` and "
"creating a ``MongoEngine`` instance. ::"
msgstr ""
"La configuración básica puede hacerse definiendo ``MONGODB_SETTINGS`` en ``app."
"config`` y creando una instancia de ``MongoEngine``::"

#: ../../patterns/mongoengine.rst:33
msgid "Mapping Documents"
msgstr "Documentos de mapeo"

#: ../../patterns/mongoengine.rst:35
msgid ""
"To declare a model that represents a Mongo document, create a class that "
"inherits from ``Document`` and declare each of the fields. ::"
msgstr ""
"Para declarar un modelo que represente un documento Mongo, crea una clase que "
"herede de ``Document`` y declara cada uno de los campos ::"

#: ../../patterns/mongoengine.rst:47
msgid ""
"If the document has nested fields, use ``EmbeddedDocument`` to defined the "
"fields of the embedded document and ``EmbeddedDocumentField`` to declare it on "
"the parent document. ::"
msgstr ""
"Si el documento tiene campos anidados, utilice ``EmbeddedDocument`` para "
"definir los campos del documento incrustado y ``EmbeddedDocumentField`` para "
"declararlos en el documento padre. ::"

#: ../../patterns/mongoengine.rst:62
msgid "Creating Data"
msgstr "Creación de datos"

#: ../../patterns/mongoengine.rst:64
msgid ""
"Instantiate your document class with keyword arguments for the fields. You can "
"also assign values to the field attributes after instantiation. Then call ``doc."
"save()``. ::"
msgstr ""
"Instancie su clase documental con argumentos de palabras clave para los campos. "
"También puedes asignar valores a los atributos de los campos después de la "
"instanciación. Luego llama a ``doc.save()``. ::"

#: ../../patterns/mongoengine.rst:78
msgid "Queries"
msgstr "Consultas"

#: ../../patterns/mongoengine.rst:80
msgid ""
"Use the class ``objects`` attribute to make queries. A keyword argument looks "
"for an equal value on the field. ::"
msgstr ""
"Utiliza el atributo de clase ``objects`` para realizar consultas. Un argumento "
"de palabra clave busca un valor igual en el campo ::"

#: ../../patterns/mongoengine.rst:85
msgid ""
"Query operators may be used by concatenating them with the field name using a "
"double-underscore. ``objects``, and queries returned by calling it, are "
"iterable. ::"
msgstr ""
"Los operadores de consulta pueden utilizarse concatenándolos con el nombre del "
"campo mediante un doble guión. Los objetos y las consultas devueltas al "
"llamarlos son iterables::"

#: ../../patterns/mongoengine.rst:96
msgid "Documentation"
msgstr "Documentación"

#: ../../patterns/mongoengine.rst:98
msgid ""
"There are many more ways to define and query documents with MongoEngine. For "
"more information, check out the `official documentation <MongoEngine_>`_."
msgstr ""
"Hay muchas más formas de definir y consultar documentos con MongoEngine. Para "
"más información, consulta la `documentación oficial <MongoEngine_>`_."

#: ../../patterns/mongoengine.rst:102
msgid ""
"Flask-MongoEngine adds helpful utilities on top of MongoEngine. Check out their "
"`documentation <Flask-MongoEngine_>`_ as well."
msgstr ""
"Flask-MongoEngine añade útiles utilidades encima de MongoEngine. Consulta "
"también su `documentación <Flask-MongoEngine_>`_."

#: ../../patterns/packages.rst:2
msgid "Large Applications as Packages"
msgstr "Grandes aplicaciones como paquetes"

#: ../../patterns/packages.rst:4
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""
"Imagina una estructura de aplicación simple de flask que se parece a esto::"

#: ../../patterns/packages.rst:16
msgid ""
"While this is fine for small applications, for larger applications it's a good "
"idea to use a package instead of a module. The :doc:`/tutorial/index` is "
"structured to use the package pattern, see the :gh:`example code <examples/"
"tutorial>`."
msgstr ""
"Aunque esto está bien para aplicaciones pequeñas, para aplicaciones más grandes "
"es una buena idea usar un paquete en lugar de un módulo. El :doc:`/tutorial/"
"index` está estructurado para utilizar el patrón de paquete, véase el :gh:"
"`código de ejemplo <examples/tutorial>`."

#: ../../patterns/packages.rst:22
msgid "Simple Packages"
msgstr "Paquetes sencillos"

#: ../../patterns/packages.rst:24
msgid ""
"To convert that into a larger one, just create a new folder :file:"
"`yourapplication` inside the existing one and move everything below it. Then "
"rename :file:`yourapplication.py` to :file:`__init__.py`.  (Make sure to delete "
"all ``.pyc`` files first, otherwise things would most likely break)"
msgstr ""
"Para convertirlo en uno más grande, simplemente crea una nueva carpeta :file:"
"`yourapplication` dentro de la existente y mueve todo debajo de ella. Entonces "
"renombra :file:`yourapplication.py` a :file:`__init__.py`.  (Asegúrate de "
"borrar todos los archivos ``.pyc`` primero, de lo contrario lo más probable es "
"que surgan errores)"

#: ../../patterns/packages.rst:29 ../../patterns/packages.rst:139
msgid "You should then end up with something like that::"
msgstr "Entonces deberías terminar con algo así::"

#: ../../patterns/packages.rst:42
msgid ""
"But how do you run your application now?  The naive ``python yourapplication/"
"__init__.py`` will not work.  Let's just say that Python does not want modules "
"in packages to be the startup file.  But that is not a big problem, just add a "
"new file called :file:`setup.py` next to the inner :file:`yourapplication` "
"folder with the following contents::"
msgstr ""
"Pero, ¿cómo se ejecuta la aplicación ahora? El sencillo ``python "
"yourapplication/__init__.py`` no funcionará. Digamos que Python no quiere que "
"los módulos de los paquetes sean el archivo de inicio. Pero eso no es un gran "
"problema, simplemente añade un nuevo fichero llamado :file:`setup.py` junto a "
"la carpeta interna :file:`yourapplication` con el siguiente contenido::"

#: ../../patterns/packages.rst:59
msgid ""
"In order to run the application you need to export an environment variable that "
"tells Flask where to find the application instance:"
msgstr ""
"Para ejecutar la aplicación es necesario exportar una variable de entorno que "
"indique a Flask dónde encontrar la instancia de la aplicación:"

#: ../../patterns/packages.rst:82
msgid ""
"If you are outside of the project directory make sure to provide the exact path "
"to your application directory. Similarly you can turn on the development "
"features like this:"
msgstr ""
"Si está fuera del directorio del proyecto, asegúrese de proporcionar la ruta "
"exacta al directorio de su aplicación. Del mismo modo, puede activar las "
"funciones de desarrollo así:"

#: ../../patterns/packages.rst:106
msgid ""
"In order to install and run the application you need to issue the following "
"commands::"
msgstr ""
"Para instalar y ejecutar la aplicación es necesario emitir los siguientes "
"comandos::"

#: ../../patterns/packages.rst:112
msgid ""
"What did we gain from this?  Now we can restructure the application a bit into "
"multiple modules.  The only thing you have to remember is the following quick "
"checklist:"
msgstr ""
"¿Qué ganamos con esto? Ahora podemos reestructurar un poco la aplicación en "
"varios módulos. Lo único que tienes que recordar es la siguiente lista de "
"comprobación rápida:"

#: ../../patterns/packages.rst:116
msgid ""
"the `Flask` application object creation has to be in the :file:`__init__.py` "
"file.  That way each module can import it safely and the `__name__` variable "
"will resolve to the correct package."
msgstr ""
"la creación del objeto de aplicación `Flask` tiene que estar en el archivo :"
"file:`__init__.py`. De esta manera cada módulo puede importarlo con seguridad y "
"la variable `__name__` resolverá el paquete correcto."

#: ../../patterns/packages.rst:119
msgid ""
"all the view functions (the ones with a :meth:`~flask.Flask.route` decorator on "
"top) have to be imported in the :file:`__init__.py` file. Not the object "
"itself, but the module it is in. Import the view module **after the application "
"object is created**."
msgstr ""
"todas las funciones de vista (las que tienen un decorador :meth:`~flask.Flask."
"route` encima) tienen que ser importadas en el archivo :file:`__init__.py`. No "
"el objeto en sí, sino el módulo en el que se encuentra. Importa el módulo de la "
"vista **después de crear el objeto de la aplicación**."

#: ../../patterns/packages.rst:124
msgid "Here's an example :file:`__init__.py`::"
msgstr "Este es un ejemplo :file:`__init__.py`::"

#: ../../patterns/packages.rst:131
msgid "And this is what :file:`views.py` would look like::"
msgstr "Y así es como quedaría :file:`views.py`::"

#: ../../patterns/packages.rst:154
msgid "Circular Imports"
msgstr "Importaciones circulares"

#: ../../patterns/packages.rst:156
msgid ""
"Every Python programmer hates them, and yet we just added some: circular "
"imports (That's when two modules depend on each other.  In this case :file:"
"`views.py` depends on :file:`__init__.py`).  Be advised that this is a bad idea "
"in general but here it is actually fine.  The reason for this is that we are "
"not actually using the views in :file:`__init__.py` and just ensuring the "
"module is imported and we are doing that at the bottom of the file."
msgstr ""
"Todos los programadores de Python los odian, y sin embargo acabamos de añadir "
"algunos: importaciones circulares (Es cuando dos módulos dependen el uno del "
"otro. En este caso :file:`views.py` depende de :file:`__init__.py`). Ten en "
"cuenta que esto es una mala idea en general, pero aquí está bien. La razón es "
"que no estamos usando las vistas en :file:`__init__.py` y sólo nos aseguramos "
"de que el módulo es importado y lo hacemos al final del fichero."

#: ../../patterns/packages.rst:164
msgid ""
"There are still some problems with that approach but if you want to use "
"decorators there is no way around that.  Check out the :doc:`/becomingbig` "
"section for some inspiration how to deal with that."
msgstr ""
"Todavía hay algunos problemas con ese enfoque, pero si quieres usar decoradores "
"no hay manera de evitarlo. Consulte la sección :doc:`/becomingbig` para "
"inspirarse en la forma de tratar con eso."

#: ../../patterns/packages.rst:170
msgid "Working with Blueprints"
msgstr "Trabajar con Blueprints"

#: ../../patterns/packages.rst:172
msgid ""
"If you have larger applications it's recommended to divide them into smaller "
"groups where each group is implemented with the help of a blueprint.  For a "
"gentle introduction into this topic refer to the :doc:`/blueprints` chapter of "
"the documentation."
msgstr ""
"Si tienes aplicaciones más grandes es recomendable dividirlas en grupos más "
"pequeños donde cada grupo se implementa con la ayuda de un blueprint.  Para una "
"suave introducción a este tema, consulte el capítulo :doc:`/blueprints` de la "
"documentación."

#: ../../patterns/requestchecksum.rst:2
msgid "Request Content Checksums"
msgstr "Solicitar checksums de contenido"

#: ../../patterns/requestchecksum.rst:4
msgid ""
"Various pieces of code can consume the request data and preprocess it. For "
"instance JSON data ends up on the request object already read and processed, "
"form data ends up there as well but goes through a different code path.  This "
"seems inconvenient when you want to calculate the checksum of the incoming "
"request data.  This is necessary sometimes for some APIs."
msgstr ""
"Varias piezas de código pueden consumir los datos de la solicitud y "
"preprocesarlos. Por ejemplo, los datos JSON terminan en el objeto de la "
"petición ya leídos y procesados, los datos de los formularios también terminan "
"allí pero pasan por una ruta de código diferente. Esto parece un inconveniente "
"cuando se quiere calcular la suma de comprobación de los datos de la solicitud "
"entrante. Esto es necesario a veces para algunas APIs."

#: ../../patterns/requestchecksum.rst:11
msgid ""
"Fortunately this is however very simple to change by wrapping the input stream."
msgstr ""
"Afortunadamente, esto es muy sencillo de cambiar envolviendo el flujo de "
"entrada."

#: ../../patterns/requestchecksum.rst:14
msgid ""
"The following example calculates the SHA1 checksum of the incoming data as it "
"gets read and stores it in the WSGI environment::"
msgstr ""
"El siguiente ejemplo calcula el checksum SHA1 de los datos entrantes a medida "
"que se leen y los almacena en el entorno WSGI::"

#: ../../patterns/requestchecksum.rst:41
msgid ""
"To use this, all you need to do is to hook the calculating stream in before the "
"request starts consuming data.  (Eg: be careful accessing ``request.form`` or "
"anything of that nature.  ``before_request_handlers`` for instance should be "
"careful not to access it)."
msgstr ""
"Para usar esto, todo lo que necesitas hacer es enganchar el flujo de cálculo "
"antes de que la solicitud comience a consumir datos. (Por ejemplo: Ten cuidado "
"al acceder a ``request.form`` o cualquier cosa de esa naturaleza.  "
"``before_request_handlers`` por ejemplo hay que tener cuidado de no acceder a "
"él)."

#: ../../patterns/requestchecksum.rst:46
msgid "Example usage::"
msgstr "Ejemplo de uso::"

#: ../../patterns/singlepageapplications.rst:2
msgid "Single-Page Applications"
msgstr "Aplicaciones de una sola página"

#: ../../patterns/singlepageapplications.rst:4
msgid ""
"Flask can be used to serve Single-Page Applications (SPA) by placing static "
"files produced by your frontend framework in a subfolder inside of your "
"project. You will also need to create a catch-all endpoint that routes all "
"requests to your SPA."
msgstr ""
"Flask se puede utilizar para servir aplicaciones de una sola página (SPA) "
"mediante la colocación de archivos estáticos producidos por su marco frontend "
"en una subcarpeta dentro de su proyecto. También tendrá que crear un punto "
"final que dirija todas las solicitudes a su SPA."

#: ../../patterns/singlepageapplications.rst:9
msgid "The following example demonstrates how to serve an SPA along with an API::"
msgstr "El siguiente ejemplo demuestra cómo servir una SPA junto con una API::"

#: ../../patterns/sqlalchemy.rst:2
msgid "SQLAlchemy in Flask"
msgstr "SQLAlchemy en Flask"

#: ../../patterns/sqlalchemy.rst:4
msgid ""
"Many people prefer `SQLAlchemy`_ for database access.  In this case it's "
"encouraged to use a package instead of a module for your flask application and "
"drop the models into a separate module (:doc:`packages`). While that is not "
"necessary, it makes a lot of sense."
msgstr ""
"Mucha gente prefiere `SQLAlchemy`_ para el acceso a la base de datos. En este "
"caso se recomienda utilizar un paquete en lugar de un módulo para su aplicación "
"flask y dejar los modelos en un módulo separado (:doc:`packages`). Aunque no es "
"necesario, tiene mucho sentido."

#: ../../patterns/sqlalchemy.rst:9
msgid ""
"There are four very common ways to use SQLAlchemy.  I will outline each of them "
"here:"
msgstr ""
"Hay cuatro formas muy comunes de utilizar SQLAlchemy. A continuación, "
"describiré cada una de ellas:"

#: ../../patterns/sqlalchemy.rst:13
msgid "Flask-SQLAlchemy Extension"
msgstr "Extensión Flask-SQLAlchemy"

#: ../../patterns/sqlalchemy.rst:15
msgid ""
"Because SQLAlchemy is a common database abstraction layer and object relational "
"mapper that requires a little bit of configuration effort, there is a Flask "
"extension that handles that for you.  This is recommended if you want to get "
"started quickly."
msgstr ""
"Debido a que SQLAlchemy es una capa de abstracción de base de datos común y un "
"mapeador relacional de objetos que requiere un poco de esfuerzo de "
"configuración, hay una extensión de Flask que maneja eso por ti. Esto se "
"recomienda si quieres empezar rápidamente."

#: ../../patterns/sqlalchemy.rst:20
msgid ""
"You can download `Flask-SQLAlchemy`_ from `PyPI <https://pypi.org/project/Flask-"
"SQLAlchemy/>`_."
msgstr ""
"Debido a que SQLAlchemy es una capa de abstracción de base de datos común y un "
"mapeador relacional de objetos que requiere un poco de esfuerzo de "
"configuración, hay una extensión de Flask que maneja eso por ti. Esto se "
"recomienda si quieres empezar rápidamente."

#: ../../patterns/sqlalchemy.rst:27
msgid "Declarative"
msgstr "Declarativo"

#: ../../patterns/sqlalchemy.rst:29
msgid ""
"The declarative extension in SQLAlchemy is the most recent method of using "
"SQLAlchemy.  It allows you to define tables and models in one go, similar to "
"how Django works.  In addition to the following text I recommend the official "
"documentation on the `declarative`_ extension."
msgstr ""
"La extensión declarativa en SQLAlchemy es el método más reciente de utilizar "
"SQLAlchemy. Permite definir tablas y modelos de una sola vez, de forma similar "
"a como funciona Django. Además del siguiente texto recomiendo la documentación "
"oficial sobre la extensión `declarative`_."

#: ../../patterns/sqlalchemy.rst:34
msgid "Here's the example :file:`database.py` module for your application::"
msgstr "Aquí está el módulo de ejemplo :file:`database.py` para su aplicación::"

#: ../../patterns/sqlalchemy.rst:54
msgid ""
"To define your models, just subclass the `Base` class that was created by the "
"code above.  If you are wondering why we don't have to care about threads here "
"(like we did in the SQLite3 example above with the :data:`~flask.g` object): "
"that's because SQLAlchemy does that for us already with the :class:`~sqlalchemy."
"orm.scoped_session`."
msgstr ""
"Para definir tus modelos, sólo tienes que subclasificar la clase `Base` que fue "
"creada por el código anterior. Si te preguntas por qué no tenemos que "
"preocuparnos de los hilos aquí (como hicimos en el ejemplo de SQLite3 anterior "
"con el objeto :data:`~flask.g`): es porque SQLAlchemy ya lo hace por nosotros "
"con la clase :`~sqlalchemy.orm.scoped_session`."

#: ../../patterns/sqlalchemy.rst:60
msgid ""
"To use SQLAlchemy in a declarative way with your application, you just have to "
"put the following code into your application module.  Flask will automatically "
"remove database sessions at the end of the request or when the application "
"shuts down::"
msgstr ""
"Para utilizar SQLAlchemy de forma declarativa con tu aplicación, sólo tienes "
"que poner el siguiente código en tu módulo de aplicación. Flask eliminará "
"automáticamente las sesiones de la base de datos al final de la solicitud o "
"cuando la aplicación se cierre::"

#: ../../patterns/sqlalchemy.rst:71
msgid "Here is an example model (put this into :file:`models.py`, e.g.)::"
msgstr "He aquí un modelo de ejemplo (ponlo en :file:`models.py`, por ejemplo)::"

#: ../../patterns/sqlalchemy.rst:89
msgid "To create the database you can use the `init_db` function:"
msgstr "Para crear la base de datos puedes utilizar la función `init_db`:"

#: ../../patterns/sqlalchemy.rst:94
msgid "You can insert entries into the database like this:"
msgstr "Puede insertar entradas en la base de datos de la siguiente manera:"

#: ../../patterns/sqlalchemy.rst:102
msgid "Querying is simple as well:"
msgstr "La consulta también es sencilla:"

#: ../../patterns/sqlalchemy.rst:113
msgid "Manual Object Relational Mapping"
msgstr "Mapeo relacional de objetos manual"

#: ../../patterns/sqlalchemy.rst:115
msgid ""
"Manual object relational mapping has a few upsides and a few downsides versus "
"the declarative approach from above.  The main difference is that you define "
"tables and classes separately and map them together.  It's more flexible but a "
"little more to type.  In general it works like the declarative approach, so "
"make sure to also split up your application into multiple modules in a package."
msgstr ""
"El mapeo relacional de objetos manual tiene algunas ventajas y algunas "
"desventajas frente al enfoque declarativo anterior. La principal diferencia es "
"que se definen tablas y clases por separado y se mapean juntas. Es más "
"flexible, pero un poco más complicado de escribir. En general, funciona como el "
"enfoque declarativo, así que asegúrese de dividir también su aplicación en "
"varios módulos en un paquete."

#: ../../patterns/sqlalchemy.rst:122
msgid "Here is an example :file:`database.py` module for your application::"
msgstr "Aquí hay un ejemplo de módulo :file:`database.py` para tu aplicación::"

#: ../../patterns/sqlalchemy.rst:135
msgid ""
"As in the declarative approach, you need to close the session after each "
"request or application context shutdown.  Put this into your application "
"module::"
msgstr ""
"Al igual que en el enfoque declarativo, es necesario cerrar la sesión después "
"de cada solicitud o cierre del contexto de la aplicación. Ponga esto en su "
"módulo de aplicación::"

#: ../../patterns/sqlalchemy.rst:145
msgid "Here is an example table and model (put this into :file:`models.py`)::"
msgstr "He aquí una tabla y un modelo de ejemplo (ponlo en :file:`models.py`)::"

#: ../../patterns/sqlalchemy.rst:168
msgid "Querying and inserting works exactly the same as in the example above."
msgstr ""
"La consulta y la inserción funcionan exactamente igual que en el ejemplo "
"anterior."

#: ../../patterns/sqlalchemy.rst:172
msgid "SQL Abstraction Layer"
msgstr "Capa de abstracción SQL"

#: ../../patterns/sqlalchemy.rst:174
msgid ""
"If you just want to use the database system (and SQL) abstraction layer you "
"basically only need the engine::"
msgstr ""
"Si sólo quieres utilizar la capa de abstracción del sistema de base de datos (y "
"SQL) básicamente sólo necesitas el motor::"

#: ../../patterns/sqlalchemy.rst:182
msgid ""
"Then you can either declare the tables in your code like in the examples above, "
"or automatically load them::"
msgstr ""
"Entonces puedes declarar las tablas en tu código como en los ejemplos "
"anteriores, o cargarlas automáticamente::"

#: ../../patterns/sqlalchemy.rst:189
msgid ""
"To insert data you can use the `insert` method.  We have to get a connection "
"first so that we can use a transaction:"
msgstr ""
"Para insertar datos se puede utilizar el método `insert`.  Primero tenemos que "
"obtener una conexión para poder utilizar una transacción:"

#: ../../patterns/sqlalchemy.rst:195
msgid "SQLAlchemy will automatically commit for us."
msgstr "SQLAlchemy se compromete automáticamente por nosotros."

#: ../../patterns/sqlalchemy.rst:197
msgid "To query your database, you use the engine directly or use a connection:"
msgstr ""
"Para consultar la base de datos, se utiliza el motor directamente o se utiliza "
"una conexión:"

#: ../../patterns/sqlalchemy.rst:202
msgid "These results are also dict-like tuples:"
msgstr "Estos resultados también son tuplas de tipo dictado:"

#: ../../patterns/sqlalchemy.rst:208
msgid ""
"You can also pass strings of SQL statements to the :meth:`~sqlalchemy.engine."
"base.Connection.execute` method:"
msgstr ""
"También puedes pasar cadenas de sentencias SQL al método :meth:`~sqlalchemy."
"engine.base.Connection.execute`:"

#: ../../patterns/sqlalchemy.rst:214
msgid ""
"For more information about SQLAlchemy, head over to the `website <https://www."
"sqlalchemy.org/>`_."
msgstr ""
"Para obtener más información sobre SQLAlchemy, diríjase al `sitio web <https://"
"www.sqlalchemy.org/>`_."

#: ../../patterns/sqlite3.rst:2
msgid "Using SQLite 3 with Flask"
msgstr "Uso de SQLite 3 con Flask"

#: ../../patterns/sqlite3.rst:4
msgid ""
"In Flask you can easily implement the opening of database connections on demand "
"and closing them when the context dies (usually at the end of the request)."
msgstr ""
"En Flask puedes implementar fácilmente la apertura de conexiones a la base de "
"datos bajo demanda y el cierre de las mismas cuando el contexto muere "
"(normalmente al final de la petición)."

#: ../../patterns/sqlite3.rst:8
msgid "Here is a simple example of how you can use SQLite 3 with Flask::"
msgstr ""
"Aquí hay un ejemplo sencillo de cómo se puede utilizar SQLite 3 con Flask::"

#: ../../patterns/sqlite3.rst:27
msgid ""
"Now, to use the database, the application must either have an active "
"application context (which is always true if there is a request in flight) or "
"create an application context itself.  At that point the ``get_db`` function "
"can be used to get the current database connection.  Whenever the context is "
"destroyed the database connection will be terminated."
msgstr ""
"Ahora, para usar la base de datos, la aplicación debe tener un contexto de "
"aplicación activo (que siempre es cierto si hay una petición en vuelo) o crear "
"un contexto de aplicación por sí misma. En ese momento se puede utilizar la "
"función ``get_db`` para obtener la conexión a la base de datos actual. Siempre "
"que el contexto se destruya, la conexión a la base de datos se terminará."

#: ../../patterns/sqlite3.rst:33
msgid ""
"Note: if you use Flask 0.9 or older you need to use ``flask._app_ctx_stack."
"top`` instead of ``g`` as the :data:`flask.g` object was bound to the request "
"and not application context."
msgstr ""
"Nota: si usas Flask 0.9 o anterior debes usar ``flask._app_ctx_stack.top`` en "
"lugar de ``g`` ya que el objeto :data:`flask.g` estaba ligado a la petición y "
"no al contexto de la aplicación."

#: ../../patterns/sqlite3.rst:37
msgid "Example::"
msgstr "Ejemplo::"

#: ../../patterns/sqlite3.rst:47
msgid ""
"Please keep in mind that the teardown request and appcontext functions are "
"always executed, even if a before-request handler failed or was never "
"executed.  Because of this we have to make sure here that the database is there "
"before we close it."
msgstr ""
"Ten en cuenta que las funciones teardown request y appcontext se ejecutan "
"siempre, incluso si un manejador before-request falló o nunca se ejecutó. "
"Debido a esto tenemos que asegurarnos aquí de que la base de datos está ahí "
"antes de cerrarla."

#: ../../patterns/sqlite3.rst:53
msgid "Connect on Demand"
msgstr "Conectar a la carta"

#: ../../patterns/sqlite3.rst:55
msgid ""
"The upside of this approach (connecting on first use) is that this will only "
"open the connection if truly necessary.  If you want to use this code outside a "
"request context you can use it in a Python shell by opening the application "
"context by hand::"
msgstr ""
"La ventaja de este enfoque (conectar en el primer uso) es que esto sólo abrirá "
"la conexión si es realmente necesario.  Si quieres usar este código fuera de un "
"contexto de petición puedes usarlo en un shell de Python abriendo el contexto "
"de aplicación a mano::"

#: ../../patterns/sqlite3.rst:65
msgid "Easy Querying"
msgstr "Consulta fácil"

#: ../../patterns/sqlite3.rst:67
msgid ""
"Now in each request handling function you can access `get_db()` to get the "
"current open database connection.  To simplify working with SQLite, a row "
"factory function is useful.  It is executed for every result returned from the "
"database to convert the result.  For instance, in order to get dictionaries "
"instead of tuples, this could be inserted into the ``get_db`` function we "
"created above::"
msgstr ""
"Ahora en cada función de manejo de peticiones puedes acceder a `get_db()` para "
"obtener la conexión actual de la base de datos abierta. Para simplificar el "
"trabajo con SQLite, es útil una función de fábrica de filas. Se ejecuta para "
"cada resultado devuelto por la base de datos para convertir el resultado. Por "
"ejemplo, para obtener diccionarios en lugar de tuplas, esto podría ser "
"insertado en la función ``get_db`` que creamos anteriormente::"

#: ../../patterns/sqlite3.rst:80
msgid ""
"This will make the sqlite3 module return dicts for this database connection, "
"which are much nicer to deal with. Even more simply, we could place this in "
"``get_db`` instead::"
msgstr ""
"Esto hará que el módulo sqlite3 devuelva dicts para esta conexión de base de "
"datos, que son mucho más agradables de manejar. Incluso más simple, podríamos "
"colocar esto en ``get_db`` en su lugar::"

#: ../../patterns/sqlite3.rst:84
msgid ""
"This would use Row objects rather than dicts to return the results of queries. "
"These are ``namedtuple`` s, so we can access them either by index or by key. "
"For example, assuming we have a ``sqlite3.Row`` called ``r`` for the rows "
"``id``, ``FirstName``, ``LastName``, and ``MiddleInitial``::"
msgstr ""
"Esto utilizaría objetos Row en lugar de dicts para devolver los resultados de "
"las consultas. Son ``tuplas con nombre``, por lo que podemos acceder a ellas "
"por índice o por clave. Por ejemplo, suponiendo que tenemos un ``sqlite3.Row`` "
"llamado ``r`` para las filas ``id``, ``FirstName``, ``LastName``, y "
"``MiddleInitial``::"

#: ../../patterns/sqlite3.rst:100
msgid ""
"Additionally, it is a good idea to provide a query function that combines "
"getting the cursor, executing and fetching the results::"
msgstr ""
"Además, es una buena idea proporcionar una función de consulta que combine la "
"obtención del cursor, la ejecución y la obtención de los resultados::"

#: ../../patterns/sqlite3.rst:109
msgid ""
"This handy little function, in combination with a row factory, makes working "
"with the database much more pleasant than it is by just using the raw cursor "
"and connection objects."
msgstr ""
"Esta pequeña y práctica función, en combinación con una fábrica de filas, hace "
"que el trabajo con la base de datos sea mucho más agradable de lo que es "
"utilizando sólo los objetos de cursor y conexión en bruto."

#: ../../patterns/sqlite3.rst:113
msgid "Here is how you can use it::"
msgstr "Así es como se puede utilizar::"

#: ../../patterns/sqlite3.rst:118
msgid "Or if you just want a single result::"
msgstr "O si sólo quieres un único resultado::"

#: ../../patterns/sqlite3.rst:127
msgid ""
"To pass variable parts to the SQL statement, use a question mark in the "
"statement and pass in the arguments as a list.  Never directly add them to the "
"SQL statement with string formatting because this makes it possible to attack "
"the application using `SQL Injections <https://en.wikipedia.org/wiki/"
"SQL_injection>`_."
msgstr ""
"Para pasar partes de variables a la sentencia SQL, utilice un signo de "
"interrogación en la sentencia y pase los argumentos como una lista. Nunca los "
"añada directamente a la sentencia SQL con formato de cadena porque esto hace "
"posible atacar la aplicación usando `Inyecciones SQL <https://en.wikipedia.org/"
"wiki/SQL_injection>`_."

#: ../../patterns/sqlite3.rst:134
msgid "Initial Schemas"
msgstr "Esquemas iniciales"

#: ../../patterns/sqlite3.rst:136
msgid ""
"Relational databases need schemas, so applications often ship a `schema.sql` "
"file that creates the database.  It's a good idea to provide a function that "
"creates the database based on that schema.  This function can do that for you::"
msgstr ""
"Las bases de datos relacionales necesitan esquemas, por lo que las aplicaciones "
"suelen enviar un archivo `schema.sql` que crea la base de datos. Es una buena "
"idea proporcionar una función que cree la base de datos basada en ese esquema.  "
"Esta función puede hacerlo por ti::"

#: ../../patterns/sqlite3.rst:148
msgid "You can then create such a database from the Python shell:"
msgstr "A continuación, puede crear dicha base de datos desde el shell de Python:"

#: ../../patterns/streaming.rst:2
msgid "Streaming Contents"
msgstr "Contenidos en streaming"

#: ../../patterns/streaming.rst:4
msgid ""
"Sometimes you want to send an enormous amount of data to the client, much more "
"than you want to keep in memory.  When you are generating the data on the fly "
"though, how do you send that back to the client without the roundtrip to the "
"filesystem?"
msgstr ""
"A veces quieres enviar una enorme cantidad de datos al cliente, mucho más de lo "
"que quieres mantener en la memoria. Sin embargo, cuando estás generando los "
"datos sobre la marcha, ¿Cómo los envías de vuelta al cliente sin el viaje de "
"ida y vuelta al sistema de archivos?"

#: ../../patterns/streaming.rst:9
msgid "The answer is by using generators and direct responses."
msgstr "La respuesta es utilizar generadores y respuestas directas."

#: ../../patterns/streaming.rst:12
msgid "Basic Usage"
msgstr "Uso básico"

#: ../../patterns/streaming.rst:14
msgid ""
"This is a basic view function that generates a lot of CSV data on the fly. The "
"trick is to have an inner function that uses a generator to generate data and "
"to then invoke that function and pass it to a response object::"
msgstr ""
"Esta es una función de vista básica que genera un montón de datos CSV sobre la "
"marcha. El truco es tener una función interna que utilice un generador para "
"generar los datos y luego invocar esa función y pasarla a un objeto de "
"respuesta::"

#: ../../patterns/streaming.rst:25
msgid ""
"Each ``yield`` expression is directly sent to the browser.  Note though that "
"some WSGI middlewares might break streaming, so be careful there in debug "
"environments with profilers and other things you might have enabled."
msgstr ""
"Cada expresión ``yield`` se envía directamente al navegador. Sin embargo, ten "
"en cuenta que algunos middlewares WSGI pueden romper el streaming, así que ten "
"cuidado en entornos de depuración con perfiladores y otras cosas que puedas "
"tener activadas."

#: ../../patterns/streaming.rst:30
msgid "Streaming from Templates"
msgstr "Streaming desde plantillas"

#: ../../patterns/streaming.rst:32
msgid ""
"The Jinja2 template engine also supports rendering templates piece by piece.  "
"This functionality is not directly exposed by Flask because it is quite "
"uncommon, but you can easily do it yourself::"
msgstr ""
"El motor de plantillas de Jinja2 también soporta el renderizado de plantillas "
"pieza a pieza. Esta funcionalidad no está expuesta directamente por Flask "
"porque es bastante infrecuente, pero puedes hacerlo fácilmente tú mismo::"

#: ../../patterns/streaming.rst:48
msgid ""
"The trick here is to get the template object from the Jinja2 environment on the "
"application and to call :meth:`~jinja2.Template.stream` instead of :meth:"
"`~jinja2.Template.render` which returns a stream object instead of a string.  "
"Since we're bypassing the Flask template render functions and using the "
"template object itself we have to make sure to update the render context "
"ourselves by calling :meth:`~flask.Flask.update_template_context`. The template "
"is then evaluated as the stream is iterated over.  Since each time you do a "
"yield the server will flush the content to the client you might want to buffer "
"up a few items in the template which you can do with ``rv."
"enable_buffering(size)``.  ``5`` is a sane default."
msgstr ""
"El truco aquí es obtener el objeto plantilla del entorno Jinja2 en la "
"aplicación y llamar a :meth:`~jinja2.Template.stream` en lugar de :meth:"
"`~jinja2.Template.render` que devuelve un objeto stream en lugar de una cadena. "
"Dado que estamos obviando las funciones de renderizado de plantillas de Flask y "
"utilizando el propio objeto plantilla, tenemos que asegurarnos de actualizar el "
"contexto de renderizado nosotros mismos llamando a :meth:`~flask.Flask."
"update_template_context`."

#: ../../patterns/streaming.rst:60
msgid "Streaming with Context"
msgstr "Streaming con Contexto"

#: ../../patterns/streaming.rst:64
msgid ""
"Note that when you stream data, the request context is already gone the moment "
"the function executes.  Flask 0.9 provides you with a helper that can keep the "
"request context around during the execution of the generator::"
msgstr ""
"Ten en cuenta que cuando transmites datos, el contexto de la petición ya ha "
"desaparecido en el momento en que se ejecuta la función. Flask 0.9 le "
"proporciona un ayudante que puede mantener el contexto de la solicitud durante "
"la ejecución del generador::"

#: ../../patterns/streaming.rst:79
msgid ""
"Without the :func:`~flask.stream_with_context` function you would get a :class:"
"`RuntimeError` at that point."
msgstr ""
"Sin la función :func:`~flask.stream_with_context` obtendrías un :class:"
"`RuntimeError` en ese punto."

#: ../../patterns/subclassing.rst:2
msgid "Subclassing Flask"
msgstr "Subclases en Flask"

#: ../../patterns/subclassing.rst:4
msgid "The :class:`~flask.Flask` class is designed for subclassing."
msgstr "La clase :class:`~flask.Flask` está diseñada para subclases."

#: ../../patterns/subclassing.rst:6
msgid ""
"For example, you may want to override how request parameters are handled to "
"preserve their order::"
msgstr ""
"Por ejemplo, puede querer anular la forma en que se manejan los parámetros de "
"la solicitud para preservar su orden::"

#: ../../patterns/subclassing.rst:17
msgid ""
"This is the recommended approach for overriding or augmenting Flask's internal "
"functionality."
msgstr ""
"Este es el enfoque recomendado para anular o aumentar la funcionalidad interna "
"de Flask."

#: ../../patterns/templateinheritance.rst:2
msgid "Template Inheritance"
msgstr "Herencia de plantillas"

#: ../../patterns/templateinheritance.rst:4
msgid ""
"The most powerful part of Jinja is template inheritance. Template inheritance "
"allows you to build a base \"skeleton\" template that contains all the common "
"elements of your site and defines **blocks** that child templates can override."
msgstr ""
"La parte más poderosa de Jinja es la herencia de plantillas. La herencia de "
"plantillas te permite construir una plantilla base \"esqueleto\" que contiene "
"todos los elementos comunes de tu sitio y define **bloques** que las plantillas "
"hijas pueden sobrescribir."

#: ../../patterns/templateinheritance.rst:8
msgid ""
"Sounds complicated but is very basic. It's easiest to understand it by starting "
"with an example."
msgstr ""
"Suena complicado pero es muy básico. Lo más fácil es entenderlo empezando con "
"un ejemplo."

#: ../../patterns/templateinheritance.rst:13
msgid "Base Template"
msgstr "Plantilla base"

#: ../../patterns/templateinheritance.rst:15
msgid ""
"This template, which we'll call :file:`layout.html`, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the job "
"of \"child\" templates to fill the empty blocks with content:"
msgstr ""
"Esta plantilla, a la que llamaremos :file:`layout.html`, define un simple "
"documento esqueleto de HTML que podría utilizar para una simple página de dos "
"columnas. El trabajo de las plantillas \"hijas\" es llenar los bloques vacíos "
"con contenido:"

#: ../../patterns/templateinheritance.rst:39
msgid ""
"In this example, the ``{% block %}`` tags define four blocks that child "
"templates can fill in. All the `block` tag does is tell the template engine "
"that a child template may override those portions of the template."
msgstr ""
"En este ejemplo, las etiquetas ``{% block %}`` definen cuatro bloques que las "
"plantillas hijas pueden rellenar. Todo lo que hace la etiqueta `block` es "
"indicar al motor de la plantilla que una plantilla hija puede anular esas "
"partes de la plantilla."

#: ../../patterns/templateinheritance.rst:44
msgid "Child Template"
msgstr "Plantilla hija"

#: ../../patterns/templateinheritance.rst:46
msgid "A child template might look like this:"
msgstr "Una plantilla hija podría tener el siguiente aspecto:"

#: ../../patterns/templateinheritance.rst:64
#, python-format
msgid ""
"The ``{% extends %}`` tag is the key here. It tells the template engine that "
"this template \"extends\" another template.  When the template system evaluates "
"this template, first it locates the parent.  The extends tag must be the first "
"tag in the template.  To render the contents of a block defined in the parent "
"template, use ``{{ super() }}``."
msgstr ""
"La etiqueta ``{% extends %}`` es la clave aquí. Indica al motor de plantillas "
"que esta plantilla \"extiende\" otra plantilla. Cuando el sistema de plantillas "
"evalúa esta plantilla, primero localiza el padre. La etiqueta extends debe ser "
"la primera etiqueta de la plantilla. Para mostrar el contenido de un bloque "
"definido en la plantilla principal, utilice ``{{ super() }}``."

#: ../../patterns/urlprocessors.rst:2
msgid "Using URL Processors"
msgstr "Uso de procesadores de URL"

#: ../../patterns/urlprocessors.rst:6
msgid ""
"Flask 0.7 introduces the concept of URL processors.  The idea is that you might "
"have a bunch of resources with common parts in the URL that you don't always "
"explicitly want to provide.  For instance you might have a bunch of URLs that "
"have the language code in it but you don't want to have to handle it in every "
"single function yourself."
msgstr ""
"Flask 0.7 introduce el concepto de procesadores de URL. La idea es que puedes "
"tener un montón de recursos con partes comunes en la URL que no siempre quieres "
"proporcionar explícitamente. Por ejemplo, puedes tener un montón de URLs que "
"tienen el código del lenguaje en él, pero no quieres tener que manejarlo tú "
"mismo en cada función."

#: ../../patterns/urlprocessors.rst:12
msgid ""
"URL processors are especially helpful when combined with blueprints.  We will "
"handle both application specific URL processors here as well as blueprint "
"specifics."
msgstr ""
"Los procesadores de URL son especialmente útiles cuando se combinan con "
"blueprints. Aquí trataremos tanto los procesadores de URL específicos de la "
"aplicación como los específicos de los planos."

#: ../../patterns/urlprocessors.rst:17
msgid "Internationalized Application URLs"
msgstr "URLs de aplicaciones internacionalizadas"

#: ../../patterns/urlprocessors.rst:19
msgid "Consider an application like this::"
msgstr "Considere una aplicación como esta::"

#: ../../patterns/urlprocessors.rst:35
msgid ""
"This is an awful lot of repetition as you have to handle the language code "
"setting on the :data:`~flask.g` object yourself in every single function. Sure, "
"a decorator could be used to simplify this, but if you want to generate URLs "
"from one function to another you would have to still provide the language code "
"explicitly which can be annoying."
msgstr ""
"Esto es un montón de repeticiones, ya que tienes que manejar la configuración "
"del código de idioma en el objeto :data:`~flask.g` tú mismo en cada función. "
"Por supuesto, se podría utilizar un decorador para simplificar esto, pero si "
"quieres generar URLs de una función a otra tendrías que seguir proporcionando "
"el código de idioma explícitamente, lo que puede ser molesto."

#: ../../patterns/urlprocessors.rst:41
msgid ""
"For the latter, this is where :func:`~flask.Flask.url_defaults` functions come "
"in.  They can automatically inject values into a call to :func:`~flask."
"url_for`.  The code below checks if the language code is not yet in the "
"dictionary of URL values and if the endpoint wants a value named "
"``'lang_code'``::"
msgstr ""
"Para esto último, es donde entran las funciones :func:`~flask.Flask."
"url_defaults`. Pueden inyectar automáticamente valores en una llamada a :func:"
"`~flask.url_for`. El código siguiente comprueba si el código de idioma no está "
"todavía en el diccionario de valores de URL y si el endpoint quiere un valor "
"llamado ``'lang_code``::"

#: ../../patterns/urlprocessors.rst:54
msgid ""
"The method :meth:`~werkzeug.routing.Map.is_endpoint_expecting` of the URL map "
"can be used to figure out if it would make sense to provide a language code for "
"the given endpoint."
msgstr ""
"El método :meth:`~werkzeug.routing.Map.is_endpoint_expecting` del mapa URL "
"puede utilizarse para averiguar si tiene sentido proporcionar un código de "
"idioma para el punto final dado."

#: ../../patterns/urlprocessors.rst:58
msgid ""
"The reverse of that function are :meth:`~flask.Flask.url_value_preprocessor`"
"\\s.  They are executed right after the request was matched and can execute "
"code based on the URL values.  The idea is that they pull information out of "
"the values dictionary and put it somewhere else::"
msgstr ""
"El reverso de esa función son los :meth:`~flask.Flask.url_value_preprocessor`.  "
"Se ejecutan justo después de que la solicitud haya sido emparejada y pueden "
"ejecutar código basado en los valores de la URL. La idea es que saquen "
"información del diccionario de valores y la pongan en otro lugar::"

#: ../../patterns/urlprocessors.rst:68
msgid ""
"That way you no longer have to do the `lang_code` assignment to :data:`~flask."
"g` in every function.  You can further improve that by writing your own "
"decorator that prefixes URLs with the language code, but the more beautiful "
"solution is using a blueprint.  Once the ``'lang_code'`` is popped from the "
"values dictionary and it will no longer be forwarded to the view function "
"reducing the code to this::"
msgstr ""
"De esta manera ya no tienes que hacer la asignación de `lang_code` a :data:"
"`~flask.g` en cada función. Puedes mejorar esto escribiendo tu propio decorador "
"que anteponga a las URLs el código de idioma, pero la solución más bonita es "
"usar un blueprint. Una vez que el ``'lang_code'`` es sacado del diccionario de "
"valores y ya no será reenviado a la función de la vista reduciendo el código a "
"esto::"

#: ../../patterns/urlprocessors.rst:99
msgid "Internationalized Blueprint URLs"
msgstr "URLs de Blueprint internacionalizadas"

#: ../../patterns/urlprocessors.rst:101
msgid ""
"Because blueprints can automatically prefix all URLs with a common string it's "
"easy to automatically do that for every function.  Furthermore blueprints can "
"have per-blueprint URL processors which removes a whole lot of logic from the :"
"meth:`~flask.Flask.url_defaults` function because it no longer has to check if "
"the URL is really interested in a ``'lang_code'`` parameter::"
msgstr ""
"Debido a que los blueprints pueden anteponer automáticamente todas las URLs con "
"una cadena común, es fácil hacerlo automáticamente para cada función. Además, "
"los blueprints pueden tener procesadores de URL por blueprint, lo que elimina "
"un montón de lógica de la función :meth:`~flask.Flask.url_defaults` porque ya "
"no tiene que comprobar si la URL está realmente interesada en un parámetro "
"``'lang_code'``::"

#: ../../patterns/viewdecorators.rst:2
msgid "View Decorators"
msgstr "Ver decoradores"

#: ../../patterns/viewdecorators.rst:4
msgid ""
"Python has a really interesting feature called function decorators.  This "
"allows some really neat things for web applications.  Because each view in "
"Flask is a function, decorators can be used to inject additional functionality "
"to one or more functions.  The :meth:`~flask.Flask.route` decorator is the one "
"you probably used already.  But there are use cases for implementing your own "
"decorator.  For instance, imagine you have a view that should only be used by "
"people that are logged in.  If a user goes to the site and is not logged in, "
"they should be redirected to the login page.  This is a good example of a use "
"case where a decorator is an excellent solution."
msgstr ""
"Python tiene una característica muy interesante llamada decoradores de "
"funciones. Esto permite algunas cosas realmente asombrosas para las "
"aplicaciones web. Dado que cada vista en Flask es una función, los decoradores "
"se pueden utilizar para inyectar funcionalidad adicional a una o más funciones. "
"El decorador :meth:`~flask.Flask.route` es el que probablemente ya hayas "
"utilizado."

#: ../../patterns/viewdecorators.rst:16
msgid "Login Required Decorator"
msgstr "Decorador de inicio de sesión requerido"

#: ../../patterns/viewdecorators.rst:18
msgid ""
"So let's implement such a decorator.  A decorator is a function that wraps and "
"replaces another function.  Since the original function is replaced, you need "
"to remember to copy the original function's information to the new function.  "
"Use :func:`functools.wraps` to handle this for you."
msgstr ""
"Así que vamos a implementar tal decorador. Un decorador es una función que "
"envuelve y reemplaza a otra función. Como la función original es reemplazada, "
"necesitas recordar copiar la información de la función original a la nueva "
"función. Usa :func:`functools.wraps` para manejar esto por ti."

#: ../../patterns/viewdecorators.rst:23
msgid ""
"This example assumes that the login page is called ``'login'`` and that the "
"current user is stored in ``g.user`` and is ``None`` if there is no-one logged "
"in. ::"
msgstr ""
"Este ejemplo asume que la página de inicio de sesión se llama ``inicio de "
"sesión`` y que el usuario actual se almacena en ``g.user`` y es ``None`` si no "
"hay nadie conectado. ::"

#: ../../patterns/viewdecorators.rst:38
msgid ""
"To use the decorator, apply it as innermost decorator to a view function. When "
"applying further decorators, always remember that the :meth:`~flask.Flask."
"route` decorator is the outermost. ::"
msgstr ""
"Para utilizar el decorador, aplíquelo como decorador más interno a una función "
"de la vista. Al aplicar otros decoradores, recuerde siempre que el decorador :"
"meth:`~flask.Flask.route` es el más externo. ::"

#: ../../patterns/viewdecorators.rst:48
msgid ""
"The ``next`` value will exist in ``request.args`` after a ``GET`` request for "
"the login page.  You'll have to pass it along when sending the ``POST`` request "
"from the login form.  You can do this with a hidden input tag, then retrieve it "
"from ``request.form`` when logging the user in. ::"
msgstr ""
"El valor ``next`` existirá en ``request.args`` después de una petición ``GET`` "
"para la página de acceso. Tendrás que pasarlo cuando envíes la petición "
"``POST`` desde el formulario de acceso. Puedes hacer esto con una etiqueta de "
"entrada oculta, y luego recuperarla de ``request.form`` cuando el usuario se "
"registre. ::"

#: ../../patterns/viewdecorators.rst:57
msgid "Caching Decorator"
msgstr "Decoradores y caché"

#: ../../patterns/viewdecorators.rst:59
msgid ""
"Imagine you have a view function that does an expensive calculation and because "
"of that you would like to cache the generated results for a certain amount of "
"time.  A decorator would be nice for that.  We're assuming you have set up a "
"cache like mentioned in :doc:`caching`."
msgstr ""
"Imagina que tienes una función de la vista que realiza un cálculo costoso y por "
"ello te gustaría almacenar en caché los resultados generados durante un tiempo "
"determinado. Un decorador estaría bien para eso. Suponemos que has configurado "
"una caché como la mencionada en :doc:`caching`."

#: ../../patterns/viewdecorators.rst:64
msgid ""
"Here is an example cache function.  It generates the cache key from a specific "
"prefix (actually a format string) and the current path of the request.  Notice "
"that we are using a function that first creates the decorator that then "
"decorates the function.  Sounds awful? Unfortunately it is a little bit more "
"complex, but the code should still be straightforward to read."
msgstr ""
"He aquí un ejemplo de función de caché. Genera la clave de la caché a partir de "
"un prefijo específico (en realidad una cadena de formato) y la ruta actual de "
"la solicitud. Fíjate que estamos usando una función que primero crea el "
"decorador que luego decora la función. ¿Suena horrible? Desgraciadamente es un "
"poco más complejo, pero el código debería seguir siendo sencillo de leer."

#: ../../patterns/viewdecorators.rst:71
msgid "The decorated function will then work as follows"
msgstr "La función decorada funcionará entonces de la siguiente manera"

#: ../../patterns/viewdecorators.rst:73
msgid ""
"get the unique cache key for the current request based on the current path."
msgstr ""
"obtener la clave de caché única para la solicitud actual basada en la ruta "
"actual."

#: ../../patterns/viewdecorators.rst:75
msgid ""
"get the value for that key from the cache. If the cache returned something we "
"will return that value."
msgstr ""
"obtenga el valor de esa clave de la caché. Si la caché devolvió algo, "
"devolveremos ese valor."

#: ../../patterns/viewdecorators.rst:77
msgid ""
"otherwise the original function is called and the return value is stored in the "
"cache for the timeout provided (by default 5 minutes)."
msgstr ""
"en caso contrario, se llama a la función original y el valor devuelto se "
"almacena en la caché durante el tiempo de espera previsto (por defecto, 5 "
"minutos)."

#: ../../patterns/viewdecorators.rst:80
msgid "Here the code::"
msgstr "Aquí el código::"

#: ../../patterns/viewdecorators.rst:99
msgid ""
"Notice that this assumes an instantiated ``cache`` object is available, see :"
"doc:`caching`."
msgstr ""
"Tenga en cuenta que esto asume que un objeto ``cache`` instanciado está "
"disponible, ver :doc:`caching`."

#: ../../patterns/viewdecorators.rst:104
msgid "Templating Decorator"
msgstr "Decorador de plantillas"

#: ../../patterns/viewdecorators.rst:106
msgid ""
"A common pattern invented by the TurboGears guys a while back is a templating "
"decorator.  The idea of that decorator is that you return a dictionary with the "
"values passed to the template from the view function and the template is "
"automatically rendered.  With that, the following three examples do exactly the "
"same::"
msgstr ""
"Un patrón común inventado por los chicos de TurboGears hace un tiempo es un "
"decorador de plantillas. La idea de ese decorador es que devuelve un "
"diccionario con los valores pasados a la plantilla desde la función de vista y "
"la plantilla se renderiza automáticamente. Con eso, los siguientes tres "
"ejemplos hacen exactamente lo mismo::"

#: ../../patterns/viewdecorators.rst:126
msgid ""
"As you can see, if no template name is provided it will use the endpoint of the "
"URL map with dots converted to slashes + ``'.html'``.  Otherwise the provided "
"template name is used.  When the decorated function returns, the dictionary "
"returned is passed to the template rendering function.  If ``None`` is "
"returned, an empty dictionary is assumed, if something else than a dictionary "
"is returned we return it from the function unchanged.  That way you can still "
"use the redirect function or return simple strings."
msgstr ""
"Como puede ver, si no se proporciona un nombre de plantilla se utilizará el "
"punto final del mapa de la URL con los puntos convertidos en barras inclinadas "
"+ ``'.html'``. En caso contrario, se utilizará el nombre de la plantilla "
"proporcionada. Cuando la función decorada devuelve, el diccionario devuelto se "
"pasa a la función de renderización de la plantilla. Si se devuelve ``None``, se "
"asume un diccionario vacío, si se devuelve algo más que un diccionario lo "
"devolvemos desde la función sin cambios. De este modo, se puede seguir "
"utilizando la función de redirección o devolver cadenas simples."

#: ../../patterns/viewdecorators.rst:134
msgid "Here is the code for that decorator::"
msgstr "Aquí está el código para ese decorador::"

#: ../../patterns/viewdecorators.rst:157
msgid "Endpoint Decorator"
msgstr "Decorador endpoint"

#: ../../patterns/viewdecorators.rst:159
msgid ""
"When you want to use the werkzeug routing system for more flexibility you need "
"to map the endpoint as defined in the :class:`~werkzeug.routing.Rule` to a view "
"function. This is possible with this decorator. For example::"
msgstr ""
"Cuando quieras utilizar el sistema de enrutamiento de werkzeug para tener más "
"flexibilidad, necesitas mapear el endpoint definido en la :class:`~werkzeug."
"routing.Rule` a una función de la vista. Esto es posible con este decorador. "
"Por ejemplo::"

#: ../../patterns/wtforms.rst:2
msgid "Form Validation with WTForms"
msgstr "Validación de formularios con WTForms"

#: ../../patterns/wtforms.rst:4
msgid ""
"When you have to work with form data submitted by a browser view, code quickly "
"becomes very hard to read.  There are libraries out there designed to make this "
"process easier to manage.  One of them is `WTForms`_ which we will handle "
"here.  If you find yourself in the situation of having many forms, you might "
"want to give it a try."
msgstr ""
"Cuando tienes que trabajar con datos de formularios enviados por una vista del "
"navegador, el código se vuelve rápidamente muy difícil de leer. Existen "
"librerías diseñadas para hacer este proceso más fácil de manejar. Una de ellas "
"es `WTForms`_ que manejaremos aquí. Si te encuentras en la situación de tener "
"muchos formularios, quizás quieras probarla."

#: ../../patterns/wtforms.rst:10
msgid ""
"When you are working with WTForms you have to define your forms as classes "
"first.  I recommend breaking up the application into multiple modules (:doc:"
"`packages`) for that and adding a separate module for the forms."
msgstr ""
"Cuando se trabaja con WTForms hay que definir primero los formularios como "
"clases. Recomiendo dividir la aplicación en múltiples módulos (:doc:`packages`) "
"para ello y añadir un módulo separado para los formularios."

#: ../../patterns/wtforms.rst:15
msgid "Getting the most out of WTForms with an Extension"
msgstr "Sacar el máximo partido a WTForms con una extensión"

#: ../../patterns/wtforms.rst:17
msgid ""
"The `Flask-WTF`_ extension expands on this pattern and adds a few little "
"helpers that make working with forms and Flask more fun.  You can get it from "
"`PyPI <https://pypi.org/project/Flask-WTF/>`_."
msgstr ""
"La extensión `Flask-WTF`_ amplía este patrón y añade algunos pequeños ayudantes "
"que hacen que trabajar con formularios y Flask sea más divertido. Puedes "
"conseguirla en `PyPI <https://pypi.org/project/Flask-WTF/>`_."

#: ../../patterns/wtforms.rst:25
msgid "The Forms"
msgstr "Los formularios"

#: ../../patterns/wtforms.rst:27
msgid "This is an example form for a typical registration page::"
msgstr "Este es un ejemplo de formulario para una página de registro típica::"

#: ../../patterns/wtforms.rst:42
msgid "In the View"
msgstr "En la vista"

#: ../../patterns/wtforms.rst:44
msgid "In the view function, the usage of this form looks like this::"
msgstr "En la función de la vista, el uso de esta forma se ve así::"

#: ../../patterns/wtforms.rst:57
msgid ""
"Notice we're implying that the view is using SQLAlchemy here (:doc:"
"`sqlalchemy`), but that's not a requirement, of course.  Adapt the code as "
"necessary."
msgstr ""
"Fíjate que aquí estamos implicando que la vista está usando SQLAlchemy (:doc:"
"`sqlalchemy`), pero eso no es un requisito, por supuesto. Adapta el código como "
"sea necesario."

#: ../../patterns/wtforms.rst:61
msgid "Things to remember:"
msgstr "Cosas para recordar:"

#: ../../patterns/wtforms.rst:63
msgid ""
"create the form from the request :attr:`~flask.request.form` value if the data "
"is submitted via the HTTP ``POST`` method and :attr:`~flask.request.args` if "
"the data is submitted as ``GET``."
msgstr ""
"crear el formulario a partir del valor de la solicitud :attr:`~flask.request."
"form` si los datos se envían a través del método HTTP ``POST`` y :attr:`~flask."
"request.args` si los datos se envían como ``GET``."

#: ../../patterns/wtforms.rst:66
msgid ""
"to validate the data, call the :func:`~wtforms.form.Form.validate` method, "
"which will return ``True`` if the data validates, ``False`` otherwise."
msgstr ""
"para validar los datos, llama al método :func:`~wtforms.form.Form.validate`, "
"que devolverá ``True`` si los datos se validan, ``False`` en caso contrario."

#: ../../patterns/wtforms.rst:69
msgid "to access individual values from the form, access `form.<NAME>.data`."
msgstr ""
"para acceder a valores individuales del formulario, accede a `form.<NAME>.data`."

#: ../../patterns/wtforms.rst:72
msgid "Forms in Templates"
msgstr "Formularios en plantillas"

#: ../../patterns/wtforms.rst:74
msgid ""
"Now to the template side.  When you pass the form to the templates, you can "
"easily render them there.  Look at the following example template to see how "
"easy this is.  WTForms does half the form generation for us already. To make it "
"even nicer, we can write a macro that renders a field with label and a list of "
"errors if there are any."
msgstr ""
"Ahora al lado de las plantillas. Cuando pasas el formulario a las plantillas, "
"puedes fácilmente renderizarlas allí. Mira la siguiente plantilla de ejemplo "
"para ver lo fácil que es esto. WTForms ya hace la mitad de la generación de "
"formularios por nosotros. Para hacerlo aún más bonito, podemos escribir una "
"macro que renderice un campo con etiqueta y una lista de errores si los hay."

#: ../../patterns/wtforms.rst:80
msgid "Here's an example :file:`_formhelpers.html` template with such a macro:"
msgstr ""
"Aquí hay un ejemplo de plantilla :file:`_formhelpers.html` con dicha macro:"

#: ../../patterns/wtforms.rst:97
msgid ""
"This macro accepts a couple of keyword arguments that are forwarded to WTForm's "
"field function, which renders the field for us.  The keyword arguments will be "
"inserted as HTML attributes.  So, for example, you can call ``render_field(form."
"username, class='username')`` to add a class to the input element.  Note that "
"WTForms returns standard Python strings, so we have to tell Jinja2 that this "
"data is already HTML-escaped with the ``|safe`` filter."
msgstr ""
"Esta macro acepta un par de argumentos de palabras clave que se envían a la "
"función de campo de WTForm, que renderiza el campo por nosotros. Los argumentos "
"de la palabra clave serán insertados como atributos HTML. Así, por ejemplo, "
"puedes llamar a ``render_field(form.username, class='username')`` para añadir "
"una clase al elemento de entrada. Ten en cuenta que WTForms devuelve cadenas "
"estándar de Python, por lo que tenemos que decirle a Jinja2 que estos datos ya "
"están escaneados en HTML con el filtro ``|safe``."

#: ../../patterns/wtforms.rst:105
msgid ""
"Here is the :file:`register.html` template for the function we used above, "
"which takes advantage of the :file:`_formhelpers.html` template:"
msgstr ""
"Aquí está la plantilla :file:`register.html` para la función que usamos arriba, "
"que aprovecha la plantilla :file:`_formhelpers.html`:"

#: ../../patterns/wtforms.rst:122
msgid "For more information about WTForms, head over to the `WTForms website`_."
msgstr ""
"Para obtener más información sobre WTForms, visite el sitio web de `WTForms`_."
