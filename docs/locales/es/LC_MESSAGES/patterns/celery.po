# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 22:02-0400\n"
"PO-Revision-Date: 2022-07-12 19:02-0400\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../patterns/celery.rst:2
msgid "Background Tasks with Celery"
msgstr ""

#: ../../patterns/celery.rst:4
msgid ""
"If your application has a long running task, such as processing some "
"uploaded data or sending email, you don't want to wait for it to finish "
"during a request. Instead, use a task queue to send the necessary data to"
" another process that will run the task in the background while the "
"request returns immediately."
msgstr ""
"Si su aplicación tiene una tarea de larga duración, como el procesamiento"
" de algunos datos cargados o el envío de correo electrónico, no querrá "
"esperar a que termine durante una solicitud. En su lugar, utilice una "
"cola de tareas para enviar los datos necesarios a otro proceso que "
"ejecutará la tarea en segundo plano mientras la solicitud vuelve "
"inmediatamente."

#: ../../patterns/celery.rst:9
msgid ""
"`Celery`_ is a powerful task queue that can be used for simple background"
" tasks as well as complex multi-stage programs and schedules. This guide "
"will show you how to configure Celery using Flask. Read Celery's `First "
"Steps with Celery`_ guide to learn how to use Celery itself."
msgstr ""

#: ../../patterns/celery.rst:17
msgid ""
"The Flask repository contains `an example "
"<https://github.com/pallets/flask/tree/main/examples/celery>`_ based on "
"the information on this page, which also shows how to use JavaScript to "
"submit tasks and poll for progress and results."
msgstr ""

#: ../../patterns/celery.rst:23
msgid "Install"
msgstr "Instalar"

#: ../../patterns/celery.rst:25
msgid "Install Celery from PyPI, for example using pip:"
msgstr ""

#: ../../patterns/celery.rst:33
msgid "Integrate Celery with Flask"
msgstr ""

#: ../../patterns/celery.rst:35
msgid ""
"You can use Celery without any integration with Flask, but it's "
"convenient to configure it through Flask's config, and to let tasks "
"access the Flask application."
msgstr ""

#: ../../patterns/celery.rst:38
msgid ""
"Celery uses similar ideas to Flask, with a ``Celery`` app object that has"
" configuration and registers tasks. While creating a Flask app, use the "
"following code to create and configure a Celery app as well."
msgstr ""

#: ../../patterns/celery.rst:58
msgid ""
"This creates and returns a ``Celery`` app object. Celery `configuration`_"
" is taken from the ``CELERY`` key in the Flask configuration. The Celery "
"app is set as the default, so that it is seen during each request. The "
"``Task`` subclass automatically runs task functions with a Flask app "
"context active, so that services like your database connections are "
"available."
msgstr ""

#: ../../patterns/celery.rst:66
msgid ""
"Here's a basic ``example.py`` that configures Celery to use Redis for "
"communication. We enable a result backend, but ignore results by default."
" This allows us to store results only for tasks where we care about the "
"result."
msgstr ""

#: ../../patterns/celery.rst:84
msgid ""
"Point the ``celery worker`` command at this and it will find the "
"``celery_app`` object."
msgstr ""

#: ../../patterns/celery.rst:90
msgid ""
"You can also run the ``celery beat`` command to run tasks on a schedule. "
"See Celery's docs for more information about defining schedules."
msgstr ""

#: ../../patterns/celery.rst:99
msgid "Application Factory"
msgstr ""

#: ../../patterns/celery.rst:101
msgid ""
"When using the Flask application factory pattern, call the "
"``celery_init_app`` function inside the factory. It sets "
"``app.extensions[\"celery\"]`` to the Celery app object, which can be "
"used to get the Celery app from the Flask app returned by the factory."
msgstr ""

#: ../../patterns/celery.rst:120
msgid ""
"To use ``celery`` commands, Celery needs an app object, but that's no "
"longer directly available. Create a ``make_celery.py`` file that calls "
"the Flask app factory and gets the Celery app from the returned Flask "
"app."
msgstr ""

#: ../../patterns/celery.rst:131
msgid "Point the ``celery`` command to this file."
msgstr ""

#: ../../patterns/celery.rst:140
msgid "Defining Tasks"
msgstr ""

#: ../../patterns/celery.rst:142
msgid ""
"Using ``@celery_app.task`` to decorate task functions requires access to "
"the ``celery_app`` object, which won't be available when using the "
"factory pattern. It also means that the decorated tasks are tied to the "
"specific Flask and Celery app instances, which could be an issue during "
"testing if you change configuration for a test."
msgstr ""

#: ../../patterns/celery.rst:147
msgid ""
"Instead, use Celery's ``@shared_task`` decorator. This creates task "
"objects that will access whatever the \"current app\" is, which is a "
"similar concept to Flask's blueprints and app context. This is why we "
"called ``celery_app.set_default()`` above."
msgstr ""

#: ../../patterns/celery.rst:151
msgid ""
"Here's an example task that adds two numbers together and returns the "
"result."
msgstr ""

#: ../../patterns/celery.rst:161
msgid ""
"Earlier, we configured Celery to ignore task results by default. Since we"
" want to know the return value of this task, we set "
"``ignore_result=False``. On the other hand, a task that didn't need a "
"result, such as sending an email, wouldn't set this."
msgstr ""

#: ../../patterns/celery.rst:167
msgid "Calling Tasks"
msgstr ""

#: ../../patterns/celery.rst:169
msgid ""
"The decorated function becomes a task object with methods to call it in "
"the background. The simplest way is to use the ``delay(*args, **kwargs)``"
" method. See Celery's docs for more methods."
msgstr ""

#: ../../patterns/celery.rst:173
msgid ""
"A Celery worker must be running to run the task. Starting a worker is "
"shown in the previous sections."
msgstr ""

#: ../../patterns/celery.rst:187
msgid ""
"The route doesn't get the task's result immediately. That would defeat "
"the purpose by blocking the response. Instead, we return the running "
"task's result id, which we can use later to get the result."
msgstr ""

#: ../../patterns/celery.rst:193
msgid "Getting Results"
msgstr ""

#: ../../patterns/celery.rst:195
msgid ""
"To fetch the result of the task we started above, we'll add another route"
" that takes the result id we returned before. We return whether the task "
"is finished (ready), whether it finished successfully, and what the "
"return value (or error) was if it is finished."
msgstr ""

#: ../../patterns/celery.rst:212
msgid ""
"Now you can start the task using the first route, then poll for the "
"result using the second route. This keeps the Flask request workers from "
"being blocked waiting for tasks to finish."
msgstr ""

#: ../../patterns/celery.rst:216
msgid ""
"The Flask repository contains `an example "
"<https://github.com/pallets/flask/tree/main/examples/celery>`_ using "
"JavaScript to submit tasks and poll for progress and results."
msgstr ""

#: ../../patterns/celery.rst:221
msgid "Passing Data to Tasks"
msgstr ""

#: ../../patterns/celery.rst:223
msgid ""
"The \"add\" task above took two integers as arguments. To pass arguments "
"to tasks, Celery has to serialize them to a format that it can pass to "
"other processes. Therefore, passing complex objects is not recommended. "
"For example, it would be impossible to pass a SQLAlchemy model object, "
"since that object is probably not serializable and is tied to the session"
" that queried it."
msgstr ""

#: ../../patterns/celery.rst:229
msgid ""
"Pass the minimal amount of data necessary to fetch or recreate any "
"complex data within the task. Consider a task that will run when the "
"logged in user asks for an archive of their data. The Flask request knows"
" the logged in user, and has the user object queried from the database. "
"It got that by querying the database for a given id, so the task can do "
"the same thing. Pass the user's id rather than the user object."
msgstr ""

#~ msgid "Celery Background Tasks"
#~ msgstr "Tareas de fondo de Celery"

#~ msgid ""
#~ "Celery is a powerful task queue "
#~ "that can be used for simple "
#~ "background tasks as well as complex "
#~ "multi-stage programs and schedules. This"
#~ " guide will show you how to "
#~ "configure Celery using Flask, but "
#~ "assumes you've already read the `First"
#~ " Steps with Celery "
#~ "<https://celery.readthedocs.io/en/latest/getting-started"
#~ "/first-steps-with-celery.html>`_ guide in"
#~ " the Celery documentation."
#~ msgstr ""
#~ "Celery es una poderosa cola de "
#~ "tareas que puede ser utilizada para "
#~ "tareas simples en segundo plano, así "
#~ "como para programas complejos de varias"
#~ " etapas y programaciones. Esta guía "
#~ "le mostrará cómo configurar Celery "
#~ "usando Flask, pero asume que ya ha"
#~ " leído la guía `Primeros pasos con"
#~ " Celery <https://celery.readthedocs.io/en/latest/getting-"
#~ "started/first-steps-with-celery.html>`_ en "
#~ "la documentación de Celery."

#~ msgid "Celery is a separate Python package. Install it from PyPI using pip::"
#~ msgstr ""
#~ "Celery es un paquete independiente de"
#~ " Python. Instálalo desde PyPI usando "
#~ "pip::"

#~ msgid "Configure"
#~ msgstr "Configurar"

#~ msgid ""
#~ "The first thing you need is a "
#~ "Celery instance, this is called the "
#~ "celery application.  It serves the same"
#~ " purpose as the :class:`~flask.Flask` "
#~ "object in Flask, just for Celery.  "
#~ "Since this instance is used as the"
#~ " entry-point for everything you want"
#~ " to do in Celery, like creating "
#~ "tasks and managing workers, it must "
#~ "be possible for other modules to "
#~ "import it."
#~ msgstr ""
#~ "Lo primero que necesitas es una "
#~ "instancia de Celery, esto se llama "
#~ "la aplicación Celery. Sirve el mismo "
#~ "propósito que el objeto :class:`~flask.Flask`"
#~ " en Flask, sólo que para Celery. "
#~ "Dado que esta instancia se utiliza "
#~ "como punto de entrada para todo lo"
#~ " que quieres hacer en Celery, como"
#~ " la creación de tareas y la "
#~ "gestión de los trabajadores, debe ser"
#~ " posible que otros módulos lo "
#~ "importen."

#~ msgid ""
#~ "For instance you can place this in"
#~ " a ``tasks`` module.  While you can"
#~ " use Celery without any reconfiguration "
#~ "with Flask, it becomes a bit nicer"
#~ " by subclassing tasks and adding "
#~ "support for Flask's application contexts "
#~ "and hooking it up with the Flask"
#~ " configuration."
#~ msgstr ""
#~ "Por ejemplo, puedes colocar esto en "
#~ "un módulo ``tasks``. Aunque puedes usar"
#~ " Celery sin ninguna reconfiguración con "
#~ "Flask, se vuelve un poco más "
#~ "agradable subclasificando tasks y añadiendo"
#~ " soporte para los contextos de "
#~ "aplicación de Flask y enganchándolo con"
#~ " la configuración de Flask."

#~ msgid "This is all that is necessary to integrate Celery with Flask:"
#~ msgstr "Esto es todo lo que se necesita para integrar Celery con Flask:"

#~ msgid ""
#~ "The function creates a new Celery "
#~ "object, configures it with the broker"
#~ " from the application config, updates "
#~ "the rest of the Celery config from"
#~ " the Flask config and then creates"
#~ " a subclass of the task that "
#~ "wraps the task execution in an "
#~ "application context."
#~ msgstr ""
#~ "La función crea un nuevo objeto "
#~ "Celery, lo configura con el broker "
#~ "desde la configuración de la aplicación,"
#~ " actualiza el resto de la "
#~ "configuración de Celery desde la "
#~ "configuración de Flask y luego crea "
#~ "una subclase de la tarea que "
#~ "envuelve la ejecución de la tarea "
#~ "en un contexto de aplicación."

#~ msgid ""
#~ "Celery 5.x deprecated uppercase configuration"
#~ " keys, and 6.x will remove them. "
#~ "See their official `migration guide`_."
#~ msgstr ""
#~ "Celery 5.x desaprobó las claves de "
#~ "configuración en mayúsculas, y la 6.x"
#~ " las eliminará. Consulte su `guía de"
#~ " migración`_ oficial."

#~ msgid "An example task"
#~ msgstr "Una tarea de ejemplo"

#~ msgid ""
#~ "Let's write a task that adds two"
#~ " numbers together and returns the "
#~ "result. We configure Celery's broker and"
#~ " backend to use Redis, create a "
#~ "``celery`` application using the factory "
#~ "from above, and then use it to "
#~ "define the task. ::"
#~ msgstr ""
#~ "Vamos a escribir una tarea que "
#~ "sume dos números y devuelva el "
#~ "resultado. Configuramos el broker y el"
#~ " backend de Celery para usar Redis,"
#~ " creamos una aplicación ``celery`` usando"
#~ " la fábrica de arriba, y luego "
#~ "la usamos para definir la tarea:"

#~ msgid "This task can now be called in the background::"
#~ msgstr "Esta tarea puede llamarse ahora en segundo plano::"

#~ msgid "Run a worker"
#~ msgstr "Ejecutar un trabajador"

#~ msgid ""
#~ "If you jumped in and already "
#~ "executed the above code you will "
#~ "be disappointed to learn that "
#~ "``.wait()`` will never actually return. "
#~ "That's because you also need to "
#~ "run a Celery worker to receive and"
#~ " execute the task. ::"
#~ msgstr ""
#~ "Si te has lanzado y ya has "
#~ "ejecutado el código anterior, te "
#~ "decepcionará saber que ``.wait()`` nunca "
#~ "devolverá realmente. Esto se debe a "
#~ "que también es necesario ejecutar un "
#~ "trabajador Celery para recibir y "
#~ "ejecutar la tarea ::"

#~ msgid ""
#~ "The ``your_application`` string has to "
#~ "point to your application's package or"
#~ " module that creates the ``celery`` "
#~ "object."
#~ msgstr ""
#~ "La cadena ``your_application`` tiene que "
#~ "apuntar al paquete o módulo de tu"
#~ " aplicación que crea el objeto "
#~ "``celery``."

#~ msgid ""
#~ "Now that the worker is running, "
#~ "``wait`` will return the result once "
#~ "the task is finished."
#~ msgstr ""
#~ "Ahora que el trabajador se está "
#~ "ejecutando, ``wait`` devolverá el resultado"
#~ " una vez que la tarea haya "
#~ "terminado."

