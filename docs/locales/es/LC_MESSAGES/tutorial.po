# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2021-05-27 16:42-0400\n"
"Language-Team: es_LA <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language: es\n"
"X-Generator: Poedit 2.4.3\n"

#: ../../tutorial/blog.rst:4
msgid "Blog Blueprint"
msgstr "Blog Blueprint"

#: ../../tutorial/blog.rst:6
msgid ""
"You'll use the same techniques you learned about when writing the "
"authentication blueprint to write the blog blueprint. The blog should list all "
"posts, allow logged in users to create posts, and allow the author of a post "
"to edit or delete it."
msgstr ""
"Utilizarás las mismas técnicas que aprendiste al escribir el Blueprint de "
"autenticación para escribir el Blueprint del blog. El blog debe listar todas "
"las entradas, permitir a los usuarios registrados crear entradas, y permitir "
"al autor de una entrada editarla o eliminarla."

#: ../../tutorial/blog.rst:11
msgid ""
"As you implement each view, keep the development server running. As you save "
"your changes, try going to the URL in your browser and testing them out."
msgstr ""
"A medida que implementes cada vista, mantén el servidor de desarrollo en "
"funcionamiento. A medida que guarde los cambios, intente ir a la URL en su "
"navegador y probarlos."

#: ../../tutorial/blog.rst:16
msgid "The Blueprint"
msgstr "El Blueprint"

#: ../../tutorial/blog.rst:18
msgid "Define the blueprint and register it in the application factory."
msgstr "Define el blueprint y regístralo en la fábrica de aplicaciones."

#: ../../tutorial/blog.rst:20 ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142 ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228 ../../tutorial/blog.rst:320
msgid "``flaskr/blog.py``"
msgstr ""

#: ../../tutorial/blog.rst:33 ../../tutorial/views.rst:46
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at the "
"end of the factory function before returning the app."
msgstr ""
"Importa y registra el blueprint de la fábrica usando :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Coloca el nuevo código al "
"final de la función de fábrica antes de devolver la app."

#: ../../tutorial/blog.rst:37 ../../tutorial/database.rst:174
#: ../../tutorial/factory.rst:35 ../../tutorial/views.rst:50
msgid "``flaskr/__init__.py``"
msgstr ""

#: ../../tutorial/blog.rst:51
msgid ""
"Unlike the auth blueprint, the blog blueprint does not have a ``url_prefix``. "
"So the ``index`` view will be at ``/``, the ``create`` view at ``/create``, "
"and so on. The blog is the main feature of Flaskr, so it makes sense that the "
"blog index will be the main index."
msgstr ""
"A diferencia del plano de autenticidad, el blueprint del blog no tiene una "
"``url_prefix``. Así que la vista ``index`` estará en ``/``, la vista "
"``create`` en ``/create``, y así sucesivamente. El blog es la característica "
"principal de Flaskr, así que tiene sentido que el índice del blog sea el "
"índice principal."

#: ../../tutorial/blog.rst:56
msgid ""
"However, the endpoint for the ``index`` view defined below will be ``blog."
"index``. Some of the authentication views referred to a plain ``index`` "
"endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` associates the "
"endpoint name ``'index'`` with the ``/`` url so that ``url_for('index')`` or "
"``url_for('blog.index')`` will both work, generating the same ``/`` URL either "
"way."
msgstr ""
"Sin embargo, el punto final para la vista ``index`` definida a continuación "
"será ``blog.index``. Algunas de las vistas de autenticación hacían referencia "
"a un punto final simple ``index``. :meth:`app.add_url_rule() <Flask."
"add_url_rule>` asocia el nombre del punto final ``'index`` con la url ``/`` "
"para que ``url_for('index')`` o ``url_for('blog.index')`` funcionen ambos, "
"generando la misma URL ``/`` de cualquier manera."

#: ../../tutorial/blog.rst:63
msgid ""
"In another application you might give the blog blueprint a ``url_prefix`` and "
"define a separate ``index`` view in the application factory, similar to the "
"``hello`` view. Then the ``index`` and ``blog.index`` endpoints and URLs would "
"be different."
msgstr ""
"En otra aplicación podrías dar al blueprint del blog un ``url_prefix`` y "
"definir una vista ``index`` separada en la fábrica de la aplicación, similar a "
"la vista ``hello``. Entonces los puntos finales y las URL de ``index`` y "
"``blog.index`` serían diferentes."

#: ../../tutorial/blog.rst:70
msgid "Index"
msgstr "Índice"

#: ../../tutorial/blog.rst:72
msgid ""
"The index will show all of the posts, most recent first. A ``JOIN`` is used so "
"that the author information from the ``user`` table is available in the result."
msgstr ""
"El índice mostrará todos los mensajes, el más reciente primero. Se utiliza un "
"``JOIN`` para que la información del autor de la tabla ``user`` esté "
"disponible en el resultado."

#: ../../tutorial/blog.rst:89
msgid "``flaskr/templates/blog/index.html``"
msgstr ""

#: ../../tutorial/blog.rst:121
msgid ""
"When a user is logged in, the ``header`` block adds a link to the ``create`` "
"view. When the user is the author of a post, they'll see an \"Edit\" link to "
"the ``update`` view for that post. ``loop.last`` is a special variable "
"available inside `Jinja for loops`_. It's used to display a line after each "
"post except the last one, to visually separate them."
msgstr ""
"Cuando un usuario está conectado, el bloque ``header`` añade un enlace a la "
"vista ``create``. Cuando el usuario es el autor de una entrada, verá un enlace "
"\"Edit\" a la vista ``update`` para esa entrada. ``loop.last`` es una variable "
"especial disponible dentro de `Jinja para bucles`_. Se utiliza para mostrar "
"una línea después de cada entrada excepto la última, para separarlas "
"visualmente."

#: ../../tutorial/blog.rst:132
msgid "Create"
msgstr "Crear"

#: ../../tutorial/blog.rst:134
msgid ""
"The ``create`` view works the same as the auth ``register`` view. Either the "
"form is displayed, or the posted data is validated and the post is added to "
"the database or an error is shown."
msgstr ""
"La vista ``create`` funciona igual que la vista auth ``register``. O bien se "
"muestra el formulario, o bien se validan los datos publicados y se añaden a la "
"base de datos o se muestra un error."

#: ../../tutorial/blog.rst:138
msgid ""
"The ``login_required`` decorator you wrote earlier is used on the blog views. "
"A user must be logged in to visit these views, otherwise they will be "
"redirected to the login page."
msgstr ""
"El decorador ``login_required`` que escribiste antes se utiliza en las vistas "
"del blog. Un usuario debe estar conectado para visitar estas vistas, de lo "
"contrario será redirigido a la página de inicio de sesión."

#: ../../tutorial/blog.rst:170
msgid "``flaskr/templates/blog/create.html``"
msgstr ""

#: ../../tutorial/blog.rst:191
msgid "Update"
msgstr "Actualización"

#: ../../tutorial/blog.rst:193
msgid ""
"Both the ``update`` and ``delete`` views will need to fetch a ``post`` by "
"``id`` and check if the author matches the logged in user. To avoid "
"duplicating code, you can write a function to get the ``post`` and call it "
"from each view."
msgstr ""
"Tanto la vista ``update`` como la vista ``delete`` necesitarán obtener un "
"``post`` por ``id`` y comprobar si el autor coincide con el usuario conectado. "
"Para evitar duplicar el código, puedes escribir una función para obtener el "
"``post`` y llamarla desde cada vista."

#: ../../tutorial/blog.rst:217
msgid ""
":func:`abort` will raise a special exception that returns an HTTP status code. "
"It takes an optional message to show with the error, otherwise a default "
"message is used. ``404`` means \"Not Found\", and ``403`` means \"Forbidden\". "
"(``401`` means \"Unauthorized\", but you redirect to the login page instead of "
"returning that status.)"
msgstr ""
":func:`abort` lanzará una excepción especial que devuelve un código de estado "
"HTTP. Toma un mensaje opcional para mostrar con el error, de lo contrario se "
"utiliza un mensaje por defecto. ``404`` significa \"Not Found\", y ``403`` "
"significa \"Forbidden\". (``401`` significa \"Unauthorized\", pero redirige a "
"la página de acceso en lugar de devolver ese estado)."

#: ../../tutorial/blog.rst:223
msgid ""
"The ``check_author`` argument is defined so that the function can be used to "
"get a ``post`` without checking the author. This would be useful if you wrote "
"a view to show an individual post on a page, where the user doesn't matter "
"because they're not modifying the post."
msgstr ""
"El argumento ``check_author`` se define para que la función pueda ser "
"utilizada para obtener un ``post`` sin comprobar el autor. Esto sería útil si "
"escribes una vista para mostrar un post individual en una página, donde el "
"usuario no importa porque no está modificando el post."

#: ../../tutorial/blog.rst:258
msgid ""
"Unlike the views you've written so far, the ``update`` function takes an "
"argument, ``id``. That corresponds to the ``<int:id>`` in the route. A real "
"URL will look like ``/1/update``. Flask will capture the ``1``, ensure it's "
"an :class:`int`, and pass it as the ``id`` argument. If you don't specify "
"``int:`` and instead do ``<id>``, it will be a string. To generate a URL to "
"the update page, :func:`url_for` needs to be passed the ``id`` so it knows "
"what to fill in: ``url_for('blog.update', id=post['id'])``. This is also in "
"the ``index.html`` file above."
msgstr ""
"A diferencia de las vistas que has escrito hasta ahora, la función ``update`` "
"toma un argumento, ``id``. Este corresponde al ``<int:id>` de la ruta. Una URL "
"real será como ``/1/update``. Flask capturará el ``1``, se asegurará de que es "
"un :class:`int`, y lo pasará como el argumento ``id``. Si no especificas ``int:"
"`` y en su lugar haces ``<id>``, será una cadena. Para generar una URL a la "
"página de actualización, a :func:`url_for` hay que pasarle el ``id`` para que "
"sepa qué rellenar: ``url_for('blog.update', id=post['id'])``. Esto también "
"está en el archivo ``index.html`` de arriba."

#: ../../tutorial/blog.rst:268
msgid ""
"The ``create`` and ``update`` views look very similar. The main difference is "
"that the ``update`` view uses a ``post`` object and an ``UPDATE`` query "
"instead of an ``INSERT``. With some clever refactoring, you could use one view "
"and template for both actions, but for the tutorial it's clearer to keep them "
"separate."
msgstr ""
"Las vistas ``create`` y ``update`` son muy similares. La principal diferencia "
"es que la vista ``update`` utiliza un objeto ``post`` y una consulta "
"``UPDATE`` en lugar de un ``INSERT``. Con un poco de refactorización "
"inteligente, podrías usar una vista y una plantilla para ambas acciones, pero "
"para el tutorial es más claro mantenerlas separadas."

#: ../../tutorial/blog.rst:274
msgid "``flaskr/templates/blog/update.html``"
msgstr ""

#: ../../tutorial/blog.rst:298
msgid ""
"This template has two forms. The first posts the edited data to the current "
"page (``/<id>/update``). The other form contains only a button and specifies "
"an ``action`` attribute that posts to the delete view instead. The button uses "
"some JavaScript to show a confirmation dialog before submitting."
msgstr ""
"Esta plantilla tiene dos formas. El primero publica los datos editados en la "
"página actual (``/<id>/update``). El otro formulario contiene sólo un botón y "
"especifica un atributo ``action`` que envía a la vista de borrado. El botón "
"utiliza algo de JavaScript para mostrar un diálogo de confirmación antes de "
"enviarlo."

#: ../../tutorial/blog.rst:304
msgid ""
"The pattern ``{{ request.form['title'] or post['title'] }}`` is used to choose "
"what data appears in the form. When the form hasn't been submitted, the "
"original ``post`` data appears, but if invalid form data was posted you want "
"to display that so the user can fix the error, so ``request.form`` is used "
"instead. :data:`request` is another variable that's automatically available in "
"templates."
msgstr ""
"El patrón ``{{ request.form['title'] o post['title'] }}` se utiliza para "
"elegir qué datos aparecen en el formulario. Cuando el formulario no se ha "
"enviado, aparecen los datos originales de ``post``, pero si se han publicado "
"datos de formulario no válidos, se desea mostrarlos para que el usuario pueda "
"solucionar el error, por lo que se utiliza ``request.form`` en su lugar. :data:"
"`request` es otra variable que está disponible automáticamente en las "
"plantillas."

#: ../../tutorial/blog.rst:313
msgid "Delete"
msgstr "Borrar"

#: ../../tutorial/blog.rst:315
msgid ""
"The delete view doesn't have its own template, the delete button is part of "
"``update.html`` and posts to the ``/<id>/delete`` URL. Since there is no "
"template, it will only handle the ``POST`` method and then redirect to the "
"``index`` view."
msgstr ""
"La vista de borrado no tiene su propia plantilla, el botón de borrado es parte "
"de ``update.html`` y publica en la URL ``/<id>/delete``. Como no hay "
"plantilla, sólo manejará el método ``POST`` y luego redirigirá a la vista "
"``index``."

#: ../../tutorial/blog.rst:332
msgid ""
"Congratulations, you've now finished writing your application! Take some time "
"to try out everything in the browser. However, there's still more to do before "
"the project is complete."
msgstr ""
"Enhorabuena, ya has terminado de escribir tu aplicación. Tómate un tiempo para "
"probarlo todo en el navegador. Sin embargo, todavía hay más cosas que hacer "
"antes de que el proyecto esté completo."

#: ../../tutorial/blog.rst:336
msgid "Continue to :doc:`install`."
msgstr "Continúa con :doc:`install`."

#: ../../tutorial/database.rst:4
msgid "Define and Access the Database"
msgstr "Definir y acceder a la base de datos"

#: ../../tutorial/database.rst:6
msgid ""
"The application will use a `SQLite`_ database to store users and posts. Python "
"comes with built-in support for SQLite in the :mod:`sqlite3` module."
msgstr ""
"La aplicación utilizará una base de datos `SQLite`_ para almacenar los "
"usuarios y los mensajes. Python viene con soporte incorporado para SQLite en "
"el módulo :mod:`sqlite3`."

#: ../../tutorial/database.rst:10
msgid ""
"SQLite is convenient because it doesn't require setting up a separate database "
"server and is built-in to Python. However, if concurrent requests try to write "
"to the database at the same time, they will slow down as each write happens "
"sequentially. Small applications won't notice this. Once you become big, you "
"may want to switch to a different database."
msgstr ""
"SQLite es conveniente porque no requiere configurar un servidor de base de "
"datos separado y está incorporado a Python. Sin embargo, si las solicitudes "
"concurrentes intentan escribir en la base de datos al mismo tiempo, se "
"ralentizarán ya que cada escritura se produce de forma secuencial. Las "
"aplicaciones pequeñas no notarán esto. Una vez que se convierta en grande, es "
"posible que desee cambiar a una base de datos diferente."

#: ../../tutorial/database.rst:17
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar with "
"it, the SQLite docs describe the `language`_."
msgstr ""
"El tutorial no entra en detalles sobre SQL. Si no estás familiarizado con él, "
"los documentos de SQLite describen el `lenguaje`_."

#: ../../tutorial/database.rst:25
msgid "Connect to the Database"
msgstr "Conectar con la base de datos"

#: ../../tutorial/database.rst:27
msgid ""
"The first thing to do when working with a SQLite database (and most other "
"Python database libraries) is to create a connection to it. Any queries and "
"operations are performed using the connection, which is closed after the work "
"is finished."
msgstr ""
"Lo primero que hay que hacer cuando se trabaja con una base de datos SQLite (y "
"con la mayoría de las bibliotecas de bases de datos de Python) es crear una "
"conexión a la misma. Todas las consultas y operaciones se realizan utilizando "
"la conexión, que se cierra una vez finalizado el trabajo."

#: ../../tutorial/database.rst:32
msgid ""
"In web applications this connection is typically tied to the request. It is "
"created at some point when handling a request, and closed before the response "
"is sent."
msgstr ""
"En las aplicaciones web esta conexión suele estar ligada a la petición. Se "
"crea en algún momento cuando se maneja una solicitud, y se cierra antes de que "
"se envíe la respuesta."

#: ../../tutorial/database.rst:36 ../../tutorial/database.rst:120
#: ../../tutorial/database.rst:157
msgid "``flaskr/db.py``"
msgstr ""

#: ../../tutorial/database.rst:63
msgid ""
":data:`g` is a special object that is unique for each request. It is used to "
"store data that might be accessed by multiple functions during the request. "
"The connection is stored and reused instead of creating a new connection if "
"``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` es un objeto especial que es único para cada solicitud. Se utiliza "
"para almacenar datos a los que podrían acceder varias funciones durante la "
"petición. La conexión se almacena y se reutiliza en lugar de crear una nueva "
"conexión si se llama a ``get_db`` por segunda vez en la misma petición."

#: ../../tutorial/database.rst:69
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, there "
"is no application object when writing the rest of your code. ``get_db`` will "
"be called when the application has been created and is handling a request, so :"
"data:`current_app` can be used."
msgstr ""
":data:`current_app` es otro objeto especial que apunta a la aplicación Flask "
"que maneja la solicitud. Como has utilizado una fábrica de aplicaciones, no "
"hay ningún objeto de aplicación cuando escribes el resto de tu código. La "
"llamada a ``get_db`` se realizará cuando la aplicación haya sido creada y esté "
"gestionando una petición, por lo que se puede utilizar :data:`current_app`."

#: ../../tutorial/database.rst:75
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at by the "
"``DATABASE`` configuration key. This file doesn't have to exist yet, and won't "
"until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` establece una conexión con el fichero apuntado por la "
"clave de configuración ``DATABASE``. Este archivo no tiene que existir "
"todavía, y no lo hará hasta que se inicialice la base de datos más tarde."

#: ../../tutorial/database.rst:79
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave like "
"dicts. This allows accessing the columns by name."
msgstr ""
":class:`sqlite3.Row` indica a la conexión que devuelva filas que se comporten "
"como dicts. Esto permite acceder a las columnas por su nombre."

#: ../../tutorial/database.rst:82
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` was "
"set. If the connection exists, it is closed. Further down you will tell your "
"application about the ``close_db`` function in the application factory so that "
"it is called after each request."
msgstr ""
"``close_db`` comprueba si se ha creado una conexión comprobando si se ha "
"establecido ``g.db``. Si la conexión existe, se cierra. Más adelante le dirás "
"a tu aplicación sobre la función ``close_db`` en la fábrica de la aplicación "
"para que sea llamada después de cada petición."

#: ../../tutorial/database.rst:89
msgid "Create the Tables"
msgstr "Crear las tablas"

#: ../../tutorial/database.rst:91
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be created "
"before you can store and retrieve data. Flaskr will store users in the "
"``user`` table, and posts in the ``post`` table. Create a file with the SQL "
"commands needed to create empty tables:"
msgstr ""
"En SQLite, los datos se almacenan en *tablas* y *columnas*. Estas deben ser "
"creadas antes de poder almacenar y recuperar los datos. Flaskr almacenará los "
"usuarios en la tabla ``user``, y las entradas en la tabla ``post``. Crea un "
"archivo con los comandos SQL necesarios para crear tablas vacías:"

#: ../../tutorial/database.rst:96
msgid "``flaskr/schema.sql``"
msgstr ""

#: ../../tutorial/database.rst:117
msgid ""
"Add the Python functions that will run these SQL commands to the ``db.py`` "
"file:"
msgstr ""
"Añade las funciones de Python que ejecutarán estos comandos SQL al archivo "
"``db.py``:"

#: ../../tutorial/database.rst:137
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to the "
"``flaskr`` package, which is useful since you won't necessarily know where "
"that location is when deploying the application later. ``get_db`` returns a "
"database connection, which is used to execute the commands read from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` abre un archivo relativo al "
"paquete ``flaskr``, lo cual es útil ya que no necesariamente se sabrá dónde "
"está esa ubicación cuando se despliegue la aplicación posteriormente. "
"``get_db`` devuelve una conexión a la base de datos, que se utiliza para "
"ejecutar los comandos leídos del archivo."

#: ../../tutorial/database.rst:143
msgid ""
":func:`click.command` defines a command line command called ``init-db`` that "
"calls the ``init_db`` function and shows a success message to the user. You "
"can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` define un comando de línea de comandos llamado ``init-"
"db`` que llama a la función ``init_db`` y muestra un mensaje de éxito al "
"usuario. Puedes leer :doc:`/cli` para aprender más sobre la escritura de "
"comandos."

#: ../../tutorial/database.rst:149
msgid "Register with the Application"
msgstr "Regístrese con la aplicación"

#: ../../tutorial/database.rst:151
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered with "
"the application instance; otherwise, they won't be used by the application. "
"However, since you're using a factory function, that instance isn't available "
"when writing the functions. Instead, write a function that takes an "
"application and does the registration."
msgstr ""
"Las funciones ``close_db`` y ``init_db_command`` necesitan ser registradas con "
"la instancia de la aplicación; de lo contrario, no serán utilizadas por la "
"aplicación. Sin embargo, como estás usando una función de fábrica, esa "
"instancia no está disponible cuando escribes las funciones. En su lugar, "
"escribe una función que tome una aplicación y haga el registro."

#: ../../tutorial/database.rst:164
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells Flask to "
"call that function when cleaning up after returning the response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` le dice a Flask "
"que llame a esa función cuando se limpie después de devolver la respuesta."

#: ../../tutorial/database.rst:168
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new command "
"that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` añade un nuevo comando "
"que puede ser llamado con el comando ``flask``."

#: ../../tutorial/database.rst:171
msgid ""
"Import and call this function from the factory. Place the new code at the end "
"of the factory function before returning the app."
msgstr ""
"Importa y llama a esta función desde la fábrica. Coloca el nuevo código al "
"final de la función de fábrica antes de devolver la aplicación."

#: ../../tutorial/database.rst:188
msgid "Initialize the Database File"
msgstr "Inicializar el archivo de la base de datos"

#: ../../tutorial/database.rst:190
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called using "
"the ``flask`` command, similar to the ``run`` command from the previous page."
msgstr ""
"Ahora que ``init-db`` ha sido registrado con la aplicación, puede ser llamado "
"usando el comando ``flask``, similar al comando ``run`` de la página anterior."

#: ../../tutorial/database.rst:196
msgid ""
"If you're still running the server from the previous page, you can either stop "
"the server, or run this command in a new terminal. If you use a new terminal, "
"remember to change to your project directory and activate the env as described "
"in :doc:`/installation`. You'll also need to set ``FLASK_APP`` and "
"``FLASK_ENV`` as shown on the previous page."
msgstr ""
"Si todavía está ejecutando el servidor de la página anterior, puede detener el "
"servidor o ejecutar este comando en un nuevo terminal. Si usas un nuevo "
"terminal, recuerda cambiar al directorio de tu proyecto y activar la env como "
"se describe en :doc:`/installation`. También necesitarás configurar "
"``FLASK_APP`` y ``FLASK_ENV`` como se muestra en la página anterior."

#: ../../tutorial/database.rst:203
msgid "Run the ``init-db`` command:"
msgstr "Ejecuta el comando ``init-db``:"

#: ../../tutorial/database.rst:210
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in your "
"project."
msgstr ""
"Ahora habrá un archivo ``flaskr.sqlite`` en la carpeta ``instance`` de tu "
"proyecto."

#: ../../tutorial/database.rst:213
msgid "Continue to :doc:`views`."
msgstr "Continúa con :doc:`views`."

#: ../../tutorial/deploy.rst:2
msgid "Deploy to Production"
msgstr "Despliegue en producción"

#: ../../tutorial/deploy.rst:4
msgid ""
"This part of the tutorial assumes you have a server that you want to deploy "
"your application to. It gives an overview of how to create the distribution "
"file and install it, but won't go into specifics about what server or software "
"to use. You can set up a new environment on your development computer to try "
"out the instructions below, but probably shouldn't use it for hosting a real "
"public application. See :doc:`/deploying/index` for a list of many different "
"ways to host your application."
msgstr ""
"Esta parte del tutorial asume que tienes un servidor en el que quieres "
"desplegar tu aplicación. Da una visión general de cómo crear el archivo de "
"distribución e instalarlo, pero no entra en detalles sobre qué servidor o "
"software utilizar. Puedes configurar un nuevo entorno en tu ordenador de "
"desarrollo para probar las instrucciones de abajo, pero probablemente no "
"deberías usarlo para alojar una aplicación pública real. Vea :doc:`/deploying/"
"index` para una lista de diferentes maneras de alojar su aplicación."

#: ../../tutorial/deploy.rst:15
msgid "Build and Install"
msgstr "Construir e instalar"

#: ../../tutorial/deploy.rst:17
msgid ""
"When you want to deploy your application elsewhere, you build a distribution "
"file. The current standard for Python distribution is the *wheel* format, with "
"the ``.whl`` extension. Make sure the wheel library is installed first:"
msgstr ""
"Cuando quieres desplegar tu aplicación en otro lugar, construyes un archivo de "
"distribución. El estándar actual para la distribución de Python es el formato "
"*wheel*, con la extensión ``.whl``. Asegúrate de que la biblioteca wheel está "
"instalada primero:"

#: ../../tutorial/deploy.rst:26
msgid ""
"Running ``setup.py`` with Python gives you a command line tool to issue build-"
"related commands. The ``bdist_wheel`` command will build a wheel distribution "
"file."
msgstr ""
"Ejecutar ``setup.py`` con Python le da una herramienta de línea de comandos "
"para emitir comandos relacionados con la construcción. El comando "
"``bdist_wheel`` construirá un archivo de distribución wheel."

#: ../../tutorial/deploy.rst:34
msgid ""
"You can find the file in ``dist/flaskr-1.0.0-py3-none-any.whl``. The file name "
"is in the format of {project name}-{version}-{python tag} -{abi tag}-{platform "
"tag}."
msgstr ""
"Puedes encontrar el archivo en ``dist/flaskr-1.0.0-py3-none-any.whl``. El "
"nombre del archivo tiene el formato de {nombre del proyecto}-{versión}-"
"{etiqueta python} -{etiqueta abi}-{etiqueta de plataforma}."

#: ../../tutorial/deploy.rst:38
msgid ""
"Copy this file to another machine, :ref:`set up a new virtualenv <install-"
"create-env>`, then install the file with ``pip``."
msgstr ""
"Copie este archivo a otra máquina, :ref:`configure un nuevo virtualenv "
"<install-create-env>`, luego instale el archivo con ``pip``."

#: ../../tutorial/deploy.rst:46
msgid "Pip will install your project along with its dependencies."
msgstr "Pip instalará su proyecto junto con sus dependencias."

#: ../../tutorial/deploy.rst:48
msgid ""
"Since this is a different machine, you need to run ``init-db`` again to create "
"the database in the instance folder."
msgstr ""
"Como se trata de una máquina diferente, es necesario ejecutar ``init-db`` de "
"nuevo para crear la base de datos en la carpeta de la instancia."

#: ../../tutorial/deploy.rst:53 ../../tutorial/factory.rst:140
msgid "Bash"
msgstr ""

#: ../../tutorial/deploy.rst:60 ../../tutorial/factory.rst:148
msgid "CMD"
msgstr ""

#: ../../tutorial/deploy.rst:67 ../../tutorial/factory.rst:156
msgid "Powershell"
msgstr ""

#: ../../tutorial/deploy.rst:74
msgid ""
"When Flask detects that it's installed (not in editable mode), it uses a "
"different directory for the instance folder. You can find it at ``venv/var/"
"flaskr-instance`` instead."
msgstr ""
"Cuando Flask detecta que está instalado (no en modo editable), utiliza un "
"directorio diferente para la carpeta de la instancia. Puedes encontrarla en "
"``venv/var/flaskr-instance`` en su lugar."

#: ../../tutorial/deploy.rst:80
msgid "Configure the Secret Key"
msgstr "Configurar la clave secreta"

#: ../../tutorial/deploy.rst:82
msgid ""
"In the beginning of the tutorial that you gave a default value for :data:"
"`SECRET_KEY`. This should be changed to some random bytes in production. "
"Otherwise, attackers could use the public ``'dev'`` key to modify the session "
"cookie, or anything else that uses the secret key."
msgstr ""
"Al principio del tutorial que dio un valor por defecto para :data:"
"`SECRET_KEY`. Esto debería ser cambiado por algunos bytes aleatorios en "
"producción. De lo contrario, los atacantes podrían utilizar la clave pública "
"``'dev'`` para modificar la cookie de sesión, o cualquier otra cosa que "
"utilice la clave secreta."

#: ../../tutorial/deploy.rst:87
msgid "You can use the following command to output a random secret key:"
msgstr ""
"Puede utilizar el siguiente comando para obtener una clave secreta aleatoria:"

#: ../../tutorial/deploy.rst:95
msgid ""
"Create the ``config.py`` file in the instance folder, which the factory will "
"read from if it exists. Copy the generated value into it."
msgstr ""
"Crea el archivo ``config.py`` en la carpeta de la instancia, que la fábrica "
"leerá si existe. Copie el valor generado en él."

#: ../../tutorial/deploy.rst:98
msgid "``venv/var/flaskr-instance/config.py``"
msgstr ""

#: ../../tutorial/deploy.rst:103
msgid ""
"You can also set any other necessary configuration here, although "
"``SECRET_KEY`` is the only one needed for Flaskr."
msgstr ""
"También puedes establecer aquí cualquier otra configuración necesaria, aunque "
"``SECRET_KEY`` es la única necesaria para Flaskr."

#: ../../tutorial/deploy.rst:108
msgid "Run with a Production Server"
msgstr "Ejecutar con un servidor de producción"

#: ../../tutorial/deploy.rst:110
msgid ""
"When running publicly rather than in development, you should not use the built-"
"in development server (``flask run``). The development server is provided by "
"Werkzeug for convenience, but is not designed to be particularly efficient, "
"stable, or secure."
msgstr ""
"Cuando se ejecuta públicamente y no en desarrollo, no se debe utilizar el "
"servidor de desarrollo incorporado (``flask run``). El servidor de desarrollo "
"es proporcionado por Werkzeug por conveniencia, pero no está diseñado para ser "
"particularmente eficiente, estable o seguro."

#: ../../tutorial/deploy.rst:115
msgid ""
"Instead, use a production WSGI server. For example, to use `Waitress`_, first "
"install it in the virtual environment:"
msgstr ""
"En su lugar, utilice un servidor WSGI de producción. Por ejemplo, para usar "
"`Waitress`_, primero instálalo en el entorno virtual:"

#: ../../tutorial/deploy.rst:122
msgid ""
"You need to tell Waitress about your application, but it doesn't use "
"``FLASK_APP`` like ``flask run`` does. You need to tell it to import and call "
"the application factory to get an application object."
msgstr ""
"Necesitas decirle a Waitress sobre tu aplicación, pero no usa ``FLASK_APP`` "
"como lo hace ``flask run``. Tienes que decirle que importe y llame a la "
"fábrica de aplicaciones para obtener un objeto de aplicación."

#: ../../tutorial/deploy.rst:132
msgid ""
"See :doc:`/deploying/index` for a list of many different ways to host your "
"application. Waitress is just an example, chosen for the tutorial because it "
"supports both Windows and Linux. There are many more WSGI servers and "
"deployment options that you may choose for your project."
msgstr ""
"Consulte :doc:`/deploying/index` para ver una lista de las diferentes formas "
"de alojar su aplicación. Waitress es sólo un ejemplo, elegido para el tutorial "
"porque soporta tanto Windows como Linux. Hay muchos más servidores WSGI y "
"opciones de despliegue que puedes elegir para tu proyecto."

#: ../../tutorial/deploy.rst:139
msgid "Continue to :doc:`next`."
msgstr "Continuar con :doc:`next`."

#: ../../tutorial/factory.rst:4
msgid "Application Setup"
msgstr "Configuración de la aplicación"

#: ../../tutorial/factory.rst:6
msgid ""
"A Flask application is an instance of the :class:`Flask` class. Everything "
"about the application, such as configuration and URLs, will be registered with "
"this class."
msgstr ""
"Una aplicación Flask es una instancia de la clase :class:`Flask`. Todo lo "
"relacionado con la aplicación, como la configuración y las URL, se registrará "
"en esta clase."

#: ../../tutorial/factory.rst:10
msgid ""
"The most straightforward way to create a Flask application is to create a "
"global :class:`Flask` instance directly at the top of your code, like how the "
"\"Hello, World!\" example did on the previous page. While this is simple and "
"useful in some cases, it can cause some tricky issues as the project grows."
msgstr ""
"La forma más sencilla de crear una aplicación Flask es crear una instancia "
"global :class:`Flask` directamente en la parte superior de su código, como lo "
"hizo el ejemplo \"¡Hola, mundo!\" en la página anterior. Aunque esto es simple "
"y útil en algunos casos, puede causar algunos problemas complicados cuando el "
"proyecto crece."

#: ../../tutorial/factory.rst:16
msgid ""
"Instead of creating a :class:`Flask` instance globally, you will create it "
"inside a function. This function is known as the *application factory*. Any "
"configuration, registration, and other setup the application needs will happen "
"inside the function, then the application will be returned."
msgstr ""
"En lugar de crear una instancia de :class:`Flask` globalmente, la crearás "
"dentro de una función. Esta función se conoce como la *fábrica de "
"aplicaciones*. Cualquier configuración, registro, y otros ajustes que la "
"aplicación necesite ocurrirán dentro de la función, entonces la aplicación "
"será devuelta."

#: ../../tutorial/factory.rst:24
msgid "The Application Factory"
msgstr "La fábrica de aplicaciones"

#: ../../tutorial/factory.rst:26
msgid ""
"It's time to start coding! Create the ``flaskr`` directory and add the "
"``__init__.py`` file. The ``__init__.py`` serves double duty: it will contain "
"the application factory, and it tells Python that the ``flaskr`` directory "
"should be treated as a package."
msgstr ""
"¡Es hora de empezar a codificar! Crea el directorio ``flaskr`` y añade el "
"archivo ``init__.py``. El archivo ``__init__.py`` tiene una doble función: "
"Contendrá la fábrica de la aplicación, y le dice a Python que el directorio "
"``flaskr`` debe ser tratado como un paquete."

#: ../../tutorial/factory.rst:71
msgid ""
"``create_app`` is the application factory function. You'll add to it later in "
"the tutorial, but it already does a lot."
msgstr ""
"``create_app`` es la función de fábrica de la aplicación. La añadirás más "
"adelante en el tutorial, pero ya hace mucho."

#: ../../tutorial/factory.rst:74
msgid ""
"``app = Flask(__name__, instance_relative_config=True)`` creates the :class:"
"`Flask` instance."
msgstr ""
"``app = Flask(__name__, instance_relative_config=True)`` crea la instancia :"
"class:`Flask`."

#: ../../tutorial/factory.rst:77
msgid ""
"``__name__`` is the name of the current Python module. The app needs to know "
"where it's located to set up some paths, and ``__name__`` is a convenient way "
"to tell it that."
msgstr ""
"``__name__`` es el nombre del módulo actual de Python. La aplicación necesita "
"saber dónde se encuentra para establecer algunas rutas, y ``__name__`` es una "
"forma conveniente de decírselo."

#: ../../tutorial/factory.rst:81
msgid ""
"``instance_relative_config=True`` tells the app that configuration files are "
"relative to the :ref:`instance folder <instance-folders>`. The instance folder "
"is located outside the ``flaskr`` package and can hold local data that "
"shouldn't be committed to version control, such as configuration secrets and "
"the database file."
msgstr ""
"``instance_relative_config=True`` indica a la aplicación que los archivos de "
"configuración son relativos a la carpeta :ref:`instance <instance-folders>`. "
"La carpeta de instancia se encuentra fuera del paquete ``flaskr`` y puede "
"contener datos locales que no deben ser enviados al control de versiones, como "
"los secretos de configuración y el archivo de base de datos."

#: ../../tutorial/factory.rst:88
msgid ""
":meth:`app.config.from_mapping() <Config.from_mapping>` sets some default "
"configuration that the app will use:"
msgstr ""
":meth:`app.config.from_mapping() <Config.from_mapping>` establece alguna "
"configuración por defecto que la aplicación utilizará:"

#: ../../tutorial/factory.rst:91
msgid ""
":data:`SECRET_KEY` is used by Flask and extensions to keep data safe. It's set "
"to ``'dev'`` to provide a convenient value during development, but it should "
"be overridden with a random value when deploying."
msgstr ""
":data:`SECRET_KEY` es utilizada por Flask y las extensiones para mantener los "
"datos seguros. Se establece en ``'dev'`` para proporcionar un valor "
"conveniente durante el desarrollo, pero debe ser anulado con un valor "
"aleatorio al liberar tu aplicación."

#: ../../tutorial/factory.rst:96
msgid ""
"``DATABASE`` is the path where the SQLite database file will be saved. It's "
"under :attr:`app.instance_path <Flask.instance_path>`, which is the path that "
"Flask has chosen for the instance folder. You'll learn more about the database "
"in the next section."
msgstr ""
"``DATABASE`` es la ruta donde se guardará el archivo de la base de datos "
"SQLite. Está bajo :attr:`app.instance_path <Flask.instance_path>`, que es la "
"ruta que Flask ha elegido para la carpeta de la instancia. Aprenderás más "
"sobre la base de datos en la siguiente sección."

#: ../../tutorial/factory.rst:102
msgid ""
":meth:`app.config.from_pyfile() <Config.from_pyfile>` overrides the default "
"configuration with values taken from the ``config.py`` file in the instance "
"folder if it exists. For example, when deploying, this can be used to set a "
"real ``SECRET_KEY``."
msgstr ""
":meth:`app.config.from_pyfile() <Config.from_pyfile>` anula la configuración "
"por defecto con valores tomados del archivo ``config.py`` en la carpeta de la "
"instancia si existe. Por ejemplo, al desplegar, esto puede usarse para "
"establecer una ``SECRET_KEY`` real."

#: ../../tutorial/factory.rst:107
msgid ""
"``test_config`` can also be passed to the factory, and will be used instead of "
"the instance configuration. This is so the tests you'll write later in the "
"tutorial can be configured independently of any development values you have "
"configured."
msgstr ""
"``test_config`` también se puede pasar a la fábrica, y se utilizará en lugar "
"de la configuración de la instancia. Esto es para que las pruebas que "
"escribirás más adelante en el tutorial puedan ser configuradas "
"independientemente de cualquier valor de desarrollo que hayas configurado."

#: ../../tutorial/factory.rst:112
msgid ""
":func:`os.makedirs` ensures that :attr:`app.instance_path <Flask."
"instance_path>` exists. Flask doesn't create the instance folder "
"automatically, but it needs to be created because your project will create the "
"SQLite database file there."
msgstr ""
":func:`os.makedirs` asegura que :attr:`app.instance_path <Flask."
"instance_path>` existe. Flask no crea la carpeta de instancia automáticamente, "
"pero es necesario crearla porque tu proyecto creará el archivo de base de "
"datos SQLite allí."

#: ../../tutorial/factory.rst:118
msgid ""
":meth:`@app.route() <Flask.route>` creates a simple route so you can see the "
"application working before getting into the rest of the tutorial. It creates a "
"connection between the URL ``/hello`` and a function that returns a response, "
"the string ``'Hello, World!'`` in this case."
msgstr ""
":meth:`@app.route() <Flask.route>` crea una ruta simple para que puedas ver la "
"aplicación funcionando antes de entrar en el resto del tutorial. Crea una "
"conexión entre la URL ``/hello`` y una función que devuelve una respuesta, la "
"cadena ``Hola, mundo`` en este caso."

#: ../../tutorial/factory.rst:126
msgid "Run The Application"
msgstr "Ejecutar la aplicación"

#: ../../tutorial/factory.rst:128
msgid ""
"Now you can run your application using the ``flask`` command. From the "
"terminal, tell Flask where to find your application, then run it in "
"development mode. Remember, you should still be in the top-level ``flask-"
"tutorial`` directory, not the ``flaskr`` package."
msgstr ""
"Ahora puedes ejecutar tu aplicación usando el comando ``flask``. Desde el "
"terminal, dile a Flask dónde encontrar tu aplicación, y ejecútala en modo de "
"desarrollo. Recuerda que debes estar en el directorio de nivel superior "
"``flask-tutorial``, no en el paquete ``flaskr``."

#: ../../tutorial/factory.rst:133
msgid ""
"Development mode shows an interactive debugger whenever a page raises an "
"exception, and restarts the server whenever you make changes to the code. You "
"can leave it running and just reload the browser page as you follow the "
"tutorial."
msgstr ""
"El modo de desarrollo muestra un depurador interactivo cada vez que una página "
"lanza una excepción, y reinicia el servidor cada vez que haces cambios en el "
"código. Puedes dejarlo funcionando y simplemente recargar la página del "
"navegador mientras sigues el tutorial."

#: ../../tutorial/factory.rst:164
msgid "You'll see output similar to this:"
msgstr "Verás un resultado similar a este:"

#: ../../tutorial/factory.rst:176
msgid ""
"Visit http://127.0.0.1:5000/hello in a browser and you should see the \"Hello, "
"World!\" message. Congratulations, you're now running your Flask web "
"application!"
msgstr ""
"Visita http://127.0.0.1:5000/hello en un navegador y deberías ver el mensaje "
"\"¡Hola, mundo!\". Enhorabuena, ¡ya estás ejecutando tu aplicación web Flask!"

#: ../../tutorial/factory.rst:180
msgid "Continue to :doc:`database`."
msgstr "Continuar con :doc:`database`."

#: ../../tutorial/index.rst:4
msgid "Contents:"
msgstr "Contenido:"

#: ../../tutorial/index.rst:2
msgid "Tutorial"
msgstr "Tutorial"

#: ../../tutorial/index.rst:20
msgid ""
"This tutorial will walk you through creating a basic blog application called "
"Flaskr. Users will be able to register, log in, create posts, and edit or "
"delete their own posts. You will be able to package and install the "
"application on other computers."
msgstr ""
"Este tutorial le guiará a través de la creación de una aplicación básica de "
"blog llamada Flaskr. Los usuarios podrán registrarse, iniciar sesión, crear "
"mensajes y editar o eliminar sus propios mensajes. Podrás empaquetar e "
"instalar la aplicación en otros ordenadores."

msgid "screenshot of index page"
msgstr "captura de pantalla de la página de índice"

#: ../../tutorial/index.rst:30
msgid ""
"It's assumed that you're already familiar with Python. The `official "
"tutorial`_ in the Python docs is a great way to learn or review first."
msgstr ""
"Se asume que ya estás familiarizado con Python. El `tutorial oficial`_ en los "
"documentos de Python es una buena manera de aprender o repasar primero."

#: ../../tutorial/index.rst:35
msgid ""
"While it's designed to give a good starting point, the tutorial doesn't cover "
"all of Flask's features. Check out the :doc:`/quickstart` for an overview of "
"what Flask can do, then dive into the docs to find out more. The tutorial only "
"uses what's provided by Flask and Python. In another project, you might decide "
"to use :doc:`/extensions` or other libraries to make some tasks simpler."
msgstr ""
"Aunque está diseñado para dar un buen punto de partida, el tutorial no cubre "
"todas las características de Flask. Echa un vistazo al :doc:`/quickstart` para "
"obtener una visión general de lo que Flask puede hacer, y luego bucea en los "
"documentos para obtener más información. El tutorial sólo utiliza lo que "
"proporcionan Flask y Python. En otro proyecto, podrías decidir usar :doc:`/"
"extensions` u otras bibliotecas para hacer algunas tareas más simples."

msgid "screenshot of login page"
msgstr "captura de pantalla de la página de inicio de sesión"

#: ../../tutorial/index.rst:47
msgid ""
"Flask is flexible. It doesn't require you to use any particular project or "
"code layout. However, when first starting, it's helpful to use a more "
"structured approach. This means that the tutorial will require a bit of "
"boilerplate up front, but it's done to avoid many common pitfalls that new "
"developers encounter, and it creates a project that's easy to expand on. Once "
"you become more comfortable with Flask, you can step out of this structure and "
"take full advantage of Flask's flexibility."
msgstr ""
"Flask es flexible. No requiere que uses ningún proyecto o diseño de código en "
"particular. Sin embargo, cuando se empieza, es útil utilizar un enfoque más "
"estructurado. Esto significa que el tutorial requerirá un poco de placa "
"repetitiva al principio, pero se hace para evitar muchas trampas comunes que "
"los nuevos desarrolladores encuentran, y crea un proyecto que es fácil de "
"ampliar. Una vez que te sientas más cómodo con Flask, podrás salir de esta "
"estructura y aprovechar al máximo la flexibilidad de Flask."

msgid "screenshot of edit page"
msgstr "captura de pantalla de la página de inicio de sesión"

#: ../../tutorial/index.rst:60
msgid ""
":gh:`The tutorial project is available as an example in the Flask repository "
"<examples/tutorial>`, if you want to compare your project with the final "
"product as you follow the tutorial."
msgstr ""
":gh:`El proyecto del tutorial está disponible como ejemplo en el repositorio "
"de Flask <examples/tutorial>`, si quieres comparar tu proyecto con el producto "
"final mientras sigues el tutorial."

#: ../../tutorial/index.rst:64
msgid "Continue to :doc:`layout`."
msgstr "Continúe con :doc:`layout`."

#: ../../tutorial/install.rst:2
msgid "Make the Project Installable"
msgstr "Hacer que el proyecto sea instalable"

#: ../../tutorial/install.rst:4
msgid ""
"Making your project installable means that you can build a *distribution* file "
"and install that in another environment, just like you installed Flask in your "
"project's environment. This makes deploying your project the same as "
"installing any other library, so you're using all the standard Python tools to "
"manage everything."
msgstr ""
"Hacer que tu proyecto sea instalable significa que puedes construir un archivo "
"de *distribución* e instalarlo en otro entorno, al igual que has instalado "
"Flask en el entorno de tu proyecto. Esto hace que el despliegue de su proyecto "
"sea igual que la instalación de cualquier otra biblioteca, por lo que está "
"utilizando todas las herramientas estándar de Python para gestionar todo."

#: ../../tutorial/install.rst:10
msgid ""
"Installing also comes with other benefits that might not be obvious from the "
"tutorial or as a new Python user, including:"
msgstr ""
"La instalación también viene con otros beneficios que podrían no ser obvios "
"desde el tutorial o como un nuevo usuario de Python, incluyendo:"

#: ../../tutorial/install.rst:13
msgid ""
"Currently, Python and Flask understand how to use the ``flaskr`` package only "
"because you're running from your project's directory. Installing means you can "
"import it no matter where you run from."
msgstr ""
"Actualmente, Python y Flask entienden cómo usar el paquete ``flaskr`` sólo "
"porque lo ejecutas desde el directorio de tu proyecto. Instalarlo significa "
"que puedes importarlo sin importar desde dónde lo ejecutes."

#: ../../tutorial/install.rst:17
msgid ""
"You can manage your project's dependencies just like other packages do, so "
"``pip install yourproject.whl`` installs them."
msgstr ""
"Puedes gestionar las dependencias de tu proyecto igual que otros paquetes, así "
"que ``pip install tuproyecto.whl`` las instala."

#: ../../tutorial/install.rst:20
msgid ""
"Test tools can isolate your test environment from your development environment."
msgstr ""
"Las herramientas de prueba pueden aislar el entorno de prueba del entorno de "
"desarrollo."

#: ../../tutorial/install.rst:24
msgid ""
"This is being introduced late in the tutorial, but in your future projects you "
"should always start with this."
msgstr ""
"Esto se está introduciendo tarde en el tutorial, pero en tus futuros proyectos "
"deberías empezar siempre con esto."

#: ../../tutorial/install.rst:29
msgid "Describe the Project"
msgstr "Describa el proyecto"

#: ../../tutorial/install.rst:31
msgid ""
"The ``setup.py`` file describes your project and the files that belong to it."
msgstr ""
"El archivo ``setup.py`` describe tu proyecto y los archivos que le pertenecen."

#: ../../tutorial/install.rst:34
msgid "``setup.py``"
msgstr ""

#: ../../tutorial/install.rst:51
msgid ""
"``packages`` tells Python what package directories (and the Python files they "
"contain) to include. ``find_packages()`` finds these directories automatically "
"so you don't have to type them out. To include other files, such as the static "
"and templates directories, ``include_package_data`` is set. Python needs "
"another file named ``MANIFEST.in`` to tell what this other data is."
msgstr ""
"``packages`` le dice a Python qué directorios de paquetes (y los archivos de "
"Python que contienen) debe incluir. ``find_packages()`` encuentra estos "
"directorios automáticamente para que no tengas que escribirlos. Para incluir "
"otros archivos, como los directorios static y templates, se establece "
"``include_package_data``. Python necesita otro archivo llamado ``MANIFEST.in`` "
"para decir cuáles son estos otros datos."

#: ../../tutorial/install.rst:58
msgid "``MANIFEST.in``"
msgstr ""

#: ../../tutorial/install.rst:66
msgid ""
"This tells Python to copy everything in the ``static`` and ``templates`` "
"directories, and the ``schema.sql`` file, but to exclude all bytecode files."
msgstr ""
"Esto le dice a Python que copie todo en los directorios ``static`` y "
"``templates``, y el archivo ``schema.sql``, pero que excluya todos los "
"archivos del tipo ``bytecode``."

#: ../../tutorial/install.rst:70
msgid ""
"See the `official packaging guide`_ for another explanation of the files and "
"options used."
msgstr ""
"Consulte la `guía oficial de empaquetado`_ para obtener otra explicación de "
"los archivos y opciones utilizados."

#: ../../tutorial/install.rst:77
msgid "Install the Project"
msgstr "Instalar el proyecto"

#: ../../tutorial/install.rst:79
msgid "Use ``pip`` to install your project in the virtual environment."
msgstr "Utilice ``pip`` para instalar su proyecto en el entorno virtual."

#: ../../tutorial/install.rst:85
msgid ""
"This tells pip to find ``setup.py`` in the current directory and install it in "
"*editable* or *development* mode. Editable mode means that as you make changes "
"to your local code, you'll only need to re-install if you change the metadata "
"about the project, such as its dependencies."
msgstr ""
"Esto le dice a pip que encuentre ``setup.py`` en el directorio actual y lo "
"instale en modo *editable* o *desarrollo*. El modo editable significa que a "
"medida que se realicen cambios en el código local, sólo será necesario "
"reinstalar si se cambian los metadatos del proyecto, como sus dependencias."

#: ../../tutorial/install.rst:90
msgid "You can observe that the project is now installed with ``pip list``."
msgstr "Se puede observar que el proyecto se instala ahora con ``pip list``."

#: ../../tutorial/install.rst:109
msgid ""
"Nothing changes from how you've been running your project so far. "
"``FLASK_APP`` is still set to ``flaskr`` and ``flask run`` still runs the "
"application, but you can call it from anywhere, not just the ``flask-"
"tutorial`` directory."
msgstr ""
"Nada cambia de cómo has estado ejecutando tu proyecto hasta ahora. "
"``FLASK_APP`` sigue siendo ``flaskr`` y ``flask run`` sigue ejecutando la "
"aplicación, pero puedes llamarla desde cualquier lugar, no sólo desde el "
"directorio ``flask-tutorial``."

#: ../../tutorial/install.rst:114
msgid "Continue to :doc:`tests`."
msgstr "Continúe con :doc:`tests`."

#: ../../tutorial/layout.rst:2
msgid "Project Layout"
msgstr "Diseño del proyecto"

#: ../../tutorial/layout.rst:4
msgid "Create a project directory and enter it:"
msgstr "Cree un directorio de proyecto y entre en él:"

#: ../../tutorial/layout.rst:11
msgid ""
"Then follow the :doc:`installation instructions </installation>` to set up a "
"Python virtual environment and install Flask for your project."
msgstr ""
"A continuación, sigue las instrucciones de :doc:`instalación </installation>` "
"para configurar un entorno virtual de Python e instalar Flask para tu proyecto."

#: ../../tutorial/layout.rst:14
msgid ""
"The tutorial will assume you're working from the ``flask-tutorial`` directory "
"from now on. The file names at the top of each code block are relative to this "
"directory."
msgstr ""
"El tutorial asumirá que estás trabajando desde el directorio ``flask-"
"tutorial`` a partir de ahora. Los nombres de los archivos en la parte superior "
"de cada bloque de código son relativos a este directorio."

#: ../../tutorial/layout.rst:20
msgid "A Flask application can be as simple as a single file."
msgstr "Una aplicación Flask puede ser tan simple como un solo archivo."

#: ../../tutorial/layout.rst:22
msgid "``hello.py``"
msgstr ""

#: ../../tutorial/layout.rst:34
msgid ""
"However, as a project gets bigger, it becomes overwhelming to keep all the "
"code in one file. Python projects use *packages* to organize code into "
"multiple modules that can be imported where needed, and the tutorial will do "
"this as well."
msgstr ""
"Sin embargo, a medida que un proyecto se hace más grande, se vuelve abrumador "
"mantener todo el código en un solo archivo. Los proyectos de Python utilizan "
"*paquetes* para organizar el código en múltiples módulos que pueden ser "
"importados cuando sea necesario, y el tutorial también lo hará."

#: ../../tutorial/layout.rst:39
msgid "The project directory will contain:"
msgstr "El directorio del proyecto contendrá:"

#: ../../tutorial/layout.rst:41
msgid "``flaskr/``, a Python package containing your application code and files."
msgstr ""
"``flaskr/``, un paquete de Python que contiene el código y los archivos de tu "
"aplicación."

#: ../../tutorial/layout.rst:43
msgid "``tests/``, a directory containing test modules."
msgstr "``tests/``, un directorio que contiene módulos de prueba."

#: ../../tutorial/layout.rst:44
msgid ""
"``venv/``, a Python virtual environment where Flask and other dependencies are "
"installed."
msgstr ""
"``venv/``, un entorno virtual de Python donde se instalan Flask y otras "
"dependencias."

#: ../../tutorial/layout.rst:46
msgid "Installation files telling Python how to install your project."
msgstr "Archivos de instalación que indican a Python cómo instalar tu proyecto."

#: ../../tutorial/layout.rst:47
msgid ""
"Version control config, such as `git`_. You should make a habit of using some "
"type of version control for all your projects, no matter the size."
msgstr ""
"Configuración del control de versiones, como `git`_. Deberías tener el hábito "
"de usar algún tipo de control de versiones para todos tus proyectos, sin "
"importar el tamaño."

#: ../../tutorial/layout.rst:50
msgid "Any other project files you might add in the future."
msgstr "Cualquier otro archivo del proyecto que puedas añadir en el futuro."

#: ../../tutorial/layout.rst:54
msgid "By the end, your project layout will look like this:"
msgstr "Al final, el diseño de tu proyecto tendrá este aspecto:"

#: ../../tutorial/layout.rst:87
msgid ""
"If you're using version control, the following files that are generated while "
"running your project should be ignored. There may be other files based on the "
"editor you use. In general, ignore files that you didn't write. For example, "
"with git:"
msgstr ""
"Si está utilizando el control de versiones, los siguientes archivos que se "
"generan mientras se ejecuta el proyecto deben ser ignorados. Puede haber otros "
"archivos en función del editor que utilices. En general, ignora los archivos "
"que no has escrito. Por ejemplo, con git:"

#: ../../tutorial/layout.rst:92
msgid "``.gitignore``"
msgstr ""

#: ../../tutorial/layout.rst:110
msgid "Continue to :doc:`factory`."
msgstr "Continuar con :doc:`factory`."

#: ../../tutorial/next.rst:2
msgid "Keep Developing!"
msgstr "¡Siga desarrollando!"

#: ../../tutorial/next.rst:4
msgid ""
"You've learned about quite a few Flask and Python concepts throughout the "
"tutorial. Go back and review the tutorial and compare your code with the steps "
"you took to get there. Compare your project to the :gh:`example project "
"<examples/tutorial>`, which might look a bit different due to the step-by-step "
"nature of the tutorial."
msgstr ""
"Has aprendido bastantes conceptos de Flask y Python a lo largo del tutorial. "
"Vuelve a repasar el tutorial y compara tu código con los pasos que has dado "
"para llegar a él. Compara tu proyecto con el :gh:`proyecto de ejemplo "
"<examples/tutorial>`, que puede parecer un poco diferente debido a la "
"naturaleza paso a paso del tutorial."

#: ../../tutorial/next.rst:10
msgid ""
"There's a lot more to Flask than what you've seen so far. Even so, you're now "
"equipped to start developing your own web applications. Check out the :doc:`/"
"quickstart` for an overview of what Flask can do, then dive into the docs to "
"keep learning. Flask uses `Jinja`_, `Click`_, `Werkzeug`_, and `ItsDangerous`_ "
"behind the scenes, and they all have their own documentation too. You'll also "
"be interested in :doc:`/extensions` which make tasks like working with the "
"database or validating form data easier and more powerful."
msgstr ""
"Hay mucho más en Flask de lo que has visto hasta ahora. Aun así, ahora estás "
"equipado para empezar a desarrollar tus propias aplicaciones web. Echa un "
"vistazo al :doc:`/quickstart` para obtener una visión general de lo que Flask "
"puede hacer, y luego bucea en los documentos para seguir aprendiendo. Flask "
"utiliza `Jinja`_, `Click`_, `Werkzeug`_ y `ItsDangerous`_ entre bastidores, y "
"todos ellos tienen también su propia documentación. También te interesará :doc:"
"`/extensions` que facilitan y potencian tareas como el trabajo con la base de "
"datos o la validación de datos de formularios."

#: ../../tutorial/next.rst:19
msgid ""
"If you want to keep developing your Flaskr project, here are some ideas for "
"what to try next:"
msgstr ""
"Si quieres seguir desarrollando tu proyecto Flaskr, aquí tienes algunas ideas "
"sobre lo que puedes probar a continuación:"

#: ../../tutorial/next.rst:22
msgid ""
"A detail view to show a single post. Click a post's title to go to its page."
msgstr ""
"Una vista detallada para mostrar una sola entrada. Haga clic en el título de "
"una entrada para ir a su página."

#: ../../tutorial/next.rst:24
msgid "Like / unlike a post."
msgstr "Me gusta/no me gusta una entrada."

#: ../../tutorial/next.rst:25
msgid "Comments."
msgstr "Comentarios."

#: ../../tutorial/next.rst:26
msgid "Tags. Clicking a tag shows all the posts with that tag."
msgstr ""
"Etiquetas. Al hacer clic en una etiqueta se muestran todos los mensajes con "
"esa etiqueta."

#: ../../tutorial/next.rst:27
msgid "A search box that filters the index page by name."
msgstr "Una caja de búsqueda que filtra la página del índice por nombre."

#: ../../tutorial/next.rst:28
msgid "Paged display. Only show 5 posts per page."
msgstr "Visualización por páginas. Sólo muestra 5 posts por página."

#: ../../tutorial/next.rst:29
msgid "Upload an image to go along with a post."
msgstr "Cargar una imagen para acompañar un mensaje."

#: ../../tutorial/next.rst:30
msgid "Format posts using Markdown."
msgstr "Formatear los posts usando Markdown."

#: ../../tutorial/next.rst:31
msgid "An RSS feed of new posts."
msgstr "Una fuente RSS de nuevos mensajes."

#: ../../tutorial/next.rst:33
msgid "Have fun and make awesome applications!"
msgstr "¡Diviértete y haz aplicaciones increíbles!"

#: ../../tutorial/static.rst:2
msgid "Static Files"
msgstr "Archivos estáticos"

#: ../../tutorial/static.rst:4
msgid ""
"The authentication views and templates work, but they look very plain right "
"now. Some `CSS`_ can be added to add style to the HTML layout you constructed. "
"The style won't change, so it's a *static* file rather than a template."
msgstr ""
"Las vistas y plantillas de autenticación funcionan, pero ahora mismo tienen un "
"aspecto muy sencillo. Se puede añadir algo de `CSS`_ para añadir estilo al "
"diseño HTML que has construido. El estilo no cambiará, por lo que es un "
"archivo *estático* en lugar de una plantilla."

#: ../../tutorial/static.rst:9
msgid ""
"Flask automatically adds a ``static`` view that takes a path relative to the "
"``flaskr/static`` directory and serves it. The ``base.html`` template already "
"has a link to the ``style.css`` file:"
msgstr ""
"Flask añade automáticamente una vista ``static`` que toma una ruta relativa al "
"directorio ``flaskr/static`` y la sirve. La plantilla ``base.html`` ya tiene "
"un enlace al archivo ``style.css``:"

#: ../../tutorial/static.rst:17
msgid ""
"Besides CSS, other types of static files might be files with JavaScript "
"functions, or a logo image. They are all placed under the ``flaskr/static`` "
"directory and referenced with ``url_for('static', filename='...')``."
msgstr ""
"Además de CSS, otros tipos de archivos estáticos pueden ser archivos con "
"funciones de JavaScript, o una imagen de logotipo. Todos ellos se colocan en "
"el directorio ``flaskr/static`` y se referencian con ``url_for('static', "
"filename='...')``."

#: ../../tutorial/static.rst:22
msgid ""
"This tutorial isn't focused on how to write CSS, so you can just copy the "
"following into the ``flaskr/static/style.css`` file:"
msgstr ""
"Este tutorial no se centra en cómo escribir CSS, así que puedes copiar lo "
"siguiente en el archivo ``flaskr/static/style.css``:"

#: ../../tutorial/static.rst:25
msgid "``flaskr/static/style.css``"
msgstr ""

#: ../../tutorial/static.rst:55
msgid ""
"You can find a less compact version of ``style.css`` in the :gh:`example code "
"<examples/tutorial/flaskr/static/style.css>`."
msgstr ""
"Puedes encontrar una versión menos compacta de ``style.css`` en el código de :"
"gh:`ejemplo <examples/tutorial/flaskr/static/style.css>`."

#: ../../tutorial/static.rst:58
msgid ""
"Go to http://127.0.0.1:5000/auth/login and the page should look like the "
"screenshot below."
msgstr ""
"Vaya a http://127.0.0.1:5000/auth/login y la página debería ser como la "
"captura de pantalla de abajo."

#: ../../tutorial/static.rst:66
msgid ""
"You can read more about CSS from `Mozilla's documentation <CSS_>`_. If you "
"change a static file, refresh the browser page. If the change doesn't show up, "
"try clearing your browser's cache."
msgstr ""
"Puede leer más sobre CSS en la documentación de `Mozilla <CSS_>`_. Si cambia "
"un archivo estático, actualice la página del navegador. Si el cambio no "
"aparece, prueba a borrar la caché del navegador."

#: ../../tutorial/static.rst:72
msgid "Continue to :doc:`blog`."
msgstr "Continuar con :doc:`blog`."

#: ../../tutorial/templates.rst:4
msgid "Templates"
msgstr "Plantillas"

#: ../../tutorial/templates.rst:6
msgid ""
"You've written the authentication views for your application, but if you're "
"running the server and try to go to any of the URLs, you'll see a "
"``TemplateNotFound`` error. That's because the views are calling :func:"
"`render_template`, but you haven't written the templates yet. The template "
"files will be stored in the ``templates`` directory inside the ``flaskr`` "
"package."
msgstr ""
"Has escrito las vistas de autenticación para tu aplicación, pero si estás "
"ejecutando el servidor e intentas ir a cualquiera de las URLs, verás un error "
"``TemplateNotFound``. Esto se debe a que las vistas están llamando a :func:"
"`render_template`, pero aún no has escrito las plantillas. Los archivos de "
"plantillas se almacenan en el directorio ``templates`` dentro del paquete "
"``flaskr``."

#: ../../tutorial/templates.rst:13
msgid ""
"Templates are files that contain static data as well as placeholders for "
"dynamic data. A template is rendered with specific data to produce a final "
"document. Flask uses the `Jinja`_ template library to render templates."
msgstr ""
"Las plantillas son archivos que contienen datos estáticos así como marcadores "
"de posición para datos dinámicos. Una plantilla se renderiza con datos "
"específicos para producir un documento final. Flask utiliza la biblioteca de "
"plantillas `Jinja`_ para renderizar las plantillas."

#: ../../tutorial/templates.rst:18
msgid ""
"In your application, you will use templates to render `HTML`_ which will "
"display in the user's browser. In Flask, Jinja is configured to *autoescape* "
"any data that is rendered in HTML templates. This means that it's safe to "
"render user input; any characters they've entered that could mess with the "
"HTML, such as ``<`` and ``>`` will be *escaped* with *safe* values that look "
"the same in the browser but don't cause unwanted effects."
msgstr ""
"En tu aplicación, usarás plantillas para renderizar `HTML`_ que se mostrará en "
"el navegador del usuario. En Flask, Jinja está configurado para *autoescapar* "
"cualquier dato que se renderice en las plantillas HTML. Esto significa que es "
"seguro renderizar la entrada del usuario; cualquier carácter que haya "
"introducido que pueda estropear el HTML, como ``<`` y ``>`` será *escapado* "
"con valores *seguros* que se vean igual en el navegador pero que no causen "
"efectos no deseados."

#: ../../tutorial/templates.rst:26
msgid ""
"Jinja looks and behaves mostly like Python. Special delimiters are used to "
"distinguish Jinja syntax from the static data in the template. Anything "
"between ``{{`` and ``}}`` is an expression that will be output to the final "
"document. ``{%`` and ``%}`` denotes a control flow statement like ``if`` and "
"``for``. Unlike Python, blocks are denoted by start and end tags rather than "
"indentation since static text within a block could change indentation."
msgstr ""
"Jinja se ve y se comporta principalmente como Python. Se utilizan "
"delimitadores especiales para distinguir la sintaxis de Jinja de los datos "
"estáticos de la plantilla. Todo lo que esté entre ``{{`` y ``}}`` es una "
"expresión que se enviará al documento final. ``{%`` y ``%}`` denota una "
"declaración de flujo de control como ``if`` y ``for``. A diferencia de Python, "
"los bloques se denotan mediante etiquetas de inicio y fin en lugar de "
"indentación, ya que el texto estático dentro de un bloque podría cambiar la "
"indentación."

#: ../../tutorial/templates.rst:39
msgid "The Base Layout"
msgstr "La disposición de la base"

#: ../../tutorial/templates.rst:41
msgid ""
"Each page in the application will have the same basic layout around a "
"different body. Instead of writing the entire HTML structure in each template, "
"each template will *extend* a base template and override specific sections."
msgstr ""
"Cada página de la aplicación tendrá el mismo diseño básico alrededor de un "
"cuerpo diferente. En lugar de escribir toda la estructura HTML en cada "
"plantilla, cada plantilla *extenderá* una plantilla base y anulará secciones "
"específicas."

#: ../../tutorial/templates.rst:46
msgid "``flaskr/templates/base.html``"
msgstr ""

#: ../../tutorial/templates.rst:74
msgid ""
":data:`g` is automatically available in templates. Based on if ``g.user`` is "
"set (from ``load_logged_in_user``), either the username and a log out link are "
"displayed, or links to register and log in are displayed. :func:`url_for` is "
"also automatically available, and is used to generate URLs to views instead of "
"writing them out manually."
msgstr ""
":data:`g` está disponible automáticamente en las plantillas. En función de si "
"se establece ``g.user`` (desde ``load_logged_in_user``), se muestra el nombre "
"de usuario y un enlace de cierre de sesión, o se muestran enlaces para "
"registrarse e iniciar sesión. :func:`url_for` también está disponible "
"automáticamente, y se utiliza para generar URLs a las vistas en lugar de "
"escribirlas manualmente."

#: ../../tutorial/templates.rst:80
msgid ""
"After the page title, and before the content, the template loops over each "
"message returned by :func:`get_flashed_messages`. You used :func:`flash` in "
"the views to show error messages, and this is the code that will display them."
msgstr ""
"Después del título de la página, y antes del contenido, la plantilla hace un "
"bucle sobre cada mensaje devuelto por :func:`get_flashed_messages`. Has "
"utilizado :func:`flash` en las vistas para mostrar los mensajes de error, y "
"este es el código que los mostrará."

#: ../../tutorial/templates.rst:85
msgid ""
"There are three blocks defined here that will be overridden in the other "
"templates:"
msgstr ""
"Hay tres bloques definidos aquí que serán anulados en las otras plantillas:"

#: ../../tutorial/templates.rst:88
msgid ""
"``{% block title %}`` will change the title displayed in the browser's tab and "
"window title."
msgstr ""
"``{% block title %}`` cambiará el título mostrado en la pestaña del navegador "
"y el título de la ventana."

#: ../../tutorial/templates.rst:91
msgid ""
"``{% block header %}`` is similar to ``title`` but will change the title "
"displayed on the page."
msgstr ""
"``{% block header %}`` es similar a ``title`` pero cambiará el título mostrado "
"en la página."

#: ../../tutorial/templates.rst:94
msgid ""
"``{% block content %}`` is where the content of each page goes, such as the "
"login form or a blog post."
msgstr ""
"``{% block content %}`` es donde va el contenido de cada página, como el "
"formulario de acceso o una entrada del blog."

#: ../../tutorial/templates.rst:97
msgid ""
"The base template is directly in the ``templates`` directory. To keep the "
"others organized, the templates for a blueprint will be placed in a directory "
"with the same name as the blueprint."
msgstr ""
"La plantilla base está directamente en el directorio ``templates``. Para "
"mantener los demás organizados, las plantillas de un plano se colocarán en un "
"directorio con el mismo nombre que el plano."

#: ../../tutorial/templates.rst:103
msgid "Register"
msgstr "Registro"

#: ../../tutorial/templates.rst:105
msgid "``flaskr/templates/auth/register.html``"
msgstr ""

#: ../../tutorial/templates.rst:124
#, python-format
msgid ""
"``{% extends 'base.html' %}`` tells Jinja that this template should replace "
"the blocks from the base template. All the rendered content must appear inside "
"``{% block %}`` tags that override blocks from the base template."
msgstr ""
"``{% extends 'base.html' %}`` indica a Jinja que esta plantilla debe "
"reemplazar los bloques de la plantilla base. Todo el contenido renderizado "
"debe aparecer dentro de las etiquetas ``{% block %}`` que anulan los bloques "
"de la plantilla base."

#: ../../tutorial/templates.rst:129
msgid ""
"A useful pattern used here is to place ``{% block title %}`` inside ``{% block "
"header %}``. This will set the title block and then output the value of it "
"into the header block, so that both the window and page share the same title "
"without writing it twice."
msgstr ""
"Un patrón útil utilizado aquí es colocar ``{% block title %}`` dentro de ``{% "
"block header %}``. Esto establecerá el bloque title y luego emitirá el valor "
"del mismo en el bloque header, para que tanto la ventana como la página "
"compartan el mismo título sin escribirlo dos veces."

#: ../../tutorial/templates.rst:134
msgid ""
"The ``input`` tags are using the ``required`` attribute here. This tells the "
"browser not to submit the form until those fields are filled in. If the user "
"is using an older browser that doesn't support that attribute, or if they are "
"using something besides a browser to make requests, you still want to validate "
"the data in the Flask view. It's important to always fully validate the data "
"on the server, even if the client does some validation as well."
msgstr ""
"Las etiquetas ``input`` están usando el atributo ``required`` aquí. Esto le "
"dice al navegador que no envíe el formulario hasta que esos campos sean "
"rellenados. Si el usuario está usando un navegador antiguo que no soporta ese "
"atributo, o si está usando algo más que un navegador para hacer peticiones, "
"todavía quieres validar los datos en la vista Flask. Es importante siempre "
"validar completamente los datos en el servidor, incluso si el cliente hace "
"alguna validación también."

#: ../../tutorial/templates.rst:144
msgid "Log In"
msgstr "Iniciar sesión"

#: ../../tutorial/templates.rst:146
msgid ""
"This is identical to the register template except for the title and submit "
"button."
msgstr ""
"Es idéntica a la plantilla de registro, excepto por el título y el botón de "
"envío."

#: ../../tutorial/templates.rst:149
msgid "``flaskr/templates/auth/login.html``"
msgstr ""

#: ../../tutorial/templates.rst:170
msgid "Register A User"
msgstr "Registrar un usuario"

#: ../../tutorial/templates.rst:172
msgid ""
"Now that the authentication templates are written, you can register a user. "
"Make sure the server is still running (``flask run`` if it's not), then go to "
"http://127.0.0.1:5000/auth/register."
msgstr ""
"Ahora que las plantillas de autenticación están escritas, puedes registrar un "
"usuario. Asegúrate de que el servidor sigue funcionando (``flask run`` si no "
"lo está), y luego ve a http://127.0.0.1:5000/auth/register."

#: ../../tutorial/templates.rst:176
msgid ""
"Try clicking the \"Register\" button without filling out the form and see that "
"the browser shows an error message. Try removing the ``required`` attributes "
"from the ``register.html`` template and click \"Register\" again. Instead of "
"the browser showing an error, the page will reload and the error from :func:"
"`flash` in the view will be shown."
msgstr ""
"Prueba a hacer clic en el botón \"Registrarse\" sin rellenar el formulario y "
"comprueba que el navegador muestra un mensaje de error. Prueba a eliminar los "
"atributos ``required`` de la plantilla ``register.html`` y vuelve a hacer clic "
"en \"Registrarse\". En lugar de que el navegador muestre un error, la página "
"se recargará y se mostrará el error de :func:`flash` en la vista."

#: ../../tutorial/templates.rst:182
msgid ""
"Fill out a username and password and you'll be redirected to the login page. "
"Try entering an incorrect username, or the correct username and incorrect "
"password. If you log in you'll get an error because there's no ``index`` view "
"to redirect to yet."
msgstr ""
"Rellena un nombre de usuario y una contraseña y serás redirigido a la página "
"de inicio de sesión. Intenta introducir un nombre de usuario incorrecto, o el "
"nombre de usuario correcto y una contraseña incorrecta. Si te conectas "
"obtendrás un error porque todavía no hay una vista ``index`` a la que "
"redirigir."

#: ../../tutorial/templates.rst:187
msgid "Continue to :doc:`static`."
msgstr "Continuar con :doc:`static`."

#: ../../tutorial/tests.rst:4
msgid "Test Coverage"
msgstr "Cobertura de la prueba"

#: ../../tutorial/tests.rst:6
msgid ""
"Writing unit tests for your application lets you check that the code you wrote "
"works the way you expect. Flask provides a test client that simulates requests "
"to the application and returns the response data."
msgstr ""
"Escribir pruebas unitarias para tu aplicación te permite comprobar que el "
"código que has escrito funciona como esperas. Flask proporciona un cliente de "
"pruebas que simula peticiones a la aplicación y devuelve los datos de "
"respuesta."

#: ../../tutorial/tests.rst:10
msgid ""
"You should test as much of your code as possible. Code in functions only runs "
"when the function is called, and code in branches, such as ``if`` blocks, only "
"runs when the condition is met. You want to make sure that each function is "
"tested with data that covers each branch."
msgstr ""
"Deberías probar la mayor parte posible de tu código. El código de las "
"funciones sólo se ejecuta cuando se llama a la función, y el código de las "
"ramas, como los bloques ``if``, sólo se ejecuta cuando se cumple la condición. "
"Debes asegurarte de que cada función se pruebe con datos que cubran cada rama."

#: ../../tutorial/tests.rst:15
#, python-format
msgid ""
"The closer you get to 100% coverage, the more comfortable you can be that "
"making a change won't unexpectedly change other behavior. However, "
"100% coverage doesn't guarantee that your application doesn't have bugs. In "
"particular, it doesn't test how the user interacts with the application in the "
"browser. Despite this, test coverage is an important tool to use during "
"development."
msgstr ""

#: ../../tutorial/tests.rst:23
msgid ""
"This is being introduced late in the tutorial, but in your future projects you "
"should test as you develop."
msgstr ""
"Esto se está introduciendo tarde en el tutorial, pero en tus futuros proyectos "
"deberías hacer pruebas mientras desarrollas."

#: ../../tutorial/tests.rst:26
msgid ""
"You'll use `pytest`_ and `coverage`_ to test and measure your code. Install "
"them both:"
msgstr ""
"Utilizarás `pytest`_ y `coverage`_ para probar y medir tu código. Instala "
"ambos:"

#: ../../tutorial/tests.rst:38
msgid "Setup and Fixtures"
msgstr "Configuración y fixtures"

#: ../../tutorial/tests.rst:40
msgid ""
"The test code is located in the ``tests`` directory. This directory is *next "
"to* the ``flaskr`` package, not inside it. The ``tests/conftest.py`` file "
"contains setup functions called *fixtures* that each test will use. Tests are "
"in Python modules that start with ``test_``, and each test function in those "
"modules also starts with ``test_``."
msgstr ""
"El código de prueba se encuentra en el directorio ``tests``. Este directorio "
"está *al lado* del paquete ``flaskr``, no dentro de él. El archivo ``tests/"
"conftest.py`` contiene funciones de configuración llamadas *fixtures* que cada "
"prueba utilizará. Las pruebas están en módulos de Python que empiezan por "
"``test_``, y cada función de prueba en esos módulos también empieza por "
"``test_``."

#: ../../tutorial/tests.rst:47
msgid ""
"Each test will create a new temporary database file and populate some data "
"that will be used in the tests. Write a SQL file to insert that data."
msgstr ""
"Cada prueba creará un nuevo archivo de base de datos temporal y rellenará "
"algunos datos que se utilizarán en las pruebas. Escribe un archivo SQL para "
"insertar esos datos."

#: ../../tutorial/tests.rst:51
msgid "``tests/data.sql``"
msgstr ""

#: ../../tutorial/tests.rst:63
msgid ""
"The ``app`` fixture will call the factory and pass ``test_config`` to "
"configure the application and database for testing instead of using your local "
"development configuration."
msgstr ""
"El fixture ``app`` llamará a la fábrica y pasará ``test_config`` para "
"configurar la aplicación y la base de datos para las pruebas en lugar de "
"utilizar su configuración local de desarrollo."

#: ../../tutorial/tests.rst:67 ../../tutorial/tests.rst:226
msgid "``tests/conftest.py``"
msgstr ""

#: ../../tutorial/tests.rst:109
msgid ""
":func:`tempfile.mkstemp` creates and opens a temporary file, returning the "
"file descriptor and the path to it. The ``DATABASE`` path is overridden so it "
"points to this temporary path instead of the instance folder. After setting "
"the path, the database tables are created and the test data is inserted. After "
"the test is over, the temporary file is closed and removed."
msgstr ""
":func:`tempfile.mkstemp` crea y abre un archivo temporal, devolviendo el "
"descriptor del archivo y la ruta al mismo. La ruta de ``DATABASE`` se anula "
"para que apunte a esta ruta temporal en lugar de a la carpeta de la instancia. "
"Después de establecer la ruta, se crean las tablas de la base de datos y se "
"insertan los datos de la prueba. Una vez finalizada la prueba, el archivo "
"temporal se cierra y se elimina."

#: ../../tutorial/tests.rst:116
msgid ""
":data:`TESTING` tells Flask that the app is in test mode. Flask changes some "
"internal behavior so it's easier to test, and other extensions can also use "
"the flag to make testing them easier."
msgstr ""
":data:`TESTING` indica a Flask que la aplicación está en modo de prueba. Flask "
"cambia algunos comportamientos internos para que sea más fácil de probar, y "
"otras extensiones también pueden utilizar la bandera para hacer que las "
"pruebas sean más fáciles."

#: ../../tutorial/tests.rst:120
msgid ""
"The ``client`` fixture calls :meth:`app.test_client() <Flask.test_client>` "
"with the application object created by the ``app`` fixture. Tests will use the "
"client to make requests to the application without running the server."
msgstr ""
"El fixture ``client`` llama a :meth:`app.test_client() <Flask.test_client>` "
"con el objeto de aplicación creado por el fixture ``app``. Las pruebas "
"utilizarán el cliente para hacer peticiones a la aplicación sin ejecutar el "
"servidor."

#: ../../tutorial/tests.rst:125
msgid ""
"The ``runner`` fixture is similar to ``client``. :meth:`app.test_cli_runner() "
"<Flask.test_cli_runner>` creates a runner that can call the Click commands "
"registered with the application."
msgstr ""
"El fixture ``runner`` es similar al ``client``. :meth:`app.test_cli_runner() "
"<Flask.test_cli_runner>` crea un runner que puede llamar a los comandos Click "
"registrados con la aplicación."

#: ../../tutorial/tests.rst:129
msgid ""
"Pytest uses fixtures by matching their function names with the names of "
"arguments in the test functions. For example, the ``test_hello`` function "
"you'll write next takes a ``client`` argument. Pytest matches that with the "
"``client`` fixture function, calls it, and passes the returned value to the "
"test function."
msgstr ""
"Pytest utiliza fixtures haciendo coincidir sus nombres de función con los "
"nombres de los argumentos de las funciones de prueba. Por ejemplo, la función "
"``test_hello`` que escribirás a continuación toma un argumento ``client``. "
"Pytest hace coincidir eso con la función fixture ``client``, la llama, y pasa "
"el valor devuelto a la función de prueba."

#: ../../tutorial/tests.rst:137
msgid "Factory"
msgstr "Fábrica"

#: ../../tutorial/tests.rst:139
msgid ""
"There's not much to test about the factory itself. Most of the code will be "
"executed for each test already, so if something fails the other tests will "
"notice."
msgstr ""
"No hay mucho que probar sobre la fábrica en sí. La mayor parte del código se "
"ejecutará ya para cada prueba, así que si algo falla las otras pruebas lo "
"notarán."

#: ../../tutorial/tests.rst:143
msgid ""
"The only behavior that can change is passing test config. If config is not "
"passed, there should be some default configuration, otherwise the "
"configuration should be overridden."
msgstr ""
"El único comportamiento que puede cambiar es pasar la configuración de la "
"prueba. Si no se pasa config, debe haber alguna configuración por defecto, de "
"lo contrario la configuración debe ser anulada."

#: ../../tutorial/tests.rst:147
msgid "``tests/test_factory.py``"
msgstr ""

#: ../../tutorial/tests.rst:162
msgid ""
"You added the ``hello`` route as an example when writing the factory at the "
"beginning of the tutorial. It returns \"Hello, World!\", so the test checks "
"that the response data matches."
msgstr ""
"Has añadido la ruta ``hello`` como ejemplo al escribir la fábrica al principio "
"del tutorial. Devuelve \"¡Hola, mundo!\", por lo que la prueba comprueba que "
"los datos de respuesta coinciden."

#: ../../tutorial/tests.rst:168
msgid "Database"
msgstr "Base de datos"

#: ../../tutorial/tests.rst:170
msgid ""
"Within an application context, ``get_db`` should return the same connection "
"each time it's called. After the context, the connection should be closed."
msgstr ""
"Dentro de un contexto de aplicación, ``get_db`` debe devolver la misma "
"conexión cada vez que se llame. Después del contexto, la conexión debe ser "
"cerrada."

#: ../../tutorial/tests.rst:174 ../../tutorial/tests.rst:196
msgid "``tests/test_db.py``"
msgstr ""

#: ../../tutorial/tests.rst:193
msgid ""
"The ``init-db`` command should call the ``init_db`` function and output a "
"message."
msgstr ""
"El comando ``init-db`` debe llamar a la función ``init_db`` y mostrar un "
"mensaje."

#: ../../tutorial/tests.rst:211
msgid ""
"This test uses Pytest's ``monkeypatch`` fixture to replace the ``init_db`` "
"function with one that records that it's been called. The ``runner`` fixture "
"you wrote above is used to call the ``init-db`` command by name."
msgstr ""
"Esta prueba utiliza el fixture ``monkeypatch`` de Pytest para sustituir la "
"función ``init_db`` por otra que registre que ha sido llamada. El fixture "
"``runner`` que escribiste arriba se utiliza para llamar al comando ``init-db`` "
"por su nombre."

#: ../../tutorial/tests.rst:218
msgid "Authentication"
msgstr "Autenticación"

#: ../../tutorial/tests.rst:220
msgid ""
"For most of the views, a user needs to be logged in. The easiest way to do "
"this in tests is to make a ``POST`` request to the ``login`` view with the "
"client. Rather than writing that out every time, you can write a class with "
"methods to do that, and use a fixture to pass it the client for each test."
msgstr ""
"Para la mayoría de las vistas, un usuario necesita estar conectado. La forma "
"más fácil de hacer esto en las pruebas es hacer una petición ``POST`` a la "
"vista ``login`` con el cliente. En lugar de escribir eso cada vez, puedes "
"escribir una clase con métodos para hacer eso, y usar un fixture para pasarle "
"el cliente para cada prueba."

#: ../../tutorial/tests.rst:247
msgid ""
"With the ``auth`` fixture, you can call ``auth.login()`` in a test to log in "
"as the ``test`` user, which was inserted as part of the test data in the "
"``app`` fixture."
msgstr ""
"Con el fixture ``auth``, puedes llamar a ``auth.login()`` en una prueba para "
"iniciar sesión como el usuario ``test``, que fue insertado como parte de los "
"datos de la prueba en el fixture ``app``."

#: ../../tutorial/tests.rst:251
msgid ""
"The ``register`` view should render successfully on ``GET``. On ``POST`` with "
"valid form data, it should redirect to the login URL and the user's data "
"should be in the database. Invalid data should display error messages."
msgstr ""
"La vista ``register`` debería ser mostrada con éxito en ``GET``. En ``POST`` "
"con datos de formulario válidos, debería redirigir a la URL de acceso y los "
"datos del usuario deberían estar en la base de datos. Los datos no válidos "
"deberían mostrar mensajes de error."

#: ../../tutorial/tests.rst:256 ../../tutorial/tests.rst:316
#: ../../tutorial/tests.rst:345
msgid "``tests/test_auth.py``"
msgstr ""

#: ../../tutorial/tests.rst:289
msgid ""
":meth:`client.get() <werkzeug.test.Client.get>` makes a ``GET`` request and "
"returns the :class:`Response` object returned by Flask. Similarly, :meth:"
"`client.post() <werkzeug.test.Client.post>` makes a ``POST`` request, "
"converting the ``data`` dict into form data."
msgstr ""
":meth:`client.get() <werkzeug.test.Client.get>` realiza una petición ``GET`` y "
"devuelve el objeto :class:`Response` devuelto por Flask. Del mismo modo, :meth:"
"`client.post() <werkzeug.test.Client.post>` realiza una petición ``POST``, "
"convirtiendo el dictado ``data`` en datos del formulario."

#: ../../tutorial/tests.rst:294
msgid ""
"To test that the page renders successfully, a simple request is made and "
"checked for a ``200 OK`` :attr:`~Response.status_code`. If rendering failed, "
"Flask would return a ``500 Internal Server Error`` code."
msgstr ""
"Para comprobar que la página se renderiza correctamente, se hace una petición "
"simple y se comprueba si hay un ``200 OK`` :attr:`~Response.status_code`. Si "
"el renderizado falla, Flask devolverá un código ``500 Internal Server Error``."

#: ../../tutorial/tests.rst:299
msgid ""
":attr:`~Response.headers` will have a ``Location`` header with the login URL "
"when the register view redirects to the login view."
msgstr ""
":attr:`~Response.headers` tendrá una cabecera ``Location`` con la URL de "
"acceso cuando la vista de registro redirija a la vista de acceso."

#: ../../tutorial/tests.rst:302
msgid ""
":attr:`~Response.data` contains the body of the response as bytes. If you "
"expect a certain value to render on the page, check that it's in ``data``. "
"Bytes must be compared to bytes. If you want to compare text, use :meth:"
"`get_data(as_text=True) <werkzeug.wrappers.Response.get_data>` instead."
msgstr ""
":attr:`~Response.data` contiene el cuerpo de la respuesta en forma de bytes. "
"Si esperas que un determinado valor se renderice en la página, comprueba que "
"está en ``data``. Los bytes deben ser comparados con bytes. Si quieres "
"comparar texto, utiliza :meth:`get_data(as_text=True) <werkzeug.wrappers."
"Response.get_data>` en su lugar."

#: ../../tutorial/tests.rst:308
msgid ""
"``pytest.mark.parametrize`` tells Pytest to run the same test function with "
"different arguments. You use it here to test different invalid input and error "
"messages without writing the same code three times."
msgstr ""
"``pytest.mark.parametrize`` le dice a Pytest que ejecute la misma función de "
"prueba con diferentes argumentos. Se utiliza aquí para probar diferentes "
"entradas no válidas y mensajes de error sin tener que escribir el mismo código "
"tres veces."

#: ../../tutorial/tests.rst:312
msgid ""
"The tests for the ``login`` view are very similar to those for ``register``. "
"Rather than testing the data in the database, :data:`session` should have "
"``user_id`` set after logging in."
msgstr ""
"Las pruebas para la vista ``login`` son muy similares a las de ``register``. "
"En lugar de probar los datos en la base de datos, :data:`session` debe tener "
"``user_id`` establecido después de iniciar la sesión."

#: ../../tutorial/tests.rst:338
msgid ""
"Using ``client`` in a ``with`` block allows accessing context variables such "
"as :data:`session` after the response is returned. Normally, accessing "
"``session`` outside of a request would raise an error."
msgstr ""
"El uso de ``client`` en un bloque ``with`` permite acceder a variables de "
"contexto como :data:`session` después de que se devuelva la respuesta. "
"Normalmente, acceder a ``session`` fuera de una petición daría un error."

#: ../../tutorial/tests.rst:342
msgid ""
"Testing ``logout`` is the opposite of ``login``. :data:`session` should not "
"contain ``user_id`` after logging out."
msgstr ""
"Probar ``logout`` es lo contrario de ``login``. :data:`session` no debe "
"contener ``user_id`` después de cerrar la sesión."

#: ../../tutorial/tests.rst:357
msgid "Blog"
msgstr ""

#: ../../tutorial/tests.rst:359
msgid ""
"All the blog views use the ``auth`` fixture you wrote earlier. Call ``auth."
"login()`` and subsequent requests from the client will be logged in as the "
"``test`` user."
msgstr ""
"Todas las vistas del blog utilizan el fixture ``auth`` que escribiste antes. "
"Llama a ``auth.login()`` y las siguientes peticiones del cliente se "
"registrarán como el usuario ``test``."

#: ../../tutorial/tests.rst:363
msgid ""
"The ``index`` view should display information about the post that was added "
"with the test data. When logged in as the author, there should be a link to "
"edit the post."
msgstr ""
"La vista ``index`` debería mostrar información sobre el post que fue añadido "
"con los datos de prueba. Cuando se inicie la sesión como autor, debería haber "
"un enlace para editar la entrada."

#: ../../tutorial/tests.rst:367
msgid ""
"You can also test some more authentication behavior while testing the "
"``index`` view. When not logged in, each page shows links to log in or "
"register. When logged in, there's a link to log out."
msgstr ""
"También puedes probar más comportamientos de autenticación mientras pruebas la "
"vista ``index``. Cuando no se ha iniciado la sesión, cada página muestra "
"enlaces para iniciar la sesión o registrarse. Cuando se ha iniciado la sesión, "
"hay un enlace para cerrar la sesión."

#: ../../tutorial/tests.rst:371 ../../tutorial/tests.rst:397
#: ../../tutorial/tests.rst:439 ../../tutorial/tests.rst:476
msgid "``tests/test_blog.py``"
msgstr ""

#: ../../tutorial/tests.rst:391
msgid ""
"A user must be logged in to access the ``create``, ``update``, and ``delete`` "
"views. The logged in user must be the author of the post to access ``update`` "
"and ``delete``, otherwise a ``403 Forbidden`` status is returned. If a "
"``post`` with the given ``id`` doesn't exist, ``update`` and ``delete`` should "
"return ``404 Not Found``."
msgstr ""
"Un usuario debe estar conectado para acceder a las vistas ``create``, "
"``update`` y ``delete``. El usuario conectado debe ser el autor de la entrada "
"para acceder a ``update`` y ``delete``, de lo contrario se devuelve el estado "
"``403 Forbidden``. Si un ``post`` con el ``id`` dado no existe, ``update`` y "
"``delete`` deben devolver ``404 Not Found``."

#: ../../tutorial/tests.rst:433
msgid ""
"The ``create`` and ``update`` views should render and return a ``200 OK`` "
"status for a ``GET`` request. When valid data is sent in a ``POST`` request, "
"``create`` should insert the new post data into the database, and ``update`` "
"should modify the existing data. Both pages should show an error message on "
"invalid data."
msgstr ""
"Las vistas ``create`` y ``update`` deben generar y devolver un estado ``200 "
"OK`` para una petición ``GET``. Cuando se envían datos válidos en una petición "
"``POST``, ``create`` debe insertar los nuevos datos de la entrada en la base "
"de datos, y ``update`` debe modificar los datos existentes. Ambas páginas "
"deben mostrar un mensaje de error si los datos no son válidos."

#: ../../tutorial/tests.rst:473
msgid ""
"The ``delete`` view should redirect to the index URL and the post should no "
"longer exist in the database."
msgstr ""
"La vista ``delete`` debería redirigir a la URL del índice y la entrada ya no "
"debería existir en la base de datos."

#: ../../tutorial/tests.rst:491
msgid "Running the Tests"
msgstr "Ejecución de las pruebas"

#: ../../tutorial/tests.rst:493
msgid ""
"Some extra configuration, which is not required but makes running tests with "
"coverage less verbose, can be added to the project's ``setup.cfg`` file."
msgstr ""
"En el archivo ``setup.cfg`` del proyecto se puede añadir alguna configuración "
"extra, que no es necesaria pero que hace que la ejecución de las pruebas con "
"cobertura sea menos verbosa."

#: ../../tutorial/tests.rst:497
msgid "``setup.cfg``"
msgstr ""

#: ../../tutorial/tests.rst:508
msgid ""
"To run the tests, use the ``pytest`` command. It will find and run all the "
"test functions you've written."
msgstr ""
"Para ejecutar las pruebas, utiliza el comando ``pytest``. Encontrará y "
"ejecutará todas las funciones de prueba que hayas escrito."

#: ../../tutorial/tests.rst:527
msgid ""
"If any tests fail, pytest will show the error that was raised. You can run "
"``pytest -v`` to get a list of each test function rather than dots."
msgstr ""
"Si alguna prueba falla, pytest mostrará el error que se produjo. Puedes "
"ejecutar ``pytest -v`` para obtener una lista de cada función de prueba en "
"lugar de puntos."

#: ../../tutorial/tests.rst:530
msgid ""
"To measure the code coverage of your tests, use the ``coverage`` command to "
"run pytest instead of running it directly."
msgstr ""
"Para medir la cobertura de código de tus pruebas, utiliza el comando "
"``coverage`` para ejecutar pytest en lugar de ejecutarlo directamente."

#: ../../tutorial/tests.rst:537
msgid "You can either view a simple coverage report in the terminal:"
msgstr "Puede ver un simple informe de cobertura en el terminal:"

#: ../../tutorial/tests.rst:552
msgid "An HTML report allows you to see which lines were covered in each file:"
msgstr ""
"Un informe HTML le permite ver qué líneas se han cubierto en cada archivo:"

#: ../../tutorial/tests.rst:558
msgid ""
"This generates files in the ``htmlcov`` directory. Open ``htmlcov/index.html`` "
"in your browser to see the report."
msgstr ""
"Esto genera archivos en el directorio ``htmlcov``. Abra ``htmlcov/index.html`` "
"en su navegador para ver el informe."

#: ../../tutorial/tests.rst:561
msgid "Continue to :doc:`deploy`."
msgstr "Continúe con :doc:`deploy`."

#: ../../tutorial/views.rst:4
msgid "Blueprints and Views"
msgstr "Blueprints y vistas"

#: ../../tutorial/views.rst:6
msgid ""
"A view function is the code you write to respond to requests to your "
"application. Flask uses patterns to match the incoming request URL to the view "
"that should handle it. The view returns data that Flask turns into an outgoing "
"response. Flask can also go the other direction and generate a URL to a view "
"based on its name and arguments."
msgstr ""
"Una función de vista es el código que escribes para responder a las peticiones "
"de tu aplicación. Flask utiliza patrones para hacer coincidir la URL de la "
"solicitud entrante con la vista que debe manejarla. La vista devuelve datos "
"que Flask convierte en una respuesta saliente. Flask también puede ir en la "
"otra dirección y generar una URL a una vista basada en su nombre y argumentos."

#: ../../tutorial/views.rst:14
msgid "Create a Blueprint"
msgstr "Crear un Blueprint"

#: ../../tutorial/views.rst:16
msgid ""
"A :class:`Blueprint` is a way to organize a group of related views and other "
"code. Rather than registering views and other code directly with an "
"application, they are registered with a blueprint. Then the blueprint is "
"registered with the application when it is available in the factory function."
msgstr ""
"Un :class:`Blueprint` es una forma de organizar un grupo de vistas y otro "
"código relacionados. En lugar de registrar las vistas y otro código "
"directamente con una aplicación, se registran con un blueprint. Entonces el "
"blueprint se registra con la aplicación cuando está disponible en la función "
"de fábrica."

#: ../../tutorial/views.rst:22
msgid ""
"Flaskr will have two blueprints, one for authentication functions and one for "
"the blog posts functions. The code for each blueprint will go in a separate "
"module. Since the blog needs to know about authentication, you'll write the "
"authentication one first."
msgstr ""
"Flaskr tendrá dos blueprints, uno para las funciones de autenticación y otro "
"para las funciones de las entradas del blog. El código para cada blueprint irá "
"en un módulo separado. Dado que el blog necesita conocer la autenticación, "
"escribirás primero el de autenticación."

#: ../../tutorial/views.rst:27 ../../tutorial/views.rst:79
#: ../../tutorial/views.rst:171 ../../tutorial/views.rst:218
#: ../../tutorial/views.rst:247 ../../tutorial/views.rst:263
msgid "``flaskr/auth.py``"
msgstr ""

#: ../../tutorial/views.rst:41
msgid ""
"This creates a :class:`Blueprint` named ``'auth'``. Like the application "
"object, the blueprint needs to know where it's defined, so ``__name__`` is "
"passed as the second argument. The ``url_prefix`` will be prepended to all the "
"URLs associated with the blueprint."
msgstr ""
"Esto crea un :class:`Blueprint` llamado ``'auth'``. Al igual que el objeto de "
"aplicación, el blueprint necesita saber dónde está definido, por lo que se "
"pasa ``nombre__`` como segundo argumento. El ``url_prefix`` se añadirá a todas "
"las URLs asociadas al blueprint."

#: ../../tutorial/views.rst:62
msgid ""
"The authentication blueprint will have views to register new users and to log "
"in and log out."
msgstr ""
"El Blueprint de autenticación tendrá vistas para registrar nuevos usuarios y "
"para iniciar y cerrar la sesión."

#: ../../tutorial/views.rst:67
msgid "The First View: Register"
msgstr "La primera vista: Registro"

#: ../../tutorial/views.rst:69
msgid ""
"When the user visits the ``/auth/register`` URL, the ``register`` view will "
"return `HTML`_ with a form for them to fill out. When they submit the form, it "
"will validate their input and either show the form again with an error message "
"or create the new user and go to the login page."
msgstr ""
"Cuando el usuario visita la URL ``/auth/register``, la vista ``register`` "
"devolverá `HTML`_ con un formulario para que lo rellenen. Cuando envíen el "
"formulario, se validará su entrada y se mostrará de nuevo el formulario con un "
"mensaje de error o se creará el nuevo usuario y se irá a la página de inicio "
"de sesión."

#: ../../tutorial/views.rst:76
msgid ""
"For now you will just write the view code. On the next page, you'll write "
"templates to generate the HTML form."
msgstr ""
"Por ahora sólo escribirás el código de la vista. En la siguiente página, "
"escribirás las plantillas para generar el formulario HTML."

#: ../../tutorial/views.rst:111
msgid "Here's what the ``register`` view function is doing:"
msgstr "Esto es lo que hace la función de vista ``register``:"

#: ../../tutorial/views.rst:113
msgid ""
":meth:`@bp.route <Blueprint.route>` associates the URL ``/register`` with the "
"``register`` view function. When Flask receives a request to ``/auth/"
"register``, it will call the ``register`` view and use the return value as the "
"response."
msgstr ""
":meth:`@bp.route <Blueprint.route>` asocia la URL ``/register`` con la función "
"de la vista ``register``. Cuando Flask reciba una petición a ``/auth/"
"register``, llamará a la vista ``register`` y utilizará el valor devuelto como "
"respuesta."

#: ../../tutorial/views.rst:118
msgid ""
"If the user submitted the form, :attr:`request.method <Request.method>` will "
"be ``'POST'``. In this case, start validating the input."
msgstr ""
"Si el usuario ha enviado el formulario, :attr:`request.method <Request."
"method>` será ``'POST'``. En este caso, empieza a validar la entrada."

#: ../../tutorial/views.rst:122
msgid ""
":attr:`request.form <Request.form>` is a special type of :class:`dict` mapping "
"submitted form keys and values. The user will input their ``username`` and "
"``password``."
msgstr ""
":attr:`request.form <Request.form>` es un tipo especial de :class:`dict` que "
"mapea las claves y valores del formulario enviado. El usuario introducirá su "
"``nombre de usuario`` y su ``contraseña``."

#: ../../tutorial/views.rst:126
msgid "Validate that ``username`` and ``password`` are not empty."
msgstr "Valida que ``nombre de usuario`` y ``contraseña`` no estén vacíos."

#: ../../tutorial/views.rst:128
msgid ""
"Validate that ``username`` is not already registered by querying the database "
"and checking if a result is returned. :meth:`db.execute <sqlite3.Connection."
"execute>` takes a SQL query with ``?`` placeholders for any user input, and a "
"tuple of values to replace the placeholders with. The database library will "
"take care of escaping the values so you are not vulnerable to a *SQL injection "
"attack*."
msgstr ""
"Valida que ``nombre de usuario`` no está ya registrado consultando la base de "
"datos y comprobando si se devuelve un resultado. :meth:`db.execute <sqlite3."
"Connection.execute>` toma una consulta SQL con ``?`` marcadores de posición "
"para cualquier entrada del usuario, y una tupla de valores para reemplazar los "
"marcadores de posición. La biblioteca de la base de datos se encargará de "
"escapar los valores para que no seas vulnerable a un *ataque de inyección SQL*."

#: ../../tutorial/views.rst:136
msgid ""
":meth:`~sqlite3.Cursor.fetchone` returns one row from the query. If the query "
"returned no results, it returns ``None``. Later, :meth:`~sqlite3.Cursor."
"fetchall` is used, which returns a list of all results."
msgstr ""
":meth:`~sqlite3.Cursor.fetchone` devuelve una fila de la consulta. Si la "
"consulta no devuelve ningún resultado, devuelve ``None``. Más tarde, :meth:"
"`~sqlite3.Cursor.fetchall` es utilizado, que devuelve una lista de todos los "
"resultados."

#: ../../tutorial/views.rst:141
msgid ""
"If validation succeeds, insert the new user data into the database. For "
"security, passwords should never be stored in the database directly. Instead, :"
"func:`~werkzeug.security.generate_password_hash` is used to securely hash the "
"password, and that hash is stored. Since this query modifies data, :meth:`db."
"commit() <sqlite3.Connection.commit>` needs to be called afterwards to save "
"the changes."
msgstr ""
"Si la validación tiene éxito, inserte los nuevos datos del usuario en la base "
"de datos. Por seguridad, las contraseñas nunca deben ser almacenadas en la "
"base de datos directamente. En su lugar, se utiliza :func:`~werkzeug.security."
"generate_password_hash` para hacer un hash seguro de la contraseña, y ese hash "
"se almacena. Como esta consulta modifica los datos, es necesario llamar "
"después a :meth:`db.commit() <sqlite3.Connection.commit>` para guardar los "
"cambios."

#: ../../tutorial/views.rst:149
msgid ""
"After storing the user, they are redirected to the login page. :func:`url_for` "
"generates the URL for the login view based on its name. This is preferable to "
"writing the URL directly as it allows you to change the URL later without "
"changing all code that links to it. :func:`redirect` generates a redirect "
"response to the generated URL."
msgstr ""
"Después de almacenar al usuario, se le redirige a la página de inicio de "
"sesión. :func:`url_for` genera la URL para la vista de inicio de sesión "
"basándose en su nombre. Esto es preferible a escribir la URL directamente ya "
"que permite cambiar la URL más tarde sin cambiar todo el código que enlaza con "
"ella. :func:`redirect` genera una respuesta de redirección a la URL generada."

#: ../../tutorial/views.rst:156
msgid ""
"If validation fails, the error is shown to the user. :func:`flash` stores "
"messages that can be retrieved when rendering the template."
msgstr ""
"Si la validación falla, se muestra el error al usuario. :func:`flash` almacena "
"mensajes que pueden ser recuperados al renderizar la plantilla."

#: ../../tutorial/views.rst:159
msgid ""
"When the user initially navigates to ``auth/register``, or there was a "
"validation error, an HTML page with the registration form should be shown. :"
"func:`render_template` will render a template containing the HTML, which "
"you'll write in the next step of the tutorial."
msgstr ""
"Cuando el usuario navega inicialmente a ``auth/register``, o hay un error de "
"validación, se debe mostrar una página HTML con el formulario de registro. :"
"func:`render_template` renderizará una plantilla que contiene el HTML, que "
"escribirás en el siguiente paso del tutorial."

#: ../../tutorial/views.rst:167
msgid "Login"
msgstr "Inicio de sesión"

#: ../../tutorial/views.rst:169
msgid "This view follows the same pattern as the ``register`` view above."
msgstr "Esta vista sigue el mismo patrón que la vista ``registro`` anterior."

#: ../../tutorial/views.rst:199
msgid "There are a few differences from the ``register`` view:"
msgstr "Hay algunas diferencias con la vista ``register``:"

#: ../../tutorial/views.rst:201
msgid "The user is queried first and stored in a variable for later use."
msgstr ""
"El usuario se consulta primero y se almacena en una variable para su uso "
"posterior."

#: ../../tutorial/views.rst:203
msgid ""
":func:`~werkzeug.security.check_password_hash` hashes the submitted password "
"in the same way as the stored hash and securely compares them. If they match, "
"the password is valid."
msgstr ""
":func:`~werkzeug.security.check_password_hash` realiza el hash de la "
"contraseña enviada de la misma forma que el hash almacenado y los compara de "
"forma segura. Si coinciden, la contraseña es válida."

#: ../../tutorial/views.rst:207
msgid ""
":data:`session` is a :class:`dict` that stores data across requests. When "
"validation succeeds, the user's ``id`` is stored in a new session. The data is "
"stored in a *cookie* that is sent to the browser, and the browser then sends "
"it back with subsequent requests. Flask securely *signs* the data so that it "
"can't be tampered with."
msgstr ""
":data:`session` es una :class:`dict` que almacena datos a través de las "
"peticiones. Cuando la validación tiene éxito, el ``id`` del usuario se "
"almacena en una nueva sesión. Los datos se almacenan en una *cookie* que se "
"envía al navegador, y éste la devuelve con las siguientes peticiones. Flask "
"*firma* de forma segura los datos para que no puedan ser manipulados."

#: ../../tutorial/views.rst:213
msgid ""
"Now that the user's ``id`` is stored in the :data:`session`, it will be "
"available on subsequent requests. At the beginning of each request, if a user "
"is logged in their information should be loaded and made available to other "
"views."
msgstr ""
"Ahora que el ``id`` del usuario está almacenado en el :data:`session`, estará "
"disponible en las siguientes peticiones. Al principio de cada petición, si un "
"usuario está conectado, su información debe ser cargada and made available to "
"other views."

#: ../../tutorial/views.rst:232
msgid ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>` registers a "
"function that runs before the view function, no matter what URL is requested. "
"``load_logged_in_user`` checks if a user id is stored in the :data:`session` "
"and gets that user's data from the database, storing it on :data:`g.user <g>`, "
"which lasts for the length of the request. If there is no user id, or if the "
"id doesn't exist, ``g.user`` will be ``None``."
msgstr ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>` registra una "
"función que se ejecuta antes de la función de vista, sin importar la URL "
"solicitada. ``load_logged_in_user`` comprueba si hay un id de usuario "
"almacenado en la :data:`session` y obtiene los datos de ese usuario de la base "
"de datos, almacenándolos en :data:`g.user <g>`, que dura lo que dure la "
"petición. Si no hay id de usuario, o si el id no existe, ``g.user`` será "
"``None``."

#: ../../tutorial/views.rst:242
msgid "Logout"
msgstr "Cierre de sesión"

#: ../../tutorial/views.rst:244
msgid ""
"To log out, you need to remove the user id from the :data:`session`. Then "
"``load_logged_in_user`` won't load a user on subsequent requests."
msgstr ""
"Para cerrar la sesión, es necesario eliminar el id de usuario de la :data:"
"`session`. Entonces ``load_logged_in_user`` no cargará un usuario en las "
"siguientes peticiones."

#: ../../tutorial/views.rst:257
msgid "Require Authentication in Other Views"
msgstr "Requerir autenticación en otras vistas"

#: ../../tutorial/views.rst:259
msgid ""
"Creating, editing, and deleting blog posts will require a user to be logged "
"in. A *decorator* can be used to check this for each view it's applied to."
msgstr ""
"La creación, edición y eliminación de entradas del blog requerirá que el "
"usuario esté conectado. Se puede utilizar un *decorador* para comprobar esto "
"para cada vista a la que se aplique."

#: ../../tutorial/views.rst:276
msgid ""
"This decorator returns a new view function that wraps the original view it's "
"applied to. The new function checks if a user is loaded and redirects to the "
"login page otherwise. If a user is loaded the original view is called and "
"continues normally. You'll use this decorator when writing the blog views."
msgstr ""
"Este decorador devuelve una nueva función de vista que envuelve la vista "
"original a la que se aplica. La nueva función comprueba si hay un usuario "
"cargado y redirige a la página de inicio de sesión en caso contrario. Si se "
"carga un usuario, se llama a la vista original y continúa normalmente. "
"Utilizarás este decorador cuando escribas las vistas del blog."

#: ../../tutorial/views.rst:283
msgid "Endpoints and URLs"
msgstr "Endpoints y URLs"

#: ../../tutorial/views.rst:285
msgid ""
"The :func:`url_for` function generates the URL to a view based on a name and "
"arguments. The name associated with a view is also called the *endpoint*, and "
"by default it's the same as the name of the view function."
msgstr ""
"La función :func:`url_for` genera la URL de una vista basándose en un nombre y "
"unos argumentos. El nombre asociado a una vista también se llama *endpoint*, y "
"por defecto es el mismo que el nombre de la función de la vista."

#: ../../tutorial/views.rst:290
msgid ""
"For example, the ``hello()`` view that was added to the app factory earlier in "
"the tutorial has the name ``'hello'`` and can be linked to with "
"``url_for('hello')``. If it took an argument, which you'll see later, it would "
"be linked to using ``url_for('hello', who='World')``."
msgstr ""
"Por ejemplo, la vista ``hello()`` que fue añadida a la fábrica de aplicaciones "
"anteriormente en el tutorial tiene el nombre ``'hello'`` y puede ser enlazada "
"con ``url_for('hello')``. Si tuviera un argumento, que verás más adelante, se "
"enlazaría con ``url_for('hello', who='World')``."

#: ../../tutorial/views.rst:296
msgid ""
"When using a blueprint, the name of the blueprint is prepended to the name of "
"the function, so the endpoint for the ``login`` function you wrote above is "
"``'auth.login'`` because you added it to the ``'auth'`` blueprint."
msgstr ""
"Cuando se utiliza un blueprint, el nombre del blueprint se antepone al nombre "
"de la función, por lo que el punto final de la función ``login`` que "
"escribiste arriba es ``'auth.login'`` porque lo agregaste al blueprint "
"``'auth'``."

#: ../../tutorial/views.rst:301
msgid "Continue to :doc:`templates`."
msgstr "Continuar con :doc:`templates`."
